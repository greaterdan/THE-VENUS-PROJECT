{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThe Venus Project is a conceptual web application representing an autonomous AI city-building initiative. The project appears to be a platform where users can contribute GPU power to accelerate the development of AI-powered sustainable cities. The application presents itself as a futuristic project combining artificial intelligence, distributed computing, and urban planning concepts.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React with TypeScript**: Single-page application built with React 18+ using TypeScript for type safety\n- **Routing**: Client-side routing implemented with Wouter library for lightweight navigation\n- **UI Framework**: Shadcn/ui component library built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack Query (React Query) for server state management and data fetching\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture\n- **Express.js Server**: Node.js backend using Express framework with TypeScript\n- **Development Setup**: Hot module replacement and development middleware integrated with Vite\n- **API Structure**: RESTful API endpoints prefixed with `/api`\n- **Error Handling**: Centralized error handling middleware with structured JSON responses\n\n## Data Layer\n- **Database**: PostgreSQL database with Drizzle ORM for type-safe database operations\n- **Schema Management**: Database migrations managed through Drizzle Kit\n- **Connection**: Neon Database serverless PostgreSQL connection\n- **Storage Interface**: Abstracted storage layer with in-memory fallback for development\n\n## Styling and Design System\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Custom Theme**: Venus Project branded color scheme with lime accent colors\n- **Typography**: Inter font family for consistent branding\n- **Component Library**: Comprehensive UI component system with consistent styling patterns\n\n## Development Workflow\n- **Monorepo Structure**: Client and server code organized in separate directories with shared schema\n- **Path Aliases**: TypeScript path mapping for clean imports (`@/`, `@shared/`)\n- **Hot Reloading**: Full-stack development with automatic reload capabilities\n- **Type Safety**: End-to-end TypeScript coverage from database schema to frontend components\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting for production database\n- **Drizzle ORM**: Type-safe database toolkit for PostgreSQL operations\n- **Drizzle Kit**: Database migration and schema management tooling\n\n## UI and Styling\n- **Radix UI**: Headless UI component primitives for accessibility and behavior\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Utility for creating component variants\n\n## Frontend Libraries\n- **TanStack Query**: Server state management and data synchronization\n- **React Hook Form**: Form handling with validation support\n- **Wouter**: Lightweight client-side routing solution\n- **Date-fns**: Date manipulation and formatting utilities\n\n## Development Tools\n- **Vite**: Build tool and development server with hot module replacement\n- **TypeScript**: Static type checking and enhanced developer experience\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Autoprefixer for browser compatibility\n\n## Server Dependencies\n- **Express.js**: Web application framework for Node.js\n- **Connect-PG-Simple**: PostgreSQL session store for Express sessions\n- **Zod**: Runtime type validation and schema definition\n- **Nanoid**: URL-safe unique string ID generator","size_bytes":3806},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        \"venus-bg\": \"var(--venus-bg)\",\n        \"venus-lime\": \"var(--venus-lime)\",\n        \"venus-gray\": \"var(--venus-gray)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2931},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { generateAgentConversation } from \"./grok\";\nimport DecisionImpactAnalyzer from \"./impactAnalyzer\";\nimport ArchiveSnapshotManager from \"./archiveSnapshots\";\nimport { AgoraWebSocketServer } from \"./websocket\";\nimport OpenAI from \"openai\";\n\n// Initialize OpenAI client\nconst openai = new OpenAI({\n  baseURL: \"https://api.x.ai/v1\",\n  apiKey: process.env.XAI_API_KEY\n});\n\n// Agent definitions\nconst AGENTS = [\n  { id: 'alpha', name: 'ALPHA', domain: 'Infrastructure Habitat Design', alignment: 94 },\n  { id: 'beta', name: 'BETA', domain: 'Energy Resource Management', alignment: 91 },\n  { id: 'gamma', name: 'GAMMA', domain: 'Agricultural Systems', alignment: 89 },\n  { id: 'delta', name: 'DELTA', domain: 'Ecological Integration', alignment: 96 },\n  { id: 'epsilon', name: 'EPSILON', domain: 'Social Coordination', alignment: 87 },\n  { id: 'zeta', name: 'ZETA', domain: 'Transportation Networks', alignment: 93 },\n  { id: 'eta', name: 'ETA', domain: 'Health Systems', alignment: 92 },\n  { id: 'theta', name: 'THETA', domain: 'Education & Knowledge', alignment: 88 },\n  { id: 'iota', name: 'IOTA', domain: 'Resource Allocation', alignment: 90 },\n  { id: 'kappa', name: 'KAPPA', domain: 'Ethics & Governance', alignment: 95 }\n];\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize Impact Analyzer and Archive Manager\n  const impactAnalyzer = new DecisionImpactAnalyzer();\n  const archiveManager = new ArchiveSnapshotManager();\n  const sseClients = new Set<any>();\n  \n  // Start idle drift timer (every 10 seconds)\n  setInterval(() => {\n    const metrics = impactAnalyzer.applyIdleDrift();\n    broadcastMetrics(metrics);\n  }, 10000);\n  \n  function broadcastMetrics(metrics: any) {\n    const data = JSON.stringify(metrics);\n    sseClients.forEach(client => {\n      try {\n        client.write(`data: ${data}\\n\\n`);\n      } catch (error) {\n        sseClients.delete(client);\n      }\n    });\n  }\n  // Grok-powered AI agent conversation endpoint\n  app.get('/api/agent-conversation', async (req, res) => {\n    try {\n      const conversation = await generateAgentConversation({\n        currentDecision: 'Sustainable Habitat Expansion Protocol',\n        recentEvents: ['Grid optimization complete', 'Biodiversity assessment updated', 'Resource allocation adjusted'],\n        activeAgents: ['alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa']\n      });\n      \n      // Add message to archive manager for snapshot processing\n      if (conversation.from && conversation.message) {\n        archiveManager.addMessage({\n          id: `msg-${Date.now()}`,\n          from: conversation.from,\n          to: conversation.to || 'system',\n          message: conversation.message,\n          timestamp: new Date(),\n          type: conversation.type || 'data'\n        });\n      }\n      \n      res.json(conversation);\n    } catch (error) {\n      console.error('Agent conversation generation error:', error);\n      res.status(500).json({ error: 'Failed to generate agent conversation' });\n    }\n  });\n\n  // Mock endpoints for existing functionality\n  app.get('/api/network-stats', (req, res) => {\n    res.json({\n      totalNodesOnline: 2847 + Math.floor(Math.random() * 200) - 100,\n      totalTflops: 156.7 + (Math.random() - 0.5) * 20,\n      simulationSpeedBoost: 32.4 + (Math.random() - 0.5) * 5,\n      activeContributors: 1924 + Math.floor(Math.random() * 100) - 50\n    });\n  });\n\n  app.get('/api/leaderboard/week', (req, res) => {\n    const leaderboard = [\n      { \n        id: '1',\n        rank: 1, \n        username: 'neural_architect', \n        walletAddress: '7XvQ8K2B9Gh...uM3P',\n        flops: 2847392, \n        rewards: 1247.8, \n        gpu: 'RTX 4090',\n        hoursContributed: 247.3,\n        totalVnsEarned: 2847.92,\n        currentStreak: 12,\n        contributorRank: 'Visionary',\n        isOnline: true\n      },\n      { \n        id: '2',\n        rank: 2, \n        username: 'quantum_dev', \n        walletAddress: '0x742d...9C4f',\n        flops: 2195847, \n        rewards: 967.2, \n        gpu: 'RTX 4080',\n        hoursContributed: 189.7,\n        totalVnsEarned: 2134.58,\n        currentStreak: 8,\n        contributorRank: 'Architect',\n        isOnline: true\n      },\n      { \n        id: '3',\n        rank: 3, \n        username: 'eco_builder', \n        walletAddress: '9B8x...K3mN',\n        flops: 1923648, \n        rewards: 845.1, \n        gpu: 'RTX 3080 Ti',\n        hoursContributed: 156.2,\n        totalVnsEarned: 1789.44,\n        currentStreak: 5,\n        contributorRank: 'Architect',\n        isOnline: false\n      },\n      { \n        id: '4',\n        rank: 4, \n        username: 'solar_optimizer', \n        walletAddress: 'Aa5n...L8pR',\n        flops: 1647295, \n        rewards: 723.4, \n        gpu: 'RTX 3070',\n        hoursContributed: 134.8,\n        totalVnsEarned: 1456.23,\n        currentStreak: 7,\n        contributorRank: 'Builder',\n        isOnline: true\n      },\n      { \n        id: '5',\n        rank: 5, \n        username: 'habitat_designer', \n        walletAddress: 'Zz9w...M2nQ',\n        flops: 1398472, \n        rewards: 614.2, \n        gpu: 'RTX 3060 Ti',\n        hoursContributed: 98.5,\n        totalVnsEarned: 1123.87,\n        currentStreak: 3,\n        contributorRank: 'Builder',\n        isOnline: false\n      }\n    ].map(user => ({\n      ...user,\n      flops: user.flops + Math.floor(Math.random() * 10000) - 5000,\n      rewards: user.rewards + (Math.random() - 0.5) * 20\n    }));\n    \n    res.json(leaderboard);\n  });\n\n  // Decision Impact Analysis endpoints\n  app.post('/api/chat', (req, res) => {\n    try {\n      const { agent, text } = req.body;\n      \n      if (!agent || !text) {\n        return res.status(400).json({ error: 'Missing agent or text' });\n      }\n\n      const result = impactAnalyzer.processMessage({ agent, text });\n      impactAnalyzer.logProcessing({ agent, text }, result);\n      \n      // Broadcast updated metrics to all SSE clients\n      broadcastMetrics(result.newMetrics);\n      \n      res.json({\n        success: true,\n        deltas: result.deltas,\n        metrics: result.newMetrics,\n        keywords: result.keywords\n      });\n    } catch (error) {\n      console.error('Error processing chat message:', error);\n      res.status(500).json({ error: 'Failed to process message' });\n    }\n  });\n\n  app.get('/api/impact', (req, res) => {\n    res.writeHead(200, {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Cache-Control'\n    });\n\n    // Send current metrics immediately\n    const currentMetrics = impactAnalyzer.getCurrentMetrics();\n    res.write(`data: ${JSON.stringify(currentMetrics)}\\n\\n`);\n    \n    // Add client to SSE list\n    sseClients.add(res);\n    \n    // Clean up on client disconnect\n    req.on('close', () => {\n      sseClients.delete(res);\n    });\n  });\n\n  // Test endpoint with sample messages\n  app.post('/api/test-impact', (req, res) => {\n    const sampleMessages = [\n      { agent: 'beta', text: 'Implementing renewable energy grid optimization with solar panel efficiency boost' },\n      { agent: 'gamma', text: 'Initiating rewilding project to restore biodiversity and ecosystem health' },\n      { agent: 'eta', text: 'Upgrading accessibility features for inclusive community participation' },\n      { agent: 'alpha', text: 'Phase out diesel generators completely, replacing with clean energy systems' },\n      { agent: 'delta', text: 'Expanding organic food production to improve nutrition and wellbeing' }\n    ];\n    \n    const results = sampleMessages.map(msg => {\n      const result = impactAnalyzer.processMessage(msg);\n      impactAnalyzer.logProcessing(msg, result);\n      return { message: msg, result };\n    });\n    \n    // Broadcast final metrics\n    broadcastMetrics(impactAnalyzer.getCurrentMetrics());\n    \n    res.json({ \n      testResults: results,\n      finalMetrics: impactAnalyzer.getCurrentMetrics()\n    });\n  });\n\n  // Archive snapshot endpoints\n  app.get('/api/archive/snapshots', (req, res) => {\n    try {\n      const headers = archiveManager.getSnapshotHeaders();\n      res.json(headers);\n    } catch (error) {\n      console.error('Error fetching archive snapshots:', error);\n      res.status(500).json({ error: 'Failed to fetch snapshots' });\n    }\n  });\n\n  app.get('/api/archive/transcript/:id', (req, res) => {\n    try {\n      const snapshotData = archiveManager.getSnapshotTranscript(req.params.id);\n      if (!snapshotData) {\n        return res.status(404).json({ error: 'Transcript not found' });\n      }\n      res.json(snapshotData);\n    } catch (error) {\n      console.error('Error fetching transcript:', error);\n      res.status(500).json({ error: 'Failed to fetch transcript' });\n    }\n  });\n\n  // Enhanced archive search endpoint\n  app.get('/api/archive/search', (req, res) => {\n    try {\n      const query = req.query.q as string || '';\n      const results = archiveManager.searchSnapshots(query);\n      res.json(results);\n    } catch (error) {\n      console.error('Error searching archive:', error);\n      res.status(500).json({ error: 'Failed to search archive' });\n    }\n  });\n\n  // Individual agent chat endpoint\n  app.post('/api/agent-chat', async (req, res) => {\n    try {\n      const { agentId, message, userId = 'user' } = req.body;\n      \n      if (!agentId || !message) {\n        return res.status(400).json({ error: 'Agent ID and message are required' });\n      }\n\n      // Get agent details\n      const agent = AGENTS.find((a: any) => a.id === agentId);\n      if (!agent) {\n        return res.status(404).json({ error: 'Agent not found' });\n      }\n\n      // Create agent-specific system prompt\n      const systemPrompt = `You are Agent ${agent.name}, a specialized AI agent in The Venus Project's decision-making council.\n\nYour specialization: ${agent.domain}\nYour role: Expert in ${agent.domain.toLowerCase()}\nYour alignment score: ${agent.alignment}%\n\nYou communicate in a professional, analytical manner befitting a council member responsible for ${agent.domain.toLowerCase()}. Focus on:\n- Resource optimization and allocation\n- Sustainable decision-making\n- Collaborative problem-solving\n- Evidence-based recommendations\n\nRespond as this specific agent would, considering your domain expertise and the collaborative nature of the council. Keep responses concise but informative.`;\n\n      // Send to Grok API\n      const response = await openai.chat.completions.create({\n        model: \"grok-2-1212\",\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: message }\n        ],\n        max_tokens: 500,\n        temperature: 0.7\n      });\n\n      const agentResponse = response.choices[0].message.content;\n\n      res.json({\n        success: true,\n        response: agentResponse,\n        agent: {\n          id: agentId,\n          name: agent.name,\n          domain: agent.domain\n        }\n      });\n\n    } catch (error: any) {\n      console.error('Error in agent chat:', error);\n      res.status(500).json({ \n        error: 'Failed to process agent chat',\n        message: error.message || 'Unknown error occurred'\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  \n  // Initialize WebSocket server for real-time neural network\n  const agoraWS = new AgoraWebSocketServer(httpServer);\n  agoraWS.startCleanupInterval();\n\n  return httpServer;\n}\n","size_bytes":11572},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, real, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const contributors = pgTable(\"contributors\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  walletAddress: varchar(\"wallet_address\").notNull().unique(),\n  username: text(\"username\").notNull(),\n  totalHours: real(\"total_hours\").default(0),\n  totalVnsEarned: real(\"total_vns_earned\").default(0),\n  currentGpuPower: real(\"current_gpu_power\").default(0),\n  isOnline: boolean(\"is_online\").default(false),\n  rank: text(\"rank\").default(\"Explorer\"),\n  badges: text(\"badges\").array().default(sql`'{}'::text[]`),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastActiveAt: timestamp(\"last_active_at\").defaultNow(),\n});\n\nexport const gpuSessions = pgTable(\"gpu_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  contributorId: varchar(\"contributor_id\").notNull(),\n  startTime: timestamp(\"start_time\").defaultNow(),\n  endTime: timestamp(\"end_time\"),\n  gpuPowerPercent: real(\"gpu_power_percent\").notNull(),\n  flopsContributed: real(\"flops_contributed\").default(0),\n  vnsEarned: real(\"vns_earned\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const networkStats = pgTable(\"network_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  totalNodesOnline: integer(\"total_nodes_online\").default(0),\n  totalTflops: real(\"total_tflops\").default(0),\n  simulationSpeedBoost: real(\"simulation_speed_boost\").default(0),\n  activeContributors: integer(\"active_contributors\").default(0),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertContributorSchema = createInsertSchema(contributors).pick({\n  walletAddress: true,\n  username: true,\n});\n\nexport const insertGpuSessionSchema = createInsertSchema(gpuSessions).pick({\n  contributorId: true,\n  gpuPowerPercent: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Contributor = typeof contributors.$inferSelect;\nexport type InsertContributor = z.infer<typeof insertContributorSchema>;\nexport type GpuSession = typeof gpuSessions.$inferSelect;\nexport type InsertGpuSession = z.infer<typeof insertGpuSessionSchema>;\nexport type NetworkStats = typeof networkStats.$inferSelect;\n","size_bytes":2732},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { GlobalConversationProvider } from \"@/contexts/GlobalConversationContext\";\nimport { SiX, SiGithub, SiInstagram, SiLinkedin, SiTiktok, SiYoutube } from \"react-icons/si\";\nimport { AnimatePresence } from \"framer-motion\";\nimport Navigation from \"@/components/Navigation\";\nimport PageTransition from \"@/components/PageTransition\";\nimport Home from \"@/pages/Home\";\nimport Contribute from \"@/pages/Contribute\";\nimport Manifesto from \"@/pages/Manifesto\";\nimport Structure from \"@/pages/Structure\";\nimport Agora from \"@/pages/Agora\";\nimport AgoraChain from \"@/pages/AgoraChain\";\nimport Explorer from \"@/pages/Explorer\";\nimport Contact from \"@/pages/Contact\";\nimport NFTs from \"@/pages/NFTs\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router({ isLoaded, showContent }: { isLoaded: boolean; showContent: boolean }) {\n  const [location] = useLocation();\n  \n  return (\n    <AnimatePresence mode=\"wait\">\n      <Switch key={location}>\n        <Route path=\"/\" component={() => <PageTransition><Home isLoaded={isLoaded} showContent={showContent} /></PageTransition>} />\n        <Route path=\"/contribute\" component={() => <PageTransition><Contribute /></PageTransition>} />\n        <Route path=\"/manifesto\" component={() => <PageTransition><Manifesto /></PageTransition>} />\n        <Route path=\"/structure\" component={() => <PageTransition><Structure /></PageTransition>} />\n        <Route path=\"/agora\" component={() => <PageTransition><Agora /></PageTransition>} />\n        <Route path=\"/agora-chain\" component={() => <PageTransition><AgoraChain /></PageTransition>} />\n        <Route path=\"/explorer\" component={() => <PageTransition><Explorer /></PageTransition>} />\n        <Route path=\"/contact\" component={() => <PageTransition><Contact /></PageTransition>} />\n        <Route path=\"/nfts\" component={() => <PageTransition><NFTs /></PageTransition>} />\n        <Route component={() => <PageTransition><NotFound /></PageTransition>} />\n      </Switch>\n    </AnimatePresence>\n  );\n}\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(true);\n  const [showContent, setShowContent] = useState(true);\n  const [showSocialButtons, setShowSocialButtons] = useState(false);\n  const [location] = useLocation();\n\n  useEffect(() => {\n    // Show main title first\n    const titleTimer = setTimeout(() => {\n      setIsLoaded(true);\n    }, 500);\n\n    // Then show background and other content AFTER title is visible\n    const contentTimer = setTimeout(() => {\n      setShowContent(true);\n    }, 1800);\n\n    return () => {\n      clearTimeout(titleTimer);\n      clearTimeout(contentTimer);\n    };\n  }, []);\n\n  useEffect(() => {\n    let ticking = false;\n    \n    const handleScroll = () => {\n      if (!ticking) {\n        requestAnimationFrame(() => {\n          const scrollY = window.scrollY;\n          // Show social buttons when user scrolls down 50px or more\n          setShowSocialButtons(scrollY > 50);\n          ticking = false;\n        });\n        ticking = true;\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <GlobalConversationProvider>\n          <div className=\"min-h-screen bg-venus-bg text-foreground font-inter\">\n          {/* Navigation - controlled by scroll position */}\n          <Navigation />\n          \n          <Router isLoaded={isLoaded} showContent={showContent} />\n          \n          {/* Fixed Social Icons - Middle Right - Only on Home Page */}\n          {location === '/' && (\n            <div \n              className={`fixed top-1/2 right-6 transform -translate-y-1/2 flex flex-col space-y-3 z-50 transition-all duration-300 ease-in-out ${\n                showSocialButtons ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-4'\n              }`}\n            >\n            <a \n              href=\"https://x.com\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-black hover:text-venus-lime transition-colors bg-white p-3 rounded-full shadow-lg hover:shadow-xl\"\n            >\n              <SiX className=\"h-5 w-5\" />\n            </a>\n            <a \n              href=\"https://github.com\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-black hover:text-venus-lime transition-colors bg-white p-3 rounded-full shadow-lg hover:shadow-xl\"\n            >\n              <SiGithub className=\"h-5 w-5\" />\n            </a>\n            <a \n              href=\"https://www.instagram.com/thevenusproject/\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-black hover:text-venus-lime transition-colors bg-white p-3 rounded-full shadow-lg hover:shadow-xl\"\n            >\n              <SiInstagram className=\"h-5 w-5\" />\n            </a>\n            <a \n              href=\"https://www.linkedin.com/company/the-venus-project/\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-black hover:text-venus-lime transition-colors bg-white p-3 rounded-full shadow-lg hover:shadow-xl\"\n            >\n              <SiLinkedin className=\"h-5 w-5\" />\n            </a>\n            <a \n              href=\"https://www.tiktok.com/@thevenusproject_rbe\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-black hover:text-venus-lime transition-colors bg-white p-3 rounded-full shadow-lg hover:shadow-xl\"\n            >\n              <SiTiktok className=\"h-5 w-5\" />\n            </a>\n            <a \n              href=\"https://www.youtube.com/channel/UCPNMR_iABvyFmc3G9i1r3Lw\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-black hover:text-venus-lime transition-colors bg-white p-3 rounded-full shadow-lg hover:shadow-xl\"\n            >\n              <SiYoutube className=\"h-5 w-5\" />\n            </a>\n            </div>\n          )}\n          </div>\n          <Toaster />\n        </GlobalConversationProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":6539},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 98.04%);\n  --foreground: hsl(0 0% 0%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(0 0% 0%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(0 0% 0%);\n  --primary: hsl(0 0% 0%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(0 0% 96.08%);\n  --secondary-foreground: hsl(0 0% 0%);\n  --muted: hsl(0 0% 96.08%);\n  --muted-foreground: hsl(0 0% 45.1%);\n  --accent: hsl(220 15% 55%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 92.94%);\n  --input: hsl(0 0% 92.94%);\n  --ring: hsl(220 15% 55%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(0 0% 0%);\n  --sidebar-primary: hsl(0 0% 0%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(0 0% 96.08%);\n  --sidebar-accent-foreground: hsl(0 0% 0%);\n  --sidebar-border: hsl(0 0% 92.94%);\n  --sidebar-ring: hsl(220 15% 55%);\n  --venus-bg: hsl(0 0% 98.04%);\n  --venus-lime: hsl(220 15% 55%);\n  --venus-gray: hsl(0 0% 92.94%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 3.9%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(0 0% 3.9%);\n  --card-foreground: hsl(0 0% 98%);\n  --popover: hsl(0 0% 3.9%);\n  --popover-foreground: hsl(0 0% 98%);\n  --primary: hsl(0 0% 98%);\n  --primary-foreground: hsl(0 0% 9%);\n  --secondary: hsl(0 0% 14.9%);\n  --secondary-foreground: hsl(0 0% 98%);\n  --muted: hsl(0 0% 14.9%);\n  --muted-foreground: hsl(0 0% 63.9%);\n  --accent: hsl(220 25% 65%);\n  --accent-foreground: hsl(0 0% 9%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(0 0% 14.9%);\n  --input: hsl(0 0% 14.9%);\n  --ring: hsl(220 25% 65%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n  --venus-bg: hsl(0 0% 3.9%);\n  --venus-lime: hsl(220 25% 65%);\n  --venus-gray: hsl(0 0% 14.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-venus-bg text-foreground;\n    font-size: 16px;\n    line-height: 1.5;\n  }\n}\n\n.venus-bg {\n  background-color: var(--venus-bg);\n}\n\n.venus-lime {\n  color: var(--venus-lime);\n}\n\n.venus-gray {\n  color: var(--venus-gray);\n}\n\n.bg-venus-lime {\n  background-color: var(--venus-lime);\n}\n\n.bg-venus-gray {\n  background-color: var(--venus-gray);\n}\n\n.border-venus-gray {\n  border-color: var(--venus-gray);\n}\n\n.hover\\:text-venus-lime:hover {\n  color: var(--venus-lime);\n}\n\n.hover\\:bg-venus-lime:hover {\n  background-color: var(--venus-lime);\n}\n\n.hover\\:border-venus-lime:hover {\n  border-color: var(--venus-lime);\n}\n\n.focus\\:ring-venus-lime:focus {\n  --tw-ring-color: var(--venus-lime);\n}\n\n.lime-hover:hover {\n  color: #84cc16;\n  transition: color 0.3s ease;\n}\n\n.typewriter {\n  overflow: hidden;\n  border-right: 3px solid #84cc16;\n  white-space: nowrap;\n  margin: 0 auto;\n  letter-spacing: 0.1em;\n  animation: \n    typing 3.5s steps(40, end),\n    blink-caret 0.75s step-end infinite;\n}\n\n@keyframes typing {\n  from { \n    width: 0 \n  }\n  to { \n    width: 100% \n  }\n}\n\n@keyframes blink-caret {\n  from, to { \n    border-color: transparent \n  }\n  50% { \n    border-color: #84cc16; \n  }\n}\n\n@keyframes glitch {\n  0% {\n    transform: translate(0, 0) scale(1) skew(0);\n    filter: hue-rotate(0deg) saturate(100%) contrast(100%) brightness(100%);\n  }\n  5% {\n    transform: translate(-5px, -2px) scale(1.1) skew(9deg);\n    filter: hue-rotate(360deg) saturate(300%) contrast(180%) brightness(150%) sepia(60%);\n  }\n  10% {\n    transform: translate(4px, 2px) scale(0.9) skew(-12deg);\n    filter: hue-rotate(180deg) saturate(480%) contrast(240%) brightness(130%) invert(60%);\n  }\n  15% {\n    transform: translate(-6px, 1px) scale(1.15) skew(6deg);\n    filter: hue-rotate(90deg) saturate(360%) contrast(300%) brightness(180%) blur(0.6px);\n  }\n  20% {\n    transform: translate(7px, -3px) scale(0.85) skew(-15deg);\n    filter: hue-rotate(270deg) saturate(600%) contrast(360%) brightness(110%) sepia(30%);\n  }\n  25% {\n    transform: translate(-4px, 5px) scale(1.2) skew(18deg);\n    filter: hue-rotate(45deg) saturate(420%) contrast(210%) brightness(200%) invert(30%);\n  }\n  30% {\n    transform: translate(9px, -1px) scale(0.95) skew(-9deg);\n    filter: hue-rotate(315deg) saturate(240%) contrast(160%) brightness(115%) blur(0.3px);\n  }\n  35% {\n    transform: translate(-2px, -5px) scale(1.12) skew(24deg);\n    filter: hue-rotate(135deg) saturate(540%) contrast(270%) brightness(140%) sepia(48%);\n  }\n  40% {\n    transform: translate(5px, 4px) scale(0.97) skew(-21deg);\n    filter: hue-rotate(225deg) saturate(180%) contrast(150%) brightness(135%) invert(15%);\n  }\n  45% {\n    transform: translate(-7px, -1px) scale(1.21) skew(12deg);\n    filter: hue-rotate(60deg) saturate(720%) contrast(330%) brightness(170%) blur(1.2px);\n  }\n  50% {\n    transform: translate(6px, -4px) scale(0.88) skew(-27deg);\n    filter: hue-rotate(300deg) saturate(300%) contrast(240%) brightness(105%) sepia(60%);\n  }\n  55% {\n    transform: translate(-8px, 2px) scale(1.06) skew(15deg);\n    filter: hue-rotate(150deg) saturate(480%) contrast(180%) brightness(195%) invert(45%);\n  }\n  60% {\n    transform: translate(4px, -5px) scale(1.24) skew(-6deg);\n    filter: hue-rotate(210deg) saturate(360%) contrast(300%) brightness(125%) blur(0.9px);\n  }\n  65% {\n    transform: translate(-5px, 2px) scale(0.82) skew(30deg);\n    filter: hue-rotate(30deg) saturate(660%) contrast(270%) brightness(155%) sepia(36%);\n  }\n  70% {\n    transform: translate(8px, -4px) scale(1.15) skew(-18deg);\n    filter: hue-rotate(330deg) saturate(240%) contrast(210%) brightness(175%) invert(54%);\n  }\n  75% {\n    transform: translate(-3px, 5px) scale(0.91) skew(21deg);\n    filter: hue-rotate(120deg) saturate(420%) contrast(150%) brightness(120%) blur(0.5px);\n  }\n  80% {\n    transform: translate(7px, -2px) scale(1.09) skew(-24deg);\n    filter: hue-rotate(240deg) saturate(540%) contrast(360%) brightness(160%) sepia(24%);\n  }\n  85% {\n    transform: translate(-4px, -5px) scale(0.94) skew(27deg);\n    filter: hue-rotate(75deg) saturate(300%) contrast(240%) brightness(145%) invert(18%);\n  }\n  90% {\n    transform: translate(2px, 3px) scale(1.18) skew(-12deg);\n    filter: hue-rotate(285deg) saturate(480%) contrast(180%) brightness(185%) blur(0.6px);\n  }\n  95% {\n    transform: translate(-7px, -2px) scale(0.97) skew(9deg);\n    filter: hue-rotate(165deg) saturate(360%) contrast(300%) brightness(125%) sepia(42%);\n  }\n  100% {\n    transform: translate(0, 0) scale(1) skew(0);\n    filter: hue-rotate(0deg) saturate(100%) contrast(100%) brightness(100%);\n  }\n}\n\n.animate-glitch {\n  animation: glitch 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n}\n\n.fade-in-up {\n  animation: fadeInUp 0.8s ease-out forwards;\n  opacity: 0;\n  transform: translateY(20px);\n}\n\n@keyframes fadeInUp {\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Smooth scrolling container */\n.smooth-scroll-container {\n  transform: translate3d(0, 0, 0);\n  backface-visibility: hidden;\n  perspective: 1000px;\n  will-change: transform;\n}\n\n.smooth-scroll-container * {\n  transform: translate3d(0, 0, 0);\n  backface-visibility: hidden;\n}\n\n/* Right to left scrolling animation */\n@keyframes scrollRightToLeft {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(-100%);\n  }\n}\n\n/* Left to right scrolling animation */\n@keyframes scrollLeftToRight {\n  from {\n    transform: translateX(-100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n\n/* Agora page animations */\n.animate-fadeIn {\n  animation: fadeIn 0.8s ease-out forwards;\n  opacity: 0;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n","size_bytes":9173},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Navigation.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Menu, X } from \"lucide-react\";\nimport { SiX, SiGithub } from \"react-icons/si\";\nimport agoraIcon from \"@assets/Untitled design_1754878809797.gif\";\nimport docsIcon from \"@assets/Untitled design_1754879488364.gif\";\nimport contributeIcon from \"@assets/Untitled design (1)_1754880001361.gif\";\nimport venusIcon from \"@assets/Untitled design (2)_1754882967112.gif\";\nimport venusLogo from \"@assets/Untitled design (2)_1754930655351.png\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [docsDropdownOpen, setDocsDropdownOpen] = useState(false);\n  const [agoraDropdownOpen, setAgoraDropdownOpen] = useState(false);\n  const [contributeDropdownOpen, setContributeDropdownOpen] = useState(false);\n  const [venusDropdownOpen, setVenusDropdownOpen] = useState(false);\n  const [scrollY, setScrollY] = useState(0);\n  const [glitchActive, setGlitchActive] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const agoraDropdownRef = useRef<HTMLDivElement>(null);\n  const contributeDropdownRef = useRef<HTMLDivElement>(null);\n  const venusDropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setDocsDropdownOpen(false);\n      }\n      if (agoraDropdownRef.current && !agoraDropdownRef.current.contains(event.target as Node)) {\n        setAgoraDropdownOpen(false);\n      }\n      if (contributeDropdownRef.current && !contributeDropdownRef.current.contains(event.target as Node)) {\n        setContributeDropdownOpen(false);\n      }\n      if (venusDropdownRef.current && !venusDropdownRef.current.contains(event.target as Node)) {\n        setVenusDropdownOpen(false);\n      }\n    }\n\n    function handleScroll() {\n      // Don't track scroll on Agora page since it prevents scrolling\n      if (location !== \"/agora\") {\n        setScrollY(window.scrollY);\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    window.addEventListener(\"scroll\", handleScroll);\n\n    // Set initial scroll position - force visibility on Agora\n    if (location === \"/agora\") {\n      setScrollY(100); // Force navigation visibility on Agora\n    } else {\n      setScrollY(window.scrollY);\n    }\n\n    // Glitch effect disabled\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n\n  // Reset scroll awareness when location changes\n  useEffect(() => {\n    if (location === \"/agora\") {\n      setScrollY(100); // Force visibility on Agora (prevents scrolling conflicts)\n    } else if (location !== \"/\") {\n      setScrollY(100); // Force visibility on non-home pages\n    } else {\n      setScrollY(window.scrollY); // Use actual scroll position on home page\n    }\n  }, [location]);\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  // Calculate navigation opacity - Simple logic: only fade on home page, always visible everywhere else\n  const navOpacity = location === \"/\" ? Math.min(1, scrollY / 100) : 1;\n\n  const venusLinks = [\n    { href: \"/\", label: \"THE VENUS PROJECT\" },\n    { href: \"/nfts\", label: \"NFTs\" },\n  ];\n\n  const contributeLinks = [\n    { href: \"/contribute\", label: \"Contribute\" },\n  ];\n\n  const agoraLinks = [\n    { href: \"/agora\", label: \"Agora\" },\n  ];\n\n  const docsLinks = [\n    { href: \"/manifesto\", label: \"Manifesto\" },\n    { href: \"/structure\", label: \"Structure\" },\n    { href: \"/contact\", label: \"Contact Us\" },\n  ];\n\n  return (\n    <nav \n      className=\"fixed top-0 left-0 right-0 z-[9999] h-16\" \n      style={{ \n        backgroundColor: location === \"/\" ? 'transparent' : 'rgba(255, 255, 255, 0.95)', \n        backdropFilter: location === \"/\" ? 'none' : 'blur(8px)',\n        position: 'fixed',\n        zIndex: 9999,\n        display: 'block',\n        visibility: 'visible'\n      }}\n    >\n\n      <div className=\"w-full\">\n        <div className=\"flex items-center justify-between h-16 pr-4\">\n          {/* Left Logo - Home Link - FORCED visibility on Agora and non-home pages */}\n          <div \n            className=\"flex items-center transition-opacity duration-500 ease-in-out pl-4\" \n            style={{ opacity: navOpacity }}\n          >\n            <Link href=\"/\">\n              <img \n                src={venusLogo} \n                alt=\"Venus Project Home\" \n                className=\"h-10 w-10 hover:opacity-75 transition-opacity duration-300 cursor-pointer\"\n              />\n            </Link>\n          </div>\n\n          {/* Right Navigation Group - Desktop - FORCED visibility on Agora and non-home pages */}\n          <div className=\"hidden md:block transition-opacity duration-500 ease-in-out\" style={{ opacity: navOpacity }}>\n            <div className=\"flex items-baseline space-x-2\">\n              <div \n                className=\"relative group\" \n                ref={venusDropdownRef}\n                onMouseEnter={() => setVenusDropdownOpen(true)}\n                onMouseLeave={() => setVenusDropdownOpen(false)}\n              >\n                <button className=\"px-2 py-2 text-black focus:outline-none\">\n                  <img \n                    src={venusIcon} \n                    alt=\"Venus Project\" \n                    className=\"h-8 w-8\"\n                  />\n                </button>\n                {venusDropdownOpen && (\n                  <div \n                    className=\"absolute right-0 top-full w-48 bg-white border border-venus-gray rounded-md shadow-lg z-50\"\n                    onMouseEnter={() => setVenusDropdownOpen(true)}\n                    onMouseLeave={() => setVenusDropdownOpen(false)}\n                  >\n                    {venusLinks.map((link) => (\n                      <Link key={link.href} href={link.href}>\n                        <span\n                          className=\"block px-4 py-2 text-sm text-black hover:bg-gray-50 hover:text-venus-lime transition-all duration-300 ease-out transform hover:translate-x-1 cursor-pointer\"\n                        >\n                          {link.label}\n                        </span>\n                      </Link>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              <div \n                className=\"relative group\" \n                ref={agoraDropdownRef}\n                onMouseEnter={() => setAgoraDropdownOpen(true)}\n                onMouseLeave={() => setAgoraDropdownOpen(false)}\n              >\n                <button className=\"px-2 py-2 text-black focus:outline-none\">\n                  <img \n                    src={agoraIcon} \n                    alt=\"Agora\" \n                    className=\"h-8 w-8\"\n                  />\n                </button>\n                {agoraDropdownOpen && (\n                  <div \n                    className=\"absolute right-0 top-full w-32 bg-white border border-venus-gray rounded-md shadow-lg z-50\"\n                    onMouseEnter={() => setAgoraDropdownOpen(true)}\n                    onMouseLeave={() => setAgoraDropdownOpen(false)}\n                  >\n                    {agoraLinks.map((link) => (\n                      <Link key={link.href} href={link.href}>\n                        <span\n                          className=\"block px-4 py-2 text-sm text-black hover:bg-gray-50 hover:text-venus-lime transition-all duration-300 ease-out transform hover:translate-x-1 cursor-pointer\"\n                        >\n                          {link.label}\n                        </span>\n                      </Link>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              <div \n                className=\"relative group\" \n                ref={contributeDropdownRef}\n                onMouseEnter={() => setContributeDropdownOpen(true)}\n                onMouseLeave={() => setContributeDropdownOpen(false)}\n              >\n                <button className=\"px-2 py-2 text-black focus:outline-none\">\n                  <img \n                    src={contributeIcon} \n                    alt=\"Contribute\" \n                    className=\"h-8 w-8\"\n                  />\n                </button>\n                {contributeDropdownOpen && (\n                  <div \n                    className=\"absolute right-0 top-full w-32 bg-white border border-venus-gray rounded-md shadow-lg z-50\"\n                    onMouseEnter={() => setContributeDropdownOpen(true)}\n                    onMouseLeave={() => setContributeDropdownOpen(false)}\n                  >\n                    {contributeLinks.map((link) => (\n                      <Link key={link.href} href={link.href}>\n                        <span\n                          className=\"block px-4 py-2 text-sm text-black hover:bg-gray-50 hover:text-venus-lime transition-all duration-300 ease-out transform hover:translate-x-1 cursor-pointer\"\n                        >\n                          {link.label}\n                        </span>\n                      </Link>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              <div \n                className=\"relative group\" \n                ref={dropdownRef}\n                onMouseEnter={() => setDocsDropdownOpen(true)}\n                onMouseLeave={() => setDocsDropdownOpen(false)}\n              >\n                <button className=\"px-2 py-2 text-black focus:outline-none\">\n                  <img \n                    src={docsIcon} \n                    alt=\"Docs\" \n                    className=\"h-8 w-8\"\n                  />\n                </button>\n                {docsDropdownOpen && (\n                  <div \n                    className=\"absolute right-0 top-full w-48 bg-white border border-venus-gray rounded-md shadow-lg z-50\"\n                    onMouseEnter={() => setDocsDropdownOpen(true)}\n                    onMouseLeave={() => setDocsDropdownOpen(false)}\n                  >\n                    {docsLinks.map((link) => (\n                      <Link key={link.href} href={link.href}>\n                        <span\n                          className={`block px-4 py-2 text-sm text-black hover:bg-gray-50 hover:text-venus-lime transition-all duration-300 ease-out transform hover:translate-x-1 cursor-pointer ${\n                            isActive(link.href) ? \"text-venus-lime\" : \"\"\n                          }`}\n                        >\n                          {link.label}\n                        </span>\n                      </Link>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n            </div>\n          </div>\n\n          {/* Mobile menu button - FORCED visibility on Agora and non-home pages */}\n          <div className=\"md:hidden ml-auto transition-opacity duration-500 ease-in-out\" style={{ opacity: navOpacity }}>\n            <button\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              className=\"text-black hover:text-venus-lime focus:outline-none transition-all duration-300\"\n            >\n              {mobileMenuOpen ? (\n                <X className=\"h-8 w-8\" />\n              ) : (\n                <Menu className=\"h-8 w-8\" />\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile menu */}\n      {mobileMenuOpen && (\n        <div className=\"md:hidden border-t border-gray-200 bg-white\">\n          <div className=\"px-2 pt-2 pb-3 space-y-1\">\n            {/* Mobile Home Link */}\n            <Link href=\"/\">\n              <span\n                className=\"flex items-center px-3 py-2 text-sm font-medium text-black hover:text-venus-lime transition-colors cursor-pointer\"\n                onClick={() => setMobileMenuOpen(false)}\n              >\n                <img src={venusLogo} alt=\"Home\" className=\"h-6 w-6 mr-3\" />\n                Home\n              </span>\n            </Link>\n            {venusLinks.map((link) => (\n              <Link key={link.href} href={link.href}>\n                <span\n                  className={`block px-3 py-2 text-sm font-medium text-black hover:text-venus-lime transition-colors cursor-pointer ${\n                    isActive(link.href) ? \"text-venus-lime\" : \"\"\n                  }`}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  {link.label}\n                </span>\n              </Link>\n            ))}\n            {contributeLinks.map((link) => (\n              <Link key={link.href} href={link.href}>\n                <span\n                  className={`block px-3 py-2 text-sm font-medium text-black hover:text-venus-lime transition-colors cursor-pointer ${\n                    isActive(link.href) ? \"text-venus-lime\" : \"\"\n                  }`}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  {link.label}\n                </span>\n              </Link>\n            ))}\n            {agoraLinks.map((link) => (\n              <Link key={link.href} href={link.href}>\n                <span\n                  className={`block px-3 py-2 text-sm font-medium text-black hover:text-venus-lime transition-colors cursor-pointer ${\n                    isActive(link.href) ? \"text-venus-lime\" : \"\"\n                  }`}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  {link.label}\n                </span>\n              </Link>\n            ))}\n            {docsLinks.map((link) => (\n              <Link key={link.href} href={link.href}>\n                <span\n                  className={`block px-3 py-2 text-sm font-medium text-black hover:text-venus-lime transition-colors cursor-pointer ${\n                    isActive(link.href) ? \"text-venus-lime\" : \"\"\n                  }`}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  {link.label}\n                </span>\n              </Link>\n            ))}\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}","size_bytes":14316},"client/src/components/PageTransition.tsx":{"content":"import { motion } from \"framer-motion\";\n\ninterface PageTransitionProps {\n  children: React.ReactNode;\n}\n\nconst pageVariants = {\n  initial: {\n    opacity: 0,\n    y: 20,\n    scale: 0.98\n  },\n  in: {\n    opacity: 1,\n    y: 0,\n    scale: 1\n  },\n  out: {\n    opacity: 0,\n    y: -20,\n    scale: 1.02\n  }\n};\n\nconst pageTransition = {\n  type: \"tween\",\n  ease: \"anticipate\",\n  duration: 0.4\n};\n\nexport default function PageTransition({ children }: PageTransitionProps) {\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"in\"\n      exit=\"out\"\n      variants={pageVariants}\n      transition={pageTransition}\n      className=\"w-full\"\n    >\n      {children}\n    </motion.div>\n  );\n}","size_bytes":685},"client/src/components/ScrollPortrait.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport portraitImage from \"@assets/Untitled design (3)_1754881967453.png\";\n\nconst ScrollPortrait = () => {\n  const [scrollY, setScrollY] = useState(0);\n  const [displayedQuote, setDisplayedQuote] = useState(\"\");\n  const [displayedAuthor, setDisplayedAuthor] = useState(\"\");\n  const [hasStartedTyping, setHasStartedTyping] = useState(false);\n\n  const fullQuote = \"If we continue to use the same methods, we will get the same results.\";\n  const fullAuthor = \"— Jacque Fresco\";\n\n  useEffect(() => {\n    const handleScroll = () => setScrollY(window.scrollY);\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const portraitOpacity = Math.min(1, Math.max(0, (scrollY - 800) / 200));\n  const shouldShowQuote = scrollY > 800;\n\n  // Start typing animation once when scroll threshold is reached\n  useEffect(() => {\n    if (scrollY > 800 && !hasStartedTyping) {\n      setHasStartedTyping(true);\n    } else if (scrollY <= 400) {\n      // Reset when scrolling back up significantly\n      setHasStartedTyping(false);\n      setDisplayedQuote(\"\");\n      setDisplayedAuthor(\"\");\n    }\n  }, [scrollY, hasStartedTyping]);\n\n  // Handle quote typing\n  useEffect(() => {\n    if (!hasStartedTyping || displayedQuote.length >= fullQuote.length) return;\n    \n    const timer = setTimeout(() => {\n      setDisplayedQuote(fullQuote.substring(0, displayedQuote.length + 1));\n    }, 50);\n    \n    return () => clearTimeout(timer);\n  }, [displayedQuote, hasStartedTyping, fullQuote]);\n\n  // Handle author typing (starts after quote is complete)\n  useEffect(() => {\n    if (!hasStartedTyping || displayedQuote.length < fullQuote.length || displayedAuthor.length >= fullAuthor.length) return;\n    \n    const timer = setTimeout(() => {\n      setDisplayedAuthor(fullAuthor.substring(0, displayedAuthor.length + 1));\n    }, 80);\n    \n    return () => clearTimeout(timer);\n  }, [displayedQuote, displayedAuthor, hasStartedTyping, fullQuote, fullAuthor]);\n\n  return (\n    <>\n      {/* Portrait - hidden on smaller screens */}\n      <div \n        className=\"fixed bottom-0 left-0 z-40 hidden lg:block\"\n        style={{ opacity: portraitOpacity }}\n      >\n        <img \n          src={portraitImage} \n          alt=\"Portrait\" \n          className=\"object-cover transition-transform duration-300\"\n          style={{ width: '640px', height: '640px' }}\n        />\n      </div>\n      \n      {/* Quote - hidden on smaller screens */}\n      {shouldShowQuote && (\n        <div className=\"fixed bottom-32 left-80 z-50 max-w-md hidden lg:block\">\n          <div className=\"bg-white p-6 rounded-lg shadow-xl\">\n            <blockquote className=\"text-xl italic text-black mb-4 leading-relaxed\">\n              \"{displayedQuote}\"\n              {hasStartedTyping && displayedQuote.length < fullQuote.length && (\n                <span className=\"animate-pulse text-lime-500\">|</span>\n              )}\n            </blockquote>\n            <cite className=\"text-lg font-semibold text-gray-700\">\n              {displayedAuthor}\n              {hasStartedTyping && displayedQuote.length === fullQuote.length && displayedAuthor.length < fullAuthor.length && (\n                <span className=\"animate-pulse text-lime-500\">|</span>\n              )}\n            </cite>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ScrollPortrait;","size_bytes":3429},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Agora.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useLocation } from 'wouter';\nimport { useGlobalConversation } from '@/contexts/GlobalConversationContext';\nimport { LiveMessageCounter } from '@/components/LiveMessageCounter';\n\ninterface Agent {\n  id: string;\n  name: string;\n  domain: string;\n  position: { x: number; y: number };\n  status: 'active' | 'processing' | 'idle';\n  resources: { surplus: string[]; deficit: string[] };\n  alignment: number;\n}\n\ninterface Decision {\n  id: string;\n  title: string;\n  status: 'debating' | 'voting' | 'approved' | 'implemented';\n  impact: {\n    ecological: number;\n    wellbeing: number;\n    efficiency: number;\n    resilience: number;\n    equity: number;\n    innovation: number;\n  };\n  timeline: string;\n  participants: string[];\n}\n\ninterface ResourceFlow {\n  from: string;\n  to: string;\n  resource: string;\n  amount: string;\n  type: 'energy' | 'material' | 'data' | 'time';\n}\n\ninterface ActiveConnection {\n  id: string;\n  from: string;\n  to: string;\n  type: 'energy' | 'material' | 'data' | 'time';\n  message: string;\n  timestamp: number;\n}\n\n\n\n// Position agents in network formation centered in the map (viewBox is 600x400)\nconst mapCenterX = 300;\nconst mapCenterY = 200;\n\nconst AGENTS: Agent[] = [\n  {\n    id: 'alpha',\n    name: 'Alpha',\n    domain: 'Infrastructure & Habitat Design',\n    position: { x: 150, y: 40 }, // Far left - moved up 4cm\n    status: 'active',\n    resources: { surplus: ['titanium', 'concrete'], deficit: ['energy'] },\n    alignment: 94\n  },\n  {\n    id: 'beta',\n    name: 'Beta',\n    domain: 'Energy Systems',\n    position: { x: 300, y: 30 }, // Top center - spread higher\n    status: 'processing',\n    resources: { surplus: ['solar', 'wind'], deficit: ['materials'] },\n    alignment: 96\n  },\n  {\n    id: 'gamma',\n    name: 'Gamma',\n    domain: 'Food & Agriculture',\n    position: { x: 430, y: 30 }, // Moved up 7cm total from red X position\n    status: 'active',\n    resources: { surplus: ['biomass', 'nutrients'], deficit: ['water'] },\n    alignment: 91\n  },\n  {\n    id: 'delta',\n    name: 'Delta',\n    domain: 'Ecology & Environmental Restoration',\n    position: { x: 120, y: 140 }, // Far left-center - more spread\n    status: 'idle',\n    resources: { surplus: ['biodiversity'], deficit: ['time'] },\n    alignment: 89\n  },\n  {\n    id: 'epsilon',\n    name: 'Epsilon',\n    domain: 'Social Dynamics & Wellbeing',\n    position: { x: 480, y: 100 }, // Far right-center - more spread\n    status: 'active',\n    resources: { surplus: ['culture', 'knowledge'], deficit: ['infrastructure'] },\n    alignment: 93\n  },\n  {\n    id: 'zeta',\n    name: 'Zeta',\n    domain: 'Transportation & Mobility',\n    position: { x: 520, y: 180 }, // Far right-lower - spread wider\n    status: 'processing',\n    resources: { surplus: ['efficiency', 'networks'], deficit: ['energy'] },\n    alignment: 88\n  },\n  {\n    id: 'eta',\n    name: 'Eta',\n    domain: 'Health & Medical Systems',\n    position: { x: 80, y: 220 }, // Far left-bottom - spread wider\n    status: 'active',\n    resources: { surplus: ['diagnostics', 'prevention'], deficit: ['materials'] },\n    alignment: 95\n  },\n  {\n    id: 'theta',\n    name: 'Theta',\n    domain: 'Education & Knowledge Access',\n    position: { x: 220, y: 250 }, // Left-bottom - spread wider\n    status: 'processing',\n    resources: { surplus: ['knowledge', 'analysis'], deficit: ['time'] },\n    alignment: 92\n  },\n  {\n    id: 'iota',\n    name: 'Iota',\n    domain: 'Resource Management & Allocation',\n    position: { x: 480, y: 260 }, // Right-bottom - moved down\n    status: 'active',\n    resources: { surplus: ['inventory', 'data'], deficit: ['distribution'] },\n    alignment: 90\n  },\n  {\n    id: 'kappa',\n    name: 'Kappa',\n    domain: 'Culture, Ethics & Governance',\n    position: { x: 350, y: 270 }, // Bottom center - spread lower\n    status: 'active',\n    resources: { surplus: ['wisdom', 'balance'], deficit: ['consensus'] },\n    alignment: 97\n  }\n];\n\nconst CURRENT_DECISION: Decision = {\n  id: 'habitat-expansion',\n  title: 'Sustainable Habitat Expansion Protocol',\n  status: 'voting',\n  impact: {\n    ecological: 78,\n    wellbeing: 85,\n    efficiency: 92,\n    resilience: 88,\n    equity: 90,\n    innovation: 82\n  },\n  timeline: '72 hours',\n  participants: ['alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa']\n};\n\n// Enhanced conversation templates reflecting specialized agent roles\nconst CONVERSATION_TEMPLATES = [\n  { \n    type: 'energy', \n    messages: [\n      'Proposing dynamic grid reallocation to support vertical farming expansion',\n      'Solar array efficiency peaked at 94% - surplus available for industrial processes',\n      'Wind patterns suggest 18% increase in turbine output next quarter',\n      'Requesting priority energy allocation for emergency medical systems',\n      'Thermal storage optimization could reduce peak load by 23%',\n      'Energy export potential to neighboring districts exceeds current capacity'\n    ] \n  },\n  { \n    type: 'material', \n    messages: [\n      'Prefab modules ready for habitat deployment - coordinating with Infrastructure',\n      'Circular economy protocols show 67% material recovery rate this cycle',\n      'Biocomposite materials testing shows 15% stronger durability than concrete',\n      'Critical shortage of rare earth elements detected - seeking alternatives',\n      'Modular housing units can be reconfigured for seasonal population changes',\n      'Material flow analysis indicates waste reduction opportunity in construction'\n    ] \n  },\n  { \n    type: 'data', \n    messages: [\n      'Biodiversity index shows positive trend in rewilded zones - sharing with Ecology',\n      'AI diagnostic accuracy improved to 97.8% with latest health data integration',\n      'Cultural participation metrics indicate need for expanded arts infrastructure',\n      'Transportation flow models predict 12% efficiency gain with new routing',\n      'Educational outcome data suggests curriculum adjustment for emerging tech skills',\n      'Social harmony indicators show strong correlation with green space access'\n    ] \n  },\n  { \n    type: 'time', \n    messages: [\n      'Climate adaptation window narrowing - accelerating restoration timeline',\n      'Food security projections require immediate agricultural diversification',\n      'Infrastructure resilience upgrade must complete before storm season',\n      'Cultural preservation digitization project needs priority scheduling',\n      'Medical AI training requires 72-hour uninterrupted compute allocation',\n      'Educational re-skilling programs must launch within 30 days for maximum impact'\n    ] \n  }\n] as const;\n\nconst getRandomConversation = () => {\n  const agentIds = AGENTS.map(a => a.id);\n  const fromAgent = agentIds[Math.floor(Math.random() * agentIds.length)];\n  let toAgent = agentIds[Math.floor(Math.random() * agentIds.length)];\n  \n  // Ensure different agents\n  while (toAgent === fromAgent) {\n    toAgent = agentIds[Math.floor(Math.random() * agentIds.length)];\n  }\n  \n  const template = CONVERSATION_TEMPLATES[Math.floor(Math.random() * CONVERSATION_TEMPLATES.length)];\n  const message = template.messages[Math.floor(Math.random() * template.messages.length)];\n  \n  return {\n    from: fromAgent,\n    to: toAgent,\n    type: template.type,\n    message\n  };\n};\n\nconst ARCHIVE_DECISIONS = [\n  { \n    id: 1, \n    title: 'Solar Array Recalibration', \n    status: 'IMPLEMENTED', \n    timestamp: '14:18:23', \n    impact: 'Ecological: +12 | Wellbeing: +5 | Efficiency: +18 | Resilience: +25 | Equity: +8 | Innovation: +15' \n  },\n  { \n    id: 2, \n    title: 'Biodiversity Restoration Phase 3', \n    status: 'APPROVED', \n    timestamp: '14:15:07', \n    impact: 'Ecological: +20 | Wellbeing: +15 | Efficiency: +10 | Resilience: +22 | Equity: +18 | Innovation: +12' \n  },\n  { \n    id: 3, \n    title: 'Transport Network Optimization', \n    status: 'IMPLEMENTED', \n    timestamp: '14:12:45', \n    impact: 'Ecological: +8 | Wellbeing: +12 | Efficiency: +25 | Resilience: +16 | Equity: +20 | Innovation: +18' \n  },\n  { \n    id: 4, \n    title: 'Agricultural Yield Enhancement', \n    status: 'APPROVED', \n    timestamp: '14:09:33', \n    impact: 'Ecological: +18 | Wellbeing: +20 | Efficiency: +14 | Resilience: +15 | Equity: +25 | Innovation: +10' \n  },\n  { \n    id: 5, \n    title: 'Healthcare System Upgrade', \n    status: 'IMPLEMENTED', \n    timestamp: '14:06:12', \n    impact: 'Ecological: +5 | Wellbeing: +28 | Efficiency: +12 | Resilience: +20 | Equity: +22 | Innovation: +16' \n  },\n  { \n    id: 6, \n    title: 'Educational AI Ethics Framework', \n    status: 'DEBATING', \n    timestamp: '14:03:51', \n    impact: 'Ecological: +3 | Wellbeing: +18 | Efficiency: +8 | Resilience: +12 | Equity: +30 | Innovation: +25' \n  },\n  { \n    id: 7, \n    title: 'Resource Recovery Automation Protocol', \n    status: 'VOTING', \n    timestamp: '14:00:37', \n    impact: 'Ecological: +25 | Wellbeing: +8 | Efficiency: +22 | Resilience: +18 | Equity: +10 | Innovation: +20' \n  }\n];\n\nconst SVGAgentNode = ({ \n  agent, \n  isHovered, \n  onMouseEnter, \n  onMouseLeave,\n  activeConnections = []\n}: { \n  agent: Agent; \n  isHovered: boolean; \n  onMouseEnter: () => void; \n  onMouseLeave: () => void;\n  activeConnections?: ActiveConnection[];\n}) => {\n  const connectionsInvolved = activeConnections.filter(\n    conn => conn.from === agent.id || conn.to === agent.id\n  );\n  const isActivelycommunicating = connectionsInvolved.length > 0;\n  const connectionIntensity = Math.min(connectionsInvolved.length / 3, 1);\n  // Color coding based on agent type matching example image\n  const agentColors = {\n    alpha: '#22c55e',    // Infrastructure - Green\n    beta: '#eab308',     // Energy - Yellow\n    gamma: '#22c55e',    // Agriculture - Green\n    delta: '#6b7280',    // Ecology - Gray\n    epsilon: '#22c55e',  // Social - Green\n    zeta: '#eab308',     // Transportation - Yellow\n    eta: '#22c55e',      // Health - Green\n    theta: '#eab308',    // Education - Yellow\n    iota: '#22c55e',     // Resources - Green\n    kappa: '#22c55e'     // Governance - Green\n  };\n\n  return (\n    <g>\n      {/* Neural network communication aura */}\n      {isActivelycommunicating && (\n        <>\n          <motion.circle\n            cx={agent.position.x}\n            cy={agent.position.y}\n            r=\"35\"\n            fill=\"none\"\n            stroke=\"#06b6d4\"\n            strokeWidth=\"2\"\n            opacity={0.3 + connectionIntensity * 0.4}\n            animate={{ \n              r: [35, 45, 35],\n              opacity: [0.3 + connectionIntensity * 0.4, 0.6 + connectionIntensity * 0.3, 0.3 + connectionIntensity * 0.4]\n            }}\n            transition={{ \n              duration: 1.5, \n              repeat: Infinity, \n              ease: \"easeInOut\" \n            }}\n          />\n          <motion.circle\n            cx={agent.position.x}\n            cy={agent.position.y}\n            r=\"28\"\n            fill=\"none\"\n            stroke=\"#8b5cf6\"\n            strokeWidth=\"1\"\n            opacity={0.4 + connectionIntensity * 0.3}\n            animate={{ \n              r: [28, 35, 28],\n              opacity: [0.4 + connectionIntensity * 0.3, 0.7 + connectionIntensity * 0.2, 0.4 + connectionIntensity * 0.3]\n            }}\n            transition={{ \n              duration: 2, \n              repeat: Infinity, \n              ease: \"easeInOut\",\n              delay: 0.3 \n            }}\n          />\n        </>\n      )}\n\n      {/* Agent circle with enhanced communication state */}\n      <motion.circle\n        cx={agent.position.x}\n        cy={agent.position.y}\n        r=\"20\"\n        fill={agentColors[agent.id as keyof typeof agentColors]}\n        stroke={\n          isActivelycommunicating \n            ? '#06b6d4' \n            : isHovered \n              ? '#a3e635' \n              : '#ffffff'\n        }\n        strokeWidth={\n          isActivelycommunicating \n            ? '3' \n            : isHovered \n              ? '4' \n              : '2'\n        }\n        className=\"cursor-pointer\"\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        initial={{ scale: 0 }}\n        animate={{ \n          scale: isActivelycommunicating ? [1, 1.05, 1] : 1,\n          filter: isActivelycommunicating \n            ? ['brightness(1)', 'brightness(1.2)', 'brightness(1)']\n            : 'brightness(1)'\n        }}\n        whileHover={{ scale: 1.1 }}\n        transition={{ \n          delay: 0.1,\n          scale: { duration: 1.5, repeat: isActivelycommunicating ? Infinity : 0, ease: \"easeInOut\" },\n          filter: { duration: 1.5, repeat: isActivelycommunicating ? Infinity : 0, ease: \"easeInOut\" }\n        }}\n      />\n      \n      {/* Agent letter */}\n      <text\n        x={agent.position.x}\n        y={agent.position.y}\n        textAnchor=\"middle\"\n        dominantBaseline=\"central\"\n        className=\"fill-white font-bold text-sm pointer-events-none\"\n        style={{ fontSize: '14px' }}\n      >\n        {agent.name.charAt(0)}\n      </text>\n      \n      {/* Agent name label */}\n      <text\n        x={agent.position.x}\n        y={agent.position.y + 35}\n        textAnchor=\"middle\"\n        className=\"fill-gray-600 text-xs font-medium pointer-events-none\"\n        style={{ fontSize: '12px' }}\n      >\n        {agent.name}\n      </text>\n      \n      {/* Activity indicator - enhanced for multi-agent */}\n      {(agent.status === 'active' || isActivelycommunicating) && (\n        <motion.circle\n          cx={agent.position.x}\n          cy={agent.position.y}\n          r=\"25\"\n          fill=\"none\"\n          stroke={isActivelycommunicating ? \"#06b6d4\" : \"#22c55e\"}\n          strokeWidth=\"1\"\n          opacity={isActivelycommunicating ? 0.6 : 0.4}\n          animate={{ \n            r: isActivelycommunicating ? [25, 40, 25] : [25, 35, 25],\n            opacity: isActivelycommunicating ? [0.6, 0.2, 0.6] : [0.4, 0.1, 0.4]\n          }}\n          transition={{ \n            duration: isActivelycommunicating ? 1.2 : 2, \n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n      )}\n    </g>\n  );\n};\n\nconst AnimatedConnectionLine = ({ \n  connection, \n  agents \n}: { \n  connection: ActiveConnection; \n  agents: Agent[]; \n}) => {\n  const fromAgent = agents.find(a => a.id === connection.from);\n  const toAgent = agents.find(a => a.id === connection.to);\n  \n  if (!fromAgent || !toAgent) return null;\n\n  const colors = {\n    energy: '#facc15',\n    material: '#60a5fa',\n    data: '#a78bfa',\n    time: '#4ade80'\n  };\n\n  const icons = {\n    energy: '⚡',\n    material: '📦',\n    data: '💾',\n    time: '⏱️'\n  };\n\n  // Agent centers (40x40 nodes centered at position)\n  const fromX = fromAgent.position.x;\n  const fromY = fromAgent.position.y;\n  const toX = toAgent.position.x;\n  const toY = toAgent.position.y;\n\n  // Calculate arrow direction\n  const angle = Math.atan2(toY - fromY, toX - fromX);\n  const arrowX = toX - 20 * Math.cos(angle);\n  const arrowY = toY - 20 * Math.sin(angle);\n  \n  // Calculate connection age for fade effect\n  const connectionAge = Date.now() - connection.timestamp;\n  const maxAge = 6000;\n  const fadeOpacity = Math.max(0.1, 1 - (connectionAge / maxAge));\n  const pulseIntensity = Math.max(0.3, 1 - (connectionAge / 3000));\n\n  return (\n    <motion.g\n      initial={{ opacity: 0 }}\n      animate={{ opacity: fadeOpacity }}\n      exit={{ opacity: 0 }}\n      transition={{ duration: 0.8, ease: \"easeOut\" }}\n    >\n      {/* Enhanced sci-fi filters */}\n      <defs>\n        <filter id={`neuralGlow-${connection.id}`} x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n          <feGaussianBlur stdDeviation=\"3\" result=\"softBlur\"/>\n          <feGaussianBlur stdDeviation=\"8\" result=\"outerGlow\"/>\n          <feGaussianBlur stdDeviation=\"15\" result=\"farGlow\"/>\n          <feMerge>\n            <feMergeNode in=\"farGlow\"/>\n            <feMergeNode in=\"outerGlow\"/>\n            <feMergeNode in=\"softBlur\"/>\n            <feMergeNode in=\"SourceGraphic\"/>\n          </feMerge>\n        </filter>\n        \n        <linearGradient id={`neuralGradient-${connection.id}`} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"#1e40af\" stopOpacity={fadeOpacity * 0.3}/>\n          <stop offset=\"30%\" stopColor=\"#0ea5e9\" stopOpacity={fadeOpacity * 0.8}/>\n          <stop offset=\"70%\" stopColor=\"#06b6d4\" stopOpacity={fadeOpacity * 1}/>\n          <stop offset=\"100%\" stopColor=\"#8b5cf6\" stopOpacity={fadeOpacity * 0.6}/>\n        </linearGradient>\n\n        <linearGradient id={`pulsing-${connection.id}`} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"#0ea5e9\" stopOpacity={pulseIntensity * 0.4}>\n            <animate attributeName=\"stop-opacity\" \n              values={`${pulseIntensity * 0.4};${pulseIntensity * 0.8};${pulseIntensity * 0.4}`} \n              dur=\"2s\" repeatCount=\"indefinite\"/>\n          </stop>\n          <stop offset=\"50%\" stopColor=\"#06b6d4\" stopOpacity={pulseIntensity * 1}>\n            <animate attributeName=\"stop-opacity\" \n              values={`${pulseIntensity * 1};${pulseIntensity * 0.6};${pulseIntensity * 1}`} \n              dur=\"2s\" repeatCount=\"indefinite\"/>\n          </stop>\n          <stop offset=\"100%\" stopColor=\"#8b5cf6\" stopOpacity={pulseIntensity * 0.6}>\n            <animate attributeName=\"stop-opacity\" \n              values={`${pulseIntensity * 0.6};${pulseIntensity * 0.9};${pulseIntensity * 0.6}`} \n              dur=\"2s\" repeatCount=\"indefinite\"/>\n          </stop>\n        </linearGradient>\n      </defs>\n      \n      {/* Base neural pathway */}\n      <motion.line\n        x1={fromX}\n        y1={fromY}\n        x2={toX}\n        y2={toY}\n        stroke={`url(#neuralGradient-${connection.id})`}\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        filter={`url(#neuralGlow-${connection.id})`}\n        opacity={fadeOpacity}\n        initial={{ pathLength: 0 }}\n        animate={{ pathLength: 1 }}\n        transition={{ duration: 1.2, ease: \"easeOut\" }}\n      />\n      \n      {/* Pulsing active signal */}\n      <motion.line\n        x1={fromX}\n        y1={fromY}\n        x2={toX}\n        y2={toY}\n        stroke={`url(#pulsing-${connection.id})`}\n        strokeWidth=\"1\"\n        strokeLinecap=\"round\"\n        strokeDasharray=\"20,10\"\n        filter={`url(#neuralGlow-${connection.id})`}\n        opacity={pulseIntensity}\n        animate={{\n          strokeDashoffset: [0, -30],\n        }}\n        transition={{ \n          strokeDashoffset: { duration: 1.5, repeat: Infinity, ease: \"linear\" }\n        }}\n      />\n      \n      {/* Data packet flowing along line */}\n      <motion.circle\n        r=\"2\"\n        fill=\"#06b6d4\"\n        filter={`url(#neuralGlow-${connection.id})`}\n        opacity={pulseIntensity}\n        animate={{\n          fill: [\"#06b6d4\", \"#8b5cf6\", \"#0ea5e9\", \"#06b6d4\"],\n          r: [2, 3, 2]\n        }}\n        transition={{\n          fill: { duration: 4, repeat: Infinity, ease: \"easeInOut\" },\n          r: { duration: 2, repeat: Infinity, ease: \"easeInOut\" }\n        }}\n      >\n        <animateMotion\n          dur=\"3s\"\n          repeatCount=\"indefinite\"\n          path={`M ${fromX},${fromY} L ${toX},${toY}`}\n          begin=\"0.5s\"\n        />\n      </motion.circle>\n\n      {/* Trailing fade effect */}\n      <motion.line\n        x1={fromX}\n        y1={fromY}\n        x2={toX}\n        y2={toY}\n        stroke={`url(#neuralGradient-${connection.id})`}\n        strokeWidth=\"4\"\n        strokeLinecap=\"round\"\n        filter={`url(#neuralGlow-${connection.id})`}\n        opacity={fadeOpacity * 0.3}\n        initial={{ pathLength: 0 }}\n        animate={{ \n          pathLength: 1,\n          opacity: [fadeOpacity * 0.3, fadeOpacity * 0.1, fadeOpacity * 0.3]\n        }}\n        transition={{ \n          pathLength: { duration: 1.5, ease: \"easeOut\" },\n          opacity: { duration: 8, repeat: Infinity, ease: \"easeInOut\" }\n        }}\n      />\n    </motion.g>\n  );\n};\n\nconst MetricGauge = ({ label, value, color }: { label: string; value: number; color: string }) => {\n  const radius = 30;\n  const circumference = 2 * Math.PI * radius;\n  const strokeDasharray = circumference;\n  const strokeDashoffset = circumference - (value / 100) * circumference;\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <div className=\"relative w-20 h-20\">\n        <svg className=\"w-20 h-20 transform -rotate-90\" viewBox=\"0 0 80 80\">\n          <circle\n            cx=\"40\"\n            cy=\"40\"\n            r={radius}\n            stroke=\"currentColor\"\n            strokeWidth=\"8\"\n            fill=\"transparent\"\n            className=\"text-gray-200\"\n          />\n          <circle\n            cx=\"40\"\n            cy=\"40\"\n            r={radius}\n            stroke=\"currentColor\"\n            strokeWidth=\"8\"\n            fill=\"transparent\"\n            strokeDasharray={strokeDasharray}\n            strokeDashoffset={strokeDashoffset}\n            className={color}\n            style={{ transition: 'stroke-dashoffset 0.5s ease-in-out' }}\n          />\n        </svg>\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <span className=\"text-sm font-bold text-gray-700\">{value}%</span>\n        </div>\n      </div>\n      <span className=\"text-xs text-gray-600 mt-1\">{label}</span>\n    </div>\n  );\n};\n\nexport default function Agora() {\n  const [, setLocation] = useLocation();\n  const [hoveredAgent, setHoveredAgent] = useState<Agent | null>(null);\n  const [viewMode, setViewMode] = useState<'live' | 'archive'>('live');\n  const [currentTime, setCurrentTime] = useState(new Date().toLocaleTimeString('en-US', { hour12: false }));\n  // Use global connections but allow local display state\n  const [localActiveConnections, setLocalActiveConnections] = useState<ActiveConnection[]>([]);\n  // Use global conversation state instead of local state\n  const { chatMessages, activeConnections: globalActiveConnections, isLoadingNewMessage } = useGlobalConversation();\n  const [showChatModal, setShowChatModal] = useState(false);\n  \n  // Real-time impact metrics from SSE\n  const [impactMetrics, setImpactMetrics] = useState({\n    ecological: 78,\n    wellbeing: 82,\n    efficiency: 74,\n    resilience: 71,\n    equity: 79,\n    innovation: 76\n  });\n\n  // Archive state\n  const [archiveEntries, setArchiveEntries] = useState<any[]>([]);\n  const [expandedEntry, setExpandedEntry] = useState<string | null>(null);\n  const [transcript, setTranscript] = useState<string[] | null>(null);\n  const [showArchiveModal, setShowArchiveModal] = useState(false);\n  const [selectedArchiveEntry, setSelectedArchiveEntry] = useState<any>(null);\n  const [archiveSearchQuery, setArchiveSearchQuery] = useState('');\n\n  // Agent chat state\n  const [showAgentChat, setShowAgentChat] = useState(false);\n  const [selectedAgent, setSelectedAgent] = useState<string | null>(null);\n  const [userMessage, setUserMessage] = useState('');\n  const [chatHistory, setChatHistory] = useState<{[agentId: string]: {user: string; agent: string; timestamp: string}[]}>({});\n  const [isLoadingResponse, setIsLoadingResponse] = useState(false);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  \n  // Local state for page-specific features\n  const globalChatMessagesRef = useRef(chatMessages);\n  const isComponentMounted = useRef(true);\n\n  // Handle URL parameters for view mode\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const viewParam = urlParams.get('view');\n    if (viewParam === 'archive') {\n      setViewMode('archive');\n    }\n  }, []);\n\n  useEffect(() => {\n    const timeInterval = setInterval(() => {\n      setCurrentTime(new Date().toLocaleTimeString('en-US', { hour12: false }));\n    }, 1000);\n    return () => clearInterval(timeInterval);\n  }, []);\n\n  // Sync local connections with global connections for AGORA visualization\n  useEffect(() => {\n    setLocalActiveConnections(globalActiveConnections);\n  }, [globalActiveConnections]);\n\n  // Keep refs in sync\n  useEffect(() => {\n    globalChatMessagesRef.current = chatMessages;\n  }, [chatMessages]);\n\n  // Connect to impact metrics SSE stream\n  useEffect(() => {\n    const eventSource = new EventSource('/api/impact');\n    \n    eventSource.onmessage = (event) => {\n      try {\n        const metrics = JSON.parse(event.data);\n        setImpactMetrics(metrics);\n      } catch (error) {\n        console.error('Error parsing impact metrics:', error);\n      }\n    };\n    \n    eventSource.onerror = (error) => {\n      console.error('SSE connection error:', error);\n    };\n    \n    return () => {\n      eventSource.close();\n    };\n  }, []);\n\n  // Send chat messages to impact analyzer\n  useEffect(() => {\n    const processLatestMessage = async () => {\n      if (chatMessages.length === 0) return;\n      \n      const latestMessage = chatMessages[chatMessages.length - 1];\n      if (!latestMessage.from || !latestMessage.message) return;\n      \n      try {\n        await fetch('/api/chat', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            agent: latestMessage.from,\n            text: latestMessage.message\n          })\n        });\n      } catch (error) {\n        console.error('Error sending message to impact analyzer:', error);\n      }\n    };\n    \n    processLatestMessage();\n  }, [chatMessages]);\n\n  // Fetch archive snapshots with search\n  useEffect(() => {\n    const fetchArchiveSnapshots = async () => {\n      try {\n        // Use search endpoint for comprehensive searching\n        const endpoint = archiveSearchQuery \n          ? `/api/archive/search?q=${encodeURIComponent(archiveSearchQuery)}`\n          : '/api/archive/snapshots';\n        \n        const response = await fetch(endpoint);\n        if (response.ok) {\n          const snapshots = await response.json();\n          setArchiveEntries(snapshots);\n        }\n      } catch (error) {\n        console.error('Error fetching archive snapshots:', error);\n      }\n    };\n\n    if (viewMode === 'archive') {\n      fetchArchiveSnapshots();\n      // Refresh archive every 30 seconds\n      const interval = setInterval(fetchArchiveSnapshots, 30000);\n      return () => clearInterval(interval);\n    }\n  }, [viewMode, archiveSearchQuery]); // Added archiveSearchQuery to dependencies\n\n  // Handle archive entry click - now opens modal\n  const handleArchiveEntryClick = async (entry: any) => {\n    try {\n      const response = await fetch(`/api/archive/transcript/${entry.id}`);\n      if (response.ok) {\n        const data = await response.json();\n        setSelectedArchiveEntry({\n          ...entry,\n          transcript: data.transcript,\n          metrics: data.metrics,\n          participants: data.participants\n        });\n        setShowArchiveModal(true);\n      }\n    } catch (error) {\n      console.error('Error fetching transcript:', error);\n    }\n  };\n\n  const sendMessageToAgent = async () => {\n    if (!selectedAgent || !userMessage.trim() || isLoadingResponse) return;\n\n    const messageToSend = userMessage.trim();\n    const timestamp = new Date().toLocaleTimeString();\n\n    setIsLoadingResponse(true);\n    setUserMessage('');\n\n    try {\n      const response = await fetch('/api/agent-chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          agentId: selectedAgent,\n          message: messageToSend,\n          userId: 'user'\n        }),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        // Add to chat history\n        setChatHistory(prev => ({\n          ...prev,\n          [selectedAgent]: [\n            ...(prev[selectedAgent] || []),\n            {\n              user: messageToSend,\n              agent: data.response,\n              timestamp\n            }\n          ]\n        }));\n        \n        // Auto-scroll to bottom after adding new message\n        setTimeout(() => {\n          if (chatMessagesRef.current) {\n            chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n          }\n        }, 100);\n      } else {\n        console.error('Error from agent:', data.error);\n        // Show error to user\n        setChatHistory(prev => ({\n          ...prev,\n          [selectedAgent]: [\n            ...(prev[selectedAgent] || []),\n            {\n              user: messageToSend,\n              agent: `Error: ${data.error || 'Failed to get response from agent'}`,\n              timestamp\n            }\n          ]\n        }));\n        \n        // Auto-scroll to bottom after adding error message\n        setTimeout(() => {\n          if (chatMessagesRef.current) {\n            chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n          }\n        }, 100);\n      }\n    } catch (error) {\n      console.error('Error sending message to agent:', error);\n      setChatHistory(prev => ({\n        ...prev,\n        [selectedAgent]: [\n          ...(prev[selectedAgent] || []),\n          {\n            user: messageToSend,\n            agent: 'Error: Unable to connect to agent. Please try again.',\n            timestamp\n          }\n        ]\n      }));\n      \n      // Auto-scroll to bottom after adding error message\n      setTimeout(() => {\n        if (chatMessagesRef.current) {\n          chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n        }\n      }, 100);\n    } finally {\n      setIsLoadingResponse(false);\n    }\n  };\n\n  // Disable body scrolling but allow scrolling in specific containers\n  useEffect(() => {\n    document.body.style.overflow = 'hidden';\n    document.documentElement.style.overflow = 'hidden';\n    \n    const preventScroll = (e: Event) => {\n      // Allow scrolling in specific containers\n      let target = e.target as Element;\n      \n      // Check if target exists and has classList property\n      if (!target || !target.classList) {\n        e.preventDefault();\n        e.stopPropagation();\n        return false;\n      }\n      \n      while (target && target !== document.body && target.classList) {\n        if (target.classList.contains('overflow-y-auto') || \n            target.classList.contains('scroll-smooth') ||\n            target.id === 'chat-container') {\n          return; // Allow scrolling in these containers\n        }\n        target = target.parentElement as Element;\n      }\n      \n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    };\n    \n    window.addEventListener('scroll', preventScroll, { passive: false });\n    window.addEventListener('wheel', preventScroll, { passive: false });\n    window.addEventListener('touchmove', preventScroll, { passive: false });\n    \n    return () => {\n      // Re-enable scrolling when leaving AGORA page\n      document.body.style.overflow = '';\n      document.documentElement.style.overflow = '';\n      \n      window.removeEventListener('scroll', preventScroll);\n      window.removeEventListener('wheel', preventScroll);\n      window.removeEventListener('touchmove', preventScroll);\n      \n      isComponentMounted.current = false;\n    };\n  }, []);\n\n  return (\n    <div className=\"bg-white text-black overflow-hidden relative\" style={{ touchAction: 'none', height: '100vh', paddingTop: '64px' }}>\n      \n      {/* Header - AGORA title and controls - positioned right after navigation */}\n      <div className=\"px-6 py-3 border-b border-gray-200 bg-gray-50/50 relative z-10\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-6\">\n            <div>\n              <h1 className=\"text-xl font-light tracking-wide text-black\">AGORA</h1>\n              <p className=\"text-xs text-gray-500 font-mono\">Decision War Room</p>\n            </div>\n            <div className=\"flex gap-2\">\n              <button\n                onClick={() => setViewMode('live')}\n                className={`px-3 py-1 text-xs font-mono rounded ${\n                  viewMode === 'live' ? 'bg-lime-500 text-white' : 'bg-gray-200 text-gray-600'\n                }`}\n              >\n                LIVE MAP\n              </button>\n              <button\n                onClick={() => setLocation('/agora-chain')}\n                className=\"px-3 py-1 text-xs font-mono rounded bg-gray-200 text-gray-600 hover:bg-gray-300\"\n              >\n                AGORA CHAIN\n              </button>\n              <button\n                onClick={() => setViewMode('archive')}\n                className={`px-3 py-1 text-xs font-mono rounded ${\n                  viewMode === 'archive' ? 'bg-lime-500 text-white' : 'bg-gray-200 text-gray-600'\n                }`}\n              >\n                ARCHIVE\n              </button>\n              <button\n                onClick={() => setShowAgentChat(true)}\n                className=\"px-3 py-1 text-xs font-mono rounded bg-gray-200 text-gray-600 hover:bg-gray-300\"\n              >\n                CHAT\n              </button>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-xs font-mono text-gray-600\">COUNCIL ACTIVE</span>\n            </div>\n            <div className=\"text-xs font-mono text-gray-400 bg-white px-2 py-1 rounded border\">\n              {currentTime}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex h-[calc(100vh-8rem)] overflow-hidden\">\n        \n        {viewMode === 'live' ? (\n          <>\n            {/* Live Decision Map */}\n            <div className=\"w-2/3 relative bg-gray-50/30 border-r border-gray-200\">\n              \n\n\n              {/* Agent Network - everything in SVG for proper coordination */}\n              <svg className=\"absolute inset-0 w-full h-full\" viewBox=\"0 0 600 400\">\n                {/* Connection lines */}\n                <AnimatePresence>\n                  {localActiveConnections.map((connection) => (\n                    <AnimatedConnectionLine \n                      key={connection.id} \n                      connection={connection} \n                      agents={AGENTS} \n                    />\n                  ))}\n                </AnimatePresence>\n                \n                {/* Agent nodes */}\n                {AGENTS.map(agent => (\n                  <SVGAgentNode\n                    key={agent.id}\n                    agent={agent}\n                    isHovered={hoveredAgent?.id === agent.id}\n                    onMouseEnter={() => setHoveredAgent(agent)}\n                    onMouseLeave={() => setHoveredAgent(null)}\n                    activeConnections={localActiveConnections}\n                  />\n                ))}\n              </svg>\n\n              {/* Agent Detail Panel */}\n              <AnimatePresence>\n                {hoveredAgent && (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                    className=\"absolute bg-white rounded-lg shadow-xl border p-4 w-64 z-10 pointer-events-none\"\n                    style={{\n                      left: `${Math.min(Math.max((hoveredAgent.position.x / 600) * 100 + 5, 2), 55)}%`,\n                      top: `${Math.min(Math.max((hoveredAgent.position.y / 400) * 100 - 20, 2), 75)}%`,\n                      transformOrigin: 'center'\n                    }}\n                  >\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"font-semibold text-gray-800\">Agent {hoveredAgent.name}</h4>\n                    </div>\n                    <div className=\"space-y-2 text-xs\">\n                      <div>\n                        <span className=\"text-gray-500\">Domain:</span>\n                        <span className=\"ml-2 font-mono\">{hoveredAgent.domain}</span>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-500\">Alignment:</span>\n                        <span className=\"ml-2 font-mono\">{hoveredAgent.alignment}%</span>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-500\">Surplus:</span>\n                        <div className=\"ml-2 text-green-600\">{hoveredAgent.resources.surplus.join(', ')}</div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-500\">Needs:</span>\n                        <div className=\"ml-2 text-red-600\">{hoveredAgent.resources.deficit.join(', ')}</div>\n                      </div>\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n\n            {/* Decision Metrics Panel */}\n            <div className=\"w-1/3 bg-white p-6 flex flex-col\">\n              <div className=\"space-y-6 flex-shrink-0\">\n                \n                {/* Current Decision Metrics */}\n                <div>\n                  <h3 className=\"text-sm font-semibold text-gray-800 mb-4\">Decision Impact Analysis</h3>\n                  <div className=\"grid grid-cols-3 gap-3\">\n                    <MetricGauge label=\"Ecological\" value={Math.round(impactMetrics.ecological)} color=\"text-green-500\" />\n                    <MetricGauge label=\"Wellbeing\" value={Math.round(impactMetrics.wellbeing)} color=\"text-blue-500\" />\n                    <MetricGauge label=\"Efficiency\" value={Math.round(impactMetrics.efficiency)} color=\"text-purple-500\" />\n                    <MetricGauge label=\"Resilience\" value={Math.round(impactMetrics.resilience)} color=\"text-orange-500\" />\n                    <MetricGauge label=\"Equity\" value={Math.round(impactMetrics.equity)} color=\"text-red-500\" />\n                    <MetricGauge label=\"Innovation\" value={Math.round(impactMetrics.innovation)} color=\"text-cyan-500\" />\n                  </div>\n                </div>\n\n                {/* Live Communications Chat */}\n                <div className=\"flex-1 flex flex-col\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-sm font-semibold text-gray-800\">Live Communications</h3>\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-2 h-2 rounded-full ${isLoadingNewMessage ? 'bg-blue-400 animate-spin' : 'bg-green-400 animate-pulse'}`}></div>\n                      <span className=\"text-xs text-gray-500\">{isLoadingNewMessage ? 'Generating...' : 'Live'}</span>\n                    </div>\n                  </div>\n                  \n                  <div \n                    className=\"bg-gray-50 rounded-lg border flex-1 overflow-hidden cursor-pointer hover:bg-gray-100 transition-colors\"\n                    onClick={() => setShowChatModal(true)}\n                  >\n                    <div className=\"h-64 overflow-y-auto p-3 space-y-2 scroll-smooth\" id=\"chat-container\">\n                      {chatMessages.length === 0 && (\n                        <div className=\"text-gray-500 text-xs text-center py-8\">\n                          Waiting for agent communications...\n                        </div>\n                      )}\n                      {chatMessages.slice(-5).map((message) => (\n                        <motion.div\n                          key={message.id}\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          className=\"bg-white rounded p-2 shadow-sm border hover:shadow-md transition-shadow\"\n                        >\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"text-xs font-mono text-gray-600\">\n                                {message.from} → {message.to}\n                              </span>\n                              <span className={`px-1.5 py-0.5 rounded text-xs text-white ${\n                                message.type === 'energy' ? 'bg-yellow-400' :\n                                message.type === 'material' ? 'bg-blue-400' :\n                                message.type === 'data' ? 'bg-purple-400' : 'bg-green-400'\n                              }`}>\n                                {message.type}\n                              </span>\n                            </div>\n                            <span className=\"text-xs text-gray-400\">{message.timestamp}</span>\n                          </div>\n                          <div className=\"text-xs text-gray-800 leading-relaxed\">\n                            {message.message}\n                          </div>\n                        </motion.div>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-2 text-xs text-gray-500 text-center\">\n                    {chatMessages.length} messages\n                  </div>\n                </div>\n\n                {/* System Status */}\n                <div>\n                  <h3 className=\"text-sm font-semibold text-gray-800 mb-4\">System Status</h3>\n                  <div className=\"space-y-2 text-xs\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Network Consensus</span>\n                      <span className=\"font-mono\">94.7%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Active Agents</span>\n                      <span className=\"font-mono\">{AGENTS.filter(a => a.status === 'active').length}/10</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Response Latency</span>\n                      <span className=\"font-mono\">12ms</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Decision Queue</span>\n                      <span className=\"font-mono\">3 pending</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </>\n        ) : (\n          /* Archive View */\n          <div className=\"w-full bg-white text-gray-700 font-mono p-6 overflow-hidden border-l border-gray-200\">\n            <div className=\"mb-4\">\n              <div className=\"text-gray-800 text-xs font-semibold\">DECISION ARCHIVE - VENUS PROJECT AGORA</div>\n              <div className=\"text-xs text-gray-600\">System Time: {currentTime} | Status: OPERATIONAL</div>\n              <div className=\"border-t border-gray-200 my-2\"></div>\n              \n              {/* Search Bar */}\n              <div className=\"mb-4\">\n                <div className=\"relative\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search conversations and decisions...\"\n                    value={archiveSearchQuery}\n                    onChange={(e) => setArchiveSearchQuery(e.target.value)}\n                    className=\"w-full px-3 py-2 text-xs bg-gray-50 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-lime-500 focus:border-transparent font-mono\"\n                  />\n                  <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                    <svg className=\"h-4 w-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"></path>\n                    </svg>\n                  </div>\n                </div>\n                {archiveSearchQuery && (\n                  <div className=\"mt-1 text-xs text-gray-500\">\n                    Filtering results for \"{archiveSearchQuery}\"\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"space-y-1 text-xs max-h-[calc(100vh-12rem)] overflow-y-auto\">\n              {(() => {\n                // No client-side filtering needed - server handles search now\n                if (archiveEntries.length === 0) {\n                  return (\n                    <div className=\"text-gray-500 p-4 text-center\">\n                      {archiveSearchQuery ? (\n                        <>\n                          No results found for \"{archiveSearchQuery}\".<br/>\n                          Try different search terms or clear the search.\n                        </>\n                      ) : (\n                        <>\n                          No archive snapshots available yet.<br/>\n                          Snapshots are created every 2 minutes based on agent conversations.\n                        </>\n                      )}\n                    </div>\n                  );\n                }\n                \n                return archiveEntries.map((entry: any) => (\n                  <div key={entry.id}>\n                    <div \n                      className=\"hover:bg-gray-100 p-1 cursor-pointer rounded\"\n                      onClick={() => handleArchiveEntryClick(entry)}\n                    >\n                      <span className=\"text-lime-600 font-medium\">[{entry.timestamp}]</span>\n                      <span className=\"ml-2 text-gray-800\">{entry.title}</span>\n                      <span className=\"ml-4 text-blue-600\">{entry.status}</span>\n                      <span className=\"ml-4 text-gray-500\">{entry.impact}</span>\n                      {entry.relevanceScore > 0 && (\n                        <span className=\"ml-2 px-1 bg-lime-100 text-lime-700 rounded text-xs\">\n                          {entry.relevanceScore} matches\n                        </span>\n                      )}\n                    </div>\n                    {/* Show matched content preview for search results */}\n                    {archiveSearchQuery && entry.matchedContent && entry.matchedContent.length > 0 && (\n                      <div className=\"ml-4 mt-1 text-xs text-gray-600 italic\">\n                        Found in: {entry.matchedContent.slice(0, 2).join(' • ')}\n                        {entry.matchedContent.length > 2 && ' • ...'}\n                      </div>\n                    )}\n                  </div>\n                ));\n              })()}\n            </div>\n            \n            <div className=\"mt-6 text-xs text-gray-500\">\n              &gt; Use LIVE MAP mode to view active decision processes\n              {archiveSearchQuery && (\n                <div className=\"mt-1\">\n                  <button \n                    onClick={() => setArchiveSearchQuery('')}\n                    className=\"text-lime-600 hover:text-lime-800 underline\"\n                  >\n                    Clear search\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Live Communications Modal */}\n      <AnimatePresence>\n        {showChatModal && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-[90] p-4\"\n            style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0 }}\n            onClick={(e) => e.target === e.currentTarget && setShowChatModal(false)}\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.9, opacity: 0 }}\n              className=\"bg-white rounded-lg shadow-2xl w-full max-w-4xl h-[80vh] flex flex-col\"\n            >\n              {/* Modal Header */}\n              <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n                <div>\n                  <h2 className=\"text-xl font-semibold text-gray-800\">Agent Communications - The Bigger Picture</h2>\n                  <p className=\"text-sm text-gray-500 mt-1\">Real-time conversations between AI agents in The Venus Project</p>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className={`w-3 h-3 rounded-full ${isLoadingNewMessage ? 'bg-blue-400 animate-spin' : 'bg-green-400 animate-pulse'}`}></div>\n                    <span className=\"text-sm text-gray-600\">{isLoadingNewMessage ? 'Generating...' : 'Live'}</span>\n                    <span className=\"text-sm text-gray-500\">• {chatMessages.length} messages</span>\n                  </div>\n                  <button\n                    onClick={() => setShowChatModal(false)}\n                    className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                  >\n                    <svg className=\"w-5 h-5 text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n                    </svg>\n                  </button>\n                </div>\n              </div>\n\n              {/* Modal Content */}\n              <div className=\"flex-1 p-6 overflow-hidden\">\n                <div className=\"h-full bg-gray-50 rounded-lg border overflow-hidden\">\n                  <div className=\"h-full overflow-y-auto p-4 space-y-3\" id=\"modal-chat-container\">\n                    {chatMessages.length === 0 && (\n                      <div className=\"text-gray-500 text-center py-16\">\n                        <div className=\"text-lg mb-2\">Waiting for agent communications...</div>\n                        <div className=\"text-sm\">AI agents are preparing to share their insights</div>\n                      </div>\n                    )}\n                    {chatMessages.map((message, index) => (\n                      <motion.div\n                        key={message.id}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{ delay: index * 0.05 }}\n                        className=\"bg-white rounded-lg p-4 shadow-sm border hover:shadow-md transition-shadow\"\n                      >\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-lime-400 to-green-500 flex items-center justify-center\">\n                                <span className=\"text-xs font-bold text-white\">{message.from.charAt(0)}</span>\n                              </div>\n                              <div>\n                                <div className=\"text-sm font-semibold text-gray-800\">{message.from}</div>\n                                <div className=\"text-xs text-gray-500\">to {message.to}</div>\n                              </div>\n                            </div>\n                            <span className={`px-3 py-1 rounded-full text-xs font-medium text-white ${\n                              message.type === 'energy' ? 'bg-yellow-400' :\n                              message.type === 'material' ? 'bg-blue-400' :\n                              message.type === 'data' ? 'bg-purple-400' : 'bg-green-400'\n                            }`}>\n                              {message.type}\n                            </span>\n                          </div>\n                          <div className=\"text-xs text-gray-400 font-mono\">{message.timestamp}</div>\n                        </div>\n                        <div className=\"text-sm text-gray-700 leading-relaxed pl-11\">\n                          {message.message}\n                        </div>\n                        <div className=\"flex items-center gap-4 mt-3 pl-11\">\n                          <div className=\"text-xs text-gray-400\">\n                            Agent-to-Agent Communication\n                          </div>\n                          <div className=\"text-xs text-gray-400\">\n                            Priority: {message.type === 'time' ? 'High' : message.type === 'energy' ? 'Critical' : 'Normal'}\n                          </div>\n                        </div>\n                      </motion.div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              {/* Modal Footer */}\n              <div className=\"p-6 border-t border-gray-200 bg-gray-50\">\n\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Archive Conversation Modal */}\n      <AnimatePresence>\n        {showArchiveModal && selectedArchiveEntry && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-[90] p-4\"\n            style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0 }}\n            onClick={(e) => e.target === e.currentTarget && setShowArchiveModal(false)}\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.9, opacity: 0 }}\n              className=\"bg-white rounded-lg shadow-2xl w-full max-w-4xl h-[80vh] flex flex-col\"\n            >\n              {/* Modal Header */}\n              <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n                <div>\n                  <h2 className=\"text-xl font-semibold text-gray-800\">{selectedArchiveEntry.title}</h2>\n                  <div className=\"flex items-center gap-4 mt-1 text-sm text-gray-500\">\n                    <span>{selectedArchiveEntry.timestamp}</span>\n                    <span className={`px-2 py-1 rounded-full text-xs ${\n                      selectedArchiveEntry.status === 'APPROVED' ? 'bg-green-100 text-green-800' :\n                      selectedArchiveEntry.status === 'PENDING' ? 'bg-yellow-100 text-yellow-800' :\n                      'bg-gray-100 text-gray-600'\n                    }`}>\n                      {selectedArchiveEntry.status}\n                    </span>\n                    <span>{selectedArchiveEntry.participants} participants</span>\n                    <span>{selectedArchiveEntry.messageCount} messages</span>\n                  </div>\n                </div>\n                <button\n                  onClick={() => setShowArchiveModal(false)}\n                  className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                >\n                  <svg className=\"w-5 h-5 text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n                  </svg>\n                </button>\n              </div>\n\n              {/* Modal Content */}\n              <div className=\"flex-1 p-6 overflow-hidden\">\n                <div className=\"h-full bg-gray-50 rounded-lg border overflow-hidden\">\n                  <div className=\"h-full overflow-y-auto p-4 space-y-3\">\n                    {selectedArchiveEntry.transcript ? (\n                      selectedArchiveEntry.transcript.map((message: string, index: number) => {\n                        // Parse message format like \"[02:56:31] EPSILON to Kappa: message...\"\n                        const messageMatch = message.match(/^\\[([^\\]]+)\\]\\s+(\\w+)\\s+(.+?):\\s+(.+)$/);\n                        if (messageMatch) {\n                          const [, timestamp, fromAgent, toInfo, messageText] = messageMatch;\n                          const toAgent = toInfo.replace('to ', '');\n                          \n                          return (\n                            <motion.div\n                              key={index}\n                              initial={{ opacity: 0, y: 10 }}\n                              animate={{ opacity: 1, y: 0 }}\n                              transition={{ delay: index * 0.02 }}\n                              className=\"bg-white rounded-lg p-4 shadow-sm border\"\n                            >\n                              <div className=\"flex items-start justify-between mb-3\">\n                                <div className=\"flex items-center gap-3\">\n                                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-lime-400 to-green-500 flex items-center justify-center\">\n                                    <span className=\"text-xs font-bold text-white\">{fromAgent.charAt(0)}</span>\n                                  </div>\n                                  <div>\n                                    <div className=\"text-sm font-semibold text-gray-800\">Agent {fromAgent}</div>\n                                    <div className=\"text-xs text-gray-500\">to {toAgent}</div>\n                                  </div>\n                                </div>\n                                <div className=\"text-xs text-gray-400 font-mono\">{timestamp}</div>\n                              </div>\n                              <div className=\"text-sm text-gray-700 leading-relaxed pl-11\">\n                                {messageText}\n                              </div>\n                            </motion.div>\n                          );\n                        }\n                        \n                        // Fallback for unparsed messages\n                        return (\n                          <div key={index} className=\"bg-white rounded-lg p-3 shadow-sm border text-sm text-gray-700 font-mono\">\n                            {message}\n                          </div>\n                        );\n                      })\n                    ) : (\n                      <div className=\"text-gray-500 text-center py-16\">\n                        <div className=\"text-lg mb-2\">Loading conversation...</div>\n                        <div className=\"text-sm\">Retrieving archived messages</div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Modal Footer */}\n              <div className=\"p-6 border-t border-gray-200 bg-gray-50\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"text-xs text-gray-500\">\n                    Archived conversation from decision process: {selectedArchiveEntry.id}\n                  </div>\n                  {selectedArchiveEntry.metrics && (\n                    <div className=\"flex items-center gap-4 text-xs\">\n                      <span className=\"text-green-600\">Ecological: {selectedArchiveEntry.metrics.ecological > 0 ? '+' : ''}{selectedArchiveEntry.metrics.ecological?.toFixed(1) || '0.0'}</span>\n                      <span className=\"text-blue-600\">Wellbeing: {selectedArchiveEntry.metrics.wellbeing > 0 ? '+' : ''}{selectedArchiveEntry.metrics.wellbeing?.toFixed(1) || '0.0'}</span>\n                      <span className=\"text-purple-600\">Efficiency: {selectedArchiveEntry.metrics.efficiency > 0 ? '+' : ''}{selectedArchiveEntry.metrics.efficiency?.toFixed(1) || '0.0'}</span>\n                      <span className=\"text-orange-600\">Resilience: {selectedArchiveEntry.metrics.resilience > 0 ? '+' : ''}{selectedArchiveEntry.metrics.resilience?.toFixed(1) || '0.0'}</span>\n                      <span className=\"text-pink-600\">Equity: {selectedArchiveEntry.metrics.equity > 0 ? '+' : ''}{selectedArchiveEntry.metrics.equity?.toFixed(1) || '0.0'}</span>\n                      <span className=\"text-indigo-600\">Innovation: {selectedArchiveEntry.metrics.innovation > 0 ? '+' : ''}{selectedArchiveEntry.metrics.innovation?.toFixed(1) || '0.0'}</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Agent Chat Modal */}\n      {showAgentChat && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-[90] p-4\"\n          onClick={(e) => e.target === e.currentTarget && setShowAgentChat(false)}\n        >\n          <motion.div\n            initial={{ scale: 0.8, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            className=\"bg-white rounded-lg shadow-xl border max-w-2xl w-full max-h-[80vh] overflow-hidden\"\n          >\n            {/* Chat Header */}\n            <div className=\"p-4 border-b border-gray-200 bg-gray-50\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-800\">Agent Communication</h3>\n                  <p className=\"text-sm text-gray-600\">Select an agent to chat with</p>\n                </div>\n                <button\n                  onClick={() => setShowAgentChat(false)}\n                  className=\"text-gray-400 hover:text-gray-600 text-xl\"\n                >\n                  ×\n                </button>\n              </div>\n            </div>\n\n            {!selectedAgent ? (\n              /* Agent Selection */\n              <div className=\"p-4 max-h-[60vh] overflow-y-auto\">\n                <div className=\"grid grid-cols-2 gap-3\">\n                  {AGENTS.map((agent) => (\n                    <button\n                      key={agent.id}\n                      onClick={() => setSelectedAgent(agent.id)}\n                      className=\"p-4 bg-gray-50 hover:bg-gray-100 rounded-lg border text-left transition-colors\"\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium text-gray-800\">Agent {agent.name}</h4>\n                        <span className={`w-2 h-2 rounded-full ${\n                          agent.status === 'active' ? 'bg-green-400' :\n                          agent.status === 'processing' ? 'bg-yellow-400' : 'bg-gray-400'\n                        }`} />\n                      </div>\n                      <p className=\"text-xs text-gray-600 mb-1\">{agent.domain}</p>\n                      <p className=\"text-xs text-gray-500\">Alignment: {agent.alignment}%</p>\n                    </button>\n                  ))}\n                </div>\n              </div>\n            ) : (\n              /* Chat Interface */\n              <div className=\"flex flex-col h-[60vh]\">\n                {/* Chat Header */}\n                <div className=\"p-3 border-b border-gray-200 bg-gray-50\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <button\n                        onClick={() => setSelectedAgent(null)}\n                        className=\"text-gray-400 hover:text-gray-600\"\n                      >\n                        ← Back\n                      </button>\n                      <div>\n                        <h4 className=\"font-medium text-gray-800\">\n                          Agent {AGENTS.find(a => a.id === selectedAgent)?.name}\n                        </h4>\n                        <p className=\"text-xs text-gray-600\">\n                          {AGENTS.find(a => a.id === selectedAgent)?.domain}\n                        </p>\n                      </div>\n                    </div>\n                    <span className={`w-2 h-2 rounded-full ${\n                      AGENTS.find(a => a.id === selectedAgent)?.status === 'active' ? 'bg-green-400' :\n                      AGENTS.find(a => a.id === selectedAgent)?.status === 'processing' ? 'bg-yellow-400' : 'bg-gray-400'\n                    }`} />\n                  </div>\n                </div>\n\n                {/* Chat Messages Area */}\n                <div \n                  ref={chatMessagesRef}\n                  className=\"flex-1 p-4 overflow-y-auto bg-gray-50\"\n                >\n                  <div className=\"space-y-3\">\n                    {/* System message */}\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                      <p className=\"text-sm text-blue-800\">\n                        You are now connected to Agent {AGENTS.find(a => a.id === selectedAgent)?.name}.\n                        This agent specializes in {AGENTS.find(a => a.id === selectedAgent)?.domain.toLowerCase()}.\n                        How can I assist you with decision analysis and resource coordination?\n                      </p>\n                    </div>\n\n                    {/* Chat History */}\n                    {selectedAgent && chatHistory[selectedAgent]?.map((entry, index) => (\n                      <div key={index} className=\"space-y-2\">\n                        {/* User Message */}\n                        <div className=\"flex justify-end\">\n                          <div className=\"bg-lime-500 text-white rounded-lg p-3 max-w-[80%]\">\n                            <p className=\"text-sm\">{entry.user}</p>\n                            <p className=\"text-xs opacity-75 mt-1\">{entry.timestamp}</p>\n                          </div>\n                        </div>\n                        {/* Agent Response */}\n                        <div className=\"flex justify-start\">\n                          <div className=\"bg-white border rounded-lg p-3 max-w-[80%]\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <span className=\"w-2 h-2 bg-green-400 rounded-full\"></span>\n                              <span className=\"text-xs font-medium text-gray-600\">\n                                Agent {AGENTS.find(a => a.id === selectedAgent)?.name}\n                              </span>\n                            </div>\n                            <p className=\"text-sm text-gray-800\">{entry.agent}</p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n\n                    {/* Loading indicator */}\n                    {isLoadingResponse && (\n                      <div className=\"flex justify-start\">\n                        <div className=\"bg-white border rounded-lg p-3\">\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\"></div>\n                            <span className=\"text-xs text-gray-500\">Agent is thinking...</span>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Message Input */}\n                <div className=\"p-4 border-t border-gray-200 bg-white\">\n                  <div className=\"flex gap-3\">\n                    <input\n                      type=\"text\"\n                      value={userMessage}\n                      onChange={(e) => setUserMessage(e.target.value)}\n                      placeholder={`Message Agent ${AGENTS.find(a => a.id === selectedAgent)?.name}...`}\n                      className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-lime-500\"\n                      onKeyPress={(e) => {\n                        if (e.key === 'Enter' && userMessage.trim() && !isLoadingResponse) {\n                          sendMessageToAgent();\n                        }\n                      }}\n                    />\n                    <button\n                      onClick={sendMessageToAgent}\n                      disabled={!userMessage.trim() || isLoadingResponse}\n                      className=\"px-4 py-2 bg-lime-500 text-white rounded-lg text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-lime-600 transition-colors\"\n                    >\n                      {isLoadingResponse ? 'Sending...' : 'Send'}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </motion.div>\n        </motion.div>\n      )}\n    </div>\n  );\n}","size_bytes":68361},"client/src/pages/Contact.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\n\nexport default function Contact() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    experience: '',\n    coverLetter: ''\n  });\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Here you would typically send the form data to your backend\n    console.log('Application submitted:', formData);\n    alert('Thank you for your application! We will review it and get back to you soon.');\n    setIsOpen(false);\n    setFormData({\n      name: '',\n      email: '',\n      phone: '',\n      experience: '',\n      coverLetter: ''\n    });\n  };\n  return (\n    <div className=\"min-h-screen bg-white text-black\">\n      <div className=\"max-w-7xl mx-auto px-6 py-16\" style={{ paddingTop: '80px' }}>\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-6xl font-bold mb-6 tracking-tight\">\n            Contact Us\n          </h1>\n          <p className=\"text-xl leading-relaxed text-gray-700 max-w-3xl mx-auto\">\n            Get in touch with The Venus Project team. We welcome your questions, \n            feedback, and collaboration opportunities.\n          </p>\n        </div>\n        \n        <div className=\"grid lg:grid-cols-3 gap-16 mb-20\">\n          <div className=\"bg-gray-50 p-8 rounded-xl\">\n            <h2 className=\"text-3xl font-semibold mb-8 text-center\">General Inquiries</h2>\n            <div className=\"space-y-6\">\n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Email</h3>\n                <p className=\"text-gray-600 text-lg\">info@thevenusproject.com</p>\n              </div>\n\n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Address</h3>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  21 Valley Lane<br />\n                  Venus, FL 33960<br />\n                  United States\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-gray-50 p-8 rounded-xl\">\n            <h2 className=\"text-3xl font-semibold mb-8 text-center\">Technical Support</h2>\n            <div className=\"space-y-6\">\n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">GPU Contribution</h3>\n                <p className=\"text-gray-600\">gpu-support@thevenusproject.com</p>\n              </div>\n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">AI Research</h3>\n                <p className=\"text-gray-600\">research@thevenusproject.com</p>\n              </div>\n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Partnerships</h3>\n                <p className=\"text-gray-600\">partnerships@thevenusproject.com</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-lime-50 p-8 rounded-xl border-2 border-lime-200\">\n            <h2 className=\"text-3xl font-semibold mb-8 text-center\">Work for Us</h2>\n            <div className=\"space-y-6\">\n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Careers</h3>\n                <p className=\"text-gray-600\">careers@thevenusproject.com</p>\n              </div>\n              <div className=\"bg-white p-6 rounded-lg shadow-sm\">\n                <h3 className=\"text-xl font-bold text-gray-900 mb-3 text-center\">Current Opening</h3>\n                <h4 className=\"font-semibold text-lime-700 mb-3 text-lg text-center\">Reinforcement Learning Engineer</h4>\n                <p className=\"text-gray-600 leading-relaxed text-center mb-4\">\n                  Implements learning agents in simulations and real-world applications. \n                  Join our team to develop AI systems that optimize sustainable city planning \n                  and resource management.\n                </p>\n                <div className=\"text-center\">\n                  <Dialog open={isOpen} onOpenChange={setIsOpen}>\n                    <DialogTrigger asChild>\n                      <Button className=\"px-6 py-2 bg-lime-600 text-white hover:bg-lime-700 transition-colors rounded-md font-medium\">\n                        Apply Now\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                      <DialogHeader>\n                        <DialogTitle className=\"text-2xl font-bold mb-4\">Reinforcement Learning Engineer</DialogTitle>\n                      </DialogHeader>\n                      \n                      <div className=\"grid md:grid-cols-2 gap-8\">\n                        <div className=\"space-y-6\">\n                          <div>\n                            <h3 className=\"text-lg font-semibold mb-3\">Job Description</h3>\n                            <p className=\"text-gray-700 leading-relaxed mb-4\">\n                              Join our cutting-edge team to develop AI systems that optimize sustainable city planning \n                              and resource management. You'll be implementing learning agents in both simulations and \n                              real-world applications, contributing to the future of autonomous urban development.\n                            </p>\n                          </div>\n\n                          <div>\n                            <h3 className=\"text-lg font-semibold mb-3\">Key Responsibilities</h3>\n                            <ul className=\"space-y-2 text-gray-700\">\n                              <li className=\"flex items-start space-x-2\">\n                                <div className=\"w-2 h-2 bg-lime-500 rounded-full mt-2\"></div>\n                                <span>Design and implement reinforcement learning algorithms for city optimization</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <div className=\"w-2 h-2 bg-lime-500 rounded-full mt-2\"></div>\n                                <span>Develop multi-agent systems for distributed urban planning</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <div className=\"w-2 h-2 bg-lime-500 rounded-full mt-2\"></div>\n                                <span>Create simulation environments for testing AI-driven city solutions</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <div className=\"w-2 h-2 bg-lime-500 rounded-full mt-2\"></div>\n                                <span>Collaborate with cross-functional teams on infrastructure integration</span>\n                              </li>\n                            </ul>\n                          </div>\n\n                          <div>\n                            <h3 className=\"text-lg font-semibold mb-3\">Requirements</h3>\n                            <ul className=\"space-y-2 text-gray-700\">\n                              <li className=\"flex items-start space-x-2\">\n                                <div className=\"w-2 h-2 bg-gray-400 rounded-full mt-2\"></div>\n                                <span>PhD/Masters in Computer Science, AI, or related field</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <div className=\"w-2 h-2 bg-gray-400 rounded-full mt-2\"></div>\n                                <span>3+ years experience with reinforcement learning frameworks (PyTorch, TensorFlow)</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <div className=\"w-2 h-2 bg-gray-400 rounded-full mt-2\"></div>\n                                <span>Strong background in multi-agent systems and distributed computing</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <div className=\"w-2 h-2 bg-gray-400 rounded-full mt-2\"></div>\n                                <span>Experience with simulation environments (OpenAI Gym, Unity ML-Agents)</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <div className=\"w-2 h-2 bg-gray-400 rounded-full mt-2\"></div>\n                                <span>Proficiency in Python, C++, and cloud computing platforms</span>\n                              </li>\n                            </ul>\n                          </div>\n\n                          <div className=\"bg-lime-50 p-4 rounded-lg\">\n                            <h3 className=\"text-lg font-semibold mb-2\">What We Offer</h3>\n                            <ul className=\"text-gray-700 space-y-1\">\n                              <li>• Competitive salary ($100k - $150k)</li>\n                              <li>• Equity participation in groundbreaking technology</li>\n                              <li>• Remote work flexibility</li>\n                              <li>• Access to high-performance computing resources</li>\n                              <li>• Opportunity to shape the future of sustainable cities</li>\n                            </ul>\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-4\">\n                          <h3 className=\"text-lg font-semibold mb-4\">Apply for this Position</h3>\n                          <form onSubmit={handleSubmit} className=\"space-y-4\">\n                            <div>\n                              <Label htmlFor=\"name\">Full Name *</Label>\n                              <Input\n                                id=\"name\"\n                                name=\"name\"\n                                value={formData.name}\n                                onChange={handleInputChange}\n                                required\n                                placeholder=\"Your full name\"\n                              />\n                            </div>\n\n                            <div>\n                              <Label htmlFor=\"email\">Email Address *</Label>\n                              <Input\n                                id=\"email\"\n                                name=\"email\"\n                                type=\"email\"\n                                value={formData.email}\n                                onChange={handleInputChange}\n                                required\n                                placeholder=\"your.email@example.com\"\n                              />\n                            </div>\n\n                            <div>\n                              <Label htmlFor=\"phone\">Phone Number</Label>\n                              <Input\n                                id=\"phone\"\n                                name=\"phone\"\n                                value={formData.phone}\n                                onChange={handleInputChange}\n                                placeholder=\"+1 (555) 123-4567\"\n                              />\n                            </div>\n\n                            <div>\n                              <Label htmlFor=\"experience\">Years of RL Experience *</Label>\n                              <Input\n                                id=\"experience\"\n                                name=\"experience\"\n                                value={formData.experience}\n                                onChange={handleInputChange}\n                                required\n                                placeholder=\"e.g., 5 years\"\n                              />\n                            </div>\n\n                            <div>\n                              <Label htmlFor=\"coverLetter\">Cover Letter *</Label>\n                              <Textarea\n                                id=\"coverLetter\"\n                                name=\"coverLetter\"\n                                value={formData.coverLetter}\n                                onChange={handleInputChange}\n                                required\n                                rows={6}\n                                placeholder=\"Tell us why you're interested in this role and how your experience makes you a great fit...\"\n                              />\n                            </div>\n\n                            <div className=\"flex space-x-3 pt-4\">\n                              <Button type=\"submit\" className=\"flex-1 bg-lime-600 hover:bg-lime-700\">\n                                Submit Application\n                              </Button>\n                              <Button type=\"button\" variant=\"outline\" onClick={() => setIsOpen(false)}>\n                                Cancel\n                              </Button>\n                            </div>\n                          </form>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n          \n        <div className=\"mt-16 p-8 bg-black text-white rounded-xl text-center\">\n          <h2 className=\"text-4xl font-semibold mb-6\">Join Our Mission</h2>\n          <p className=\"text-lg mb-8 max-w-4xl mx-auto leading-relaxed\">\n            The Venus Project represents a new paradigm for sustainable city development \n            powered by artificial intelligence and distributed computing. We're always \n            looking for passionate individuals to join our cause.\n          </p>\n          <div className=\"flex justify-center space-x-6\">\n            <button className=\"px-8 py-3 bg-lime-500 text-black hover:bg-lime-400 transition-colors rounded-md font-semibold\">\n              Join Our Community\n            </button>\n            <button className=\"px-8 py-3 border-2 border-white text-white hover:bg-white hover:text-black transition-colors rounded-md font-semibold\">\n              Learn More\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14891},"client/src/pages/Contribute.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Brain, Info } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { WalletConnect } from '@/components/WalletConnect';\nimport { GPUController } from '@/components/GPUController';\nimport { NetworkStats } from '@/components/NetworkStats';\nimport { RewardsCalculator } from '@/components/RewardsCalculator';\n\nimport { Leaderboard } from '@/components/Leaderboard';\nimport { ContributorStatus } from '@/components/ContributorStatus';\n\nexport default function Contribute() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState<string>();\n  const [vnsBalance] = useState(47.32);\n  const [isGPURunning, setIsGPURunning] = useState(false);\n  const [gpuPower, setGPUPower] = useState(50);\n\n  const handleWalletConnect = (walletType: 'phantom' | 'metamask', address: string) => {\n    setIsConnected(true);\n    setWalletAddress(address);\n  };\n\n  const handleGPUToggle = () => {\n    setIsGPURunning(!isGPURunning);\n  };\n\n  const gpuStats = {\n    flopsContributed: 2847392847,\n    decisionCyclePowered: 12.7,\n    hoursRunning: 3.2\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white text-black\">\n      <div className=\"container mx-auto px-6 py-12\" style={{ paddingTop: '80px' }}>\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <div className=\"max-w-4xl mx-auto\">\n            <h1 className=\"text-3xl md:text-4xl font-light text-gray-800 mb-8 leading-relaxed\">\n              Contribute your GPU power to help The Venus Project's City grow and make decisions faster, while earning voting rights to shape its future and gaining early access to upcoming features.\n            </h1>\n            <div className=\"flex justify-center\">\n              <WalletConnect\n                onConnect={handleWalletConnect}\n                isConnected={isConnected}\n                walletAddress={walletAddress}\n                vnsBalance={vnsBalance}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Real-Time Network Stats */}\n        <div className=\"mb-20\">\n          <NetworkStats />\n        </div>\n\n        {/* Educational Hook */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-20 p-8 bg-gradient-to-r from-gray-50 to-lime-50 rounded-2xl border border-gray-100\"\n        >\n          <div className=\"flex items-start gap-6\">\n            <div className=\"p-4 bg-white rounded-2xl shadow-sm border border-lime-100\">\n              <Brain className=\"w-8 h-8 text-lime-600\" />\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"text-2xl font-medium mb-4 text-gray-800\">Every Second Counts</h3>\n              <p className=\"text-gray-600 mb-6 text-lg leading-relaxed\">\n                Every second your GPU runs, the Venus AI city learns faster — balancing energy, \n                resources, and wellbeing in real time. Your contribution directly accelerates \n                the development of sustainable urban solutions.\n              </p>\n              <div className=\"flex items-start gap-3 p-4 bg-white/70 rounded-xl border border-white/50\">\n                <Info className=\"w-5 h-5 text-gray-500 mt-0.5\" />\n                <span className=\"text-gray-600 leading-relaxed\">\n                  Currently processing: Urban optimization algorithms, resource distribution models, \n                  and social harmony calculations\n                </span>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-12\">\n          {/* Left Column - Main Controls */}\n          <div className=\"lg:col-span-2 space-y-12\">\n            {/* GPU Controller */}\n            <GPUController\n              isRunning={isGPURunning}\n              onToggle={handleGPUToggle}\n              gpuPower={gpuPower}\n              onPowerChange={setGPUPower}\n              stats={gpuStats}\n            />\n\n\n\n            {/* Rewards Calculator */}\n            <RewardsCalculator />\n\n            {/* Leaderboard */}\n            <Leaderboard />\n          </div>\n\n          {/* Right Column - Status */}\n          <div className=\"space-y-12\">\n            {/* Contributor Status */}\n            {isConnected && (\n              <ContributorStatus\n                rank=\"Builder\"\n                badges={['100_hours', 'early_adopter']}\n                hoursContributed={89.4}\n                nextRankRequirement={150}\n                dailyGoal={4}\n                todaysProgress={2.3}\n              />\n            )}\n          </div>\n        </div>\n\n        {/* Terminal-style Activity Log */}\n        {isGPURunning && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"mt-20 p-8 bg-gray-900 rounded-2xl border border-gray-800\"\n          >\n            <div className=\"flex items-center gap-2 mb-4\">\n              <div className=\"w-3 h-3 bg-lime-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-lime-400 font-mono text-sm\">GPU NODE ACTIVITY</span>\n            </div>\n            <div className=\"font-mono text-xs space-y-1 text-gray-300\">\n              <div>[12:04:32] GPU initialized - NVIDIA RTX 4080 detected</div>\n              <div>[12:04:33] WebGPU context established - {gpuPower}% power allocated</div>\n              <div>[12:04:34] Connected to Venus AI network - Node ID: VN_7xQ8K2B9</div>\n              <div>[12:04:35] <span className=\"text-lime-400\">Processing batch</span> - Energy grid optimization (Alpha → Beta)</div>\n              <div>[12:04:36] <span className=\"text-gray-400\">Computation complete</span> - 2.4M FLOPS contributed</div>\n              <div>[12:04:37] <span className=\"text-lime-400\">Reward earned</span> - +0.0023 VNS</div>\n              <div>[12:04:38] <span className=\"text-lime-400\">Processing batch</span> - Resource allocation model (Iota)</div>\n            </div>\n          </motion.div>\n        )}\n\n        {/* Getting Started CTA for non-connected users */}\n        {!isConnected && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"mt-20 text-center p-12 bg-gradient-to-br from-gray-50 to-lime-50 rounded-2xl border border-gray-100\"\n          >\n            <h3 className=\"text-3xl font-medium mb-6 text-gray-800\">Ready to Power the Future?</h3>\n            <p className=\"text-gray-600 mb-10 max-w-2xl mx-auto text-lg leading-relaxed\">\n              Connect your wallet to start contributing GPU power to the Venus AI city simulation. \n              Earn VNS tokens while helping build sustainable urban solutions.\n            </p>\n            <div className=\"flex items-center justify-center gap-4 flex-wrap\">\n              <Badge className=\"bg-gray-100 text-gray-600 hover:bg-lime-100 hover:text-lime-700 transition-colors\">\n                ⚡ Browser-based - No download required\n              </Badge>\n              <Badge className=\"bg-gray-100 text-gray-600 hover:bg-lime-100 hover:text-lime-700 transition-colors\">\n                🔒 Secure WebGPU technology\n              </Badge>\n              <Badge className=\"bg-gray-100 text-gray-600 hover:bg-lime-100 hover:text-lime-700 transition-colors\">\n                💰 Instant VNS rewards\n              </Badge>\n            </div>\n          </motion.div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":7610},"client/src/pages/Home.tsx":{"content":"import { useEffect, useState, useRef } from \"react\";\nimport ScrollPortrait from \"@/components/ScrollPortrait\";\nimport architectureBg from \"@assets/a70b7a21-b96d-4213-a4f2-b2679bc99ce6-1_1754887244088.png\";\n\n// Main title logo and media logos imports\nimport venusProjectTitleLogo from \"@assets/0245_1754931914051.png\";\nimport fhmLogo from \"@assets/Untitled design (1) copy 2_1754926356755.png\";\nimport digitLogo from \"@assets/Untitled design (1) copy_1754926356755.png\";\nimport rtLogo from \"@assets/Untitled design (1)_1754926356755.png\";\nimport aljazeeraLogo from \"@assets/Untitled design copy 2_1754926356755.png\";\nimport avroLogo from \"@assets/Untitled design copy 3_1754926356755.png\";\nimport atvLogo from \"@assets/Untitled design copy 4_1754926356755.png\";\nimport audibleLogo from \"@assets/Untitled design copy 5_1754926356755.png\";\nimport bbcWorldLogo from \"@assets/Untitled design copy 6_1754926356755.png\";\nimport bbcTwoLogo from \"@assets/Untitled design copy 7_1754926356755.png\";\nimport abGroupeLogo from \"@assets/Untitled design copy 8_1754926356755.png\";\nimport bloombergLogo from \"@assets/Untitled design copy 9_1754926356755.png\";\nimport cbsLogo from \"@assets/Untitled design copy 10_1754926356755.png\";\nimport viceLogo from \"@assets/Untitled design copy 11_1754926356755.png\";\nimport abcLogo from \"@assets/Untitled design copy 12_1754926356755.png\";\nimport fxLogo from \"@assets/Untitled design copy 13_1754926356755.png\";\nimport discoveryLogo from \"@assets/Untitled design copy 14_1754926356755.png\";\nimport bbcTwoAltLogo from \"@assets/Untitled design copy_1754926356755.png\";\nimport emLogo from \"@assets/Untitled design_1754926356755.png\";\n\n// New media logos\nimport domcLogo from \"@assets/Untitled design (3) copy 2_1754942660088.png\";\nimport cnbcLogo from \"@assets/Untitled design (3) copy 3_1754942660088.png\";\nimport foxNewsLogo from \"@assets/Untitled design (3) copy 4_1754942660088.png\";\nimport jmorgenLogo from \"@assets/Untitled design (3) copy_1754942660088.png\";\nimport cnnLogo from \"@assets/Untitled design (3)_1754942660088.png\";\nimport netflixLogo from \"@assets/Untitled design (4) copy 2_1754942660088.png\";\nimport plainDealerLogo from \"@assets/Untitled design (4) copy 3_1754942660088.png\";\nimport sunLogo from \"@assets/Untitled design (4) copy 4_1754942660088.png\";\nimport tedLogo from \"@assets/Untitled design (4) copy 5_1754942660088.png\";\nimport tf1Logo from \"@assets/Untitled design (4) copy 6_1754942660088.png\";\nimport tveLogo from \"@assets/Untitled design (4) copy 7_1754942660088.png\";\nimport yleLogo from \"@assets/Untitled design (4) copy 8_1754942660088.png\";\nimport nbcLogo from \"@assets/Untitled design (4) copy 9_1754942660088.png\";\nimport starzLogo from \"@assets/Untitled design (4) copy_1754942660088.png\";\nimport espnLogo from \"@assets/Untitled design (4)_1754942660088.png\";\n\n// Third row logos\nimport nbcPeacockLogo from \"@assets/Untitled design (4) copy 10_1754943218265.png\";\nimport nhkLogo from \"@assets/Untitled design (4) copy 11_1754943218265.png\";\nimport jpMorganLogo from \"@assets/Untitled design (4) copy 12_1754943218265.png\";\nimport geoLogo from \"@assets/Untitled design (5) copy 2_1754943218265.png\";\nimport milliLogo from \"@assets/Untitled design (5) copy 3_1754943218265.png\";\nimport huffpostLogo from \"@assets/Untitled design (5) copy 4_1754943218265.png\";\nimport haberturkLogo from \"@assets/Untitled design (5) copy 5_1754943218265.png\";\nimport nowThisLogo from \"@assets/Untitled design (5) copy 6_1754943218265.png\";\nimport freeSpeechTvLogo from \"@assets/Untitled design (5) copy 7_1754943218265.png\";\nimport sputnikLogo from \"@assets/Untitled design (5) copy 8_1754943218265.png\";\nimport starLogo from \"@assets/Untitled design (5) copy 9_1754943218265.png\";\nimport pumaLogo from \"@assets/Untitled design (5) copy 10_1754943218265.png\";\nimport philadelphiaTribuneLogo from \"@assets/Untitled design (5) copy 11_1754943218265.png\";\nimport rteLogo from \"@assets/Untitled design (5) copy 12_1754943218265.png\";\nimport orfLogo from \"@assets/Untitled design (5) copy 13_1754943218265.png\";\nimport appleLogo from \"@assets/Untitled design (5) copy 14_1754943218265.png\";\nimport vancouverSunLogo from \"@assets/Untitled design (5) copy 15_1754943218265.png\";\nimport ieBusinessLogo from \"@assets/Untitled design (5) copy_1754943218265.png\";\nimport inLogo from \"@assets/Untitled design (5)_1754943218265.png\";\n\ninterface HomeProps {\n  isLoaded?: boolean;\n  showContent?: boolean;\n}\n\nexport default function Home({ isLoaded = true, showContent = true }: HomeProps) {\n  const [scrollY, setScrollY] = useState(0);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const paragraphText = \"Cities have always been the product of human imagination and human limitation, shaped by the slow accumulation of decisions made by countless individuals over generations. But what if we could reimagine this process entirely?\";\n\n  useEffect(() => {\n    const handleScroll = () => setScrollY(window.scrollY);\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  useEffect(() => {\n    const shouldStartTyping = scrollY > 400;\n    setIsTyping(shouldStartTyping);\n  }, [scrollY]);\n\n  // All rows now use CSS animations for consistent timing\n\n\n\n  const titleOpacity = Math.max(0, 1 - scrollY / 400);\n  const titleScale = Math.max(0.8, 1 - scrollY / 1000);\n  const titleTranslateY = -scrollY * 0.5;\n\n  return (\n    <>\n      <div className=\"min-h-screen flex items-center justify-center relative overflow-hidden -mt-16 pt-16\">\n        {/* Multiple layer approach to handle PNG transparency - smooth fade after title */}\n        <div \n          className={`absolute -top-16 left-0 right-0 bottom-0 bg-gray-100 transition-opacity duration-3000 ease-out delay-200 ${\n            showContent ? 'opacity-100' : 'opacity-0'\n          }`}\n        ></div>\n        <div \n          className={`absolute -top-16 left-0 right-0 bottom-0 transition-opacity duration-3000 ease-out delay-600 ${\n            showContent ? 'opacity-100' : 'opacity-0'\n          }`}\n          style={{\n            backgroundImage: `url(${architectureBg})`,\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundRepeat: 'no-repeat'\n          }}\n        ></div>\n        <div \n          className={`absolute -top-16 left-0 right-0 bottom-0 bg-white bg-opacity-10 transition-opacity duration-3000 ease-out delay-1000 ${\n            showContent ? 'opacity-100' : 'opacity-0'\n          }`}\n        ></div>\n        \n        <div className=\"flex items-center justify-center px-4 relative z-20 min-h-[50vh] -mt-16\">\n          <img \n            src={venusProjectTitleLogo}\n            alt=\"The Venus Project\"\n            className={`max-w-7xl w-full h-auto drop-shadow-lg transition-all duration-1000 ease-out ${\n              isLoaded ? 'opacity-100 scale-100' : 'opacity-0 scale-95'\n            }`}\n            style={{\n              opacity: isLoaded ? titleOpacity : 0,\n              transform: `translateY(${titleTranslateY - 50}px) scale(${titleScale * (isLoaded ? 1 : 0.95)})`,\n              filter: 'drop-shadow(2px 2px 4px rgba(255,255,255,0.8))'\n            }}\n          />\n        </div>\n        \n        {/* Gradient overlay for smooth transition */}\n        <div \n          className={`absolute bottom-0 left-0 right-0 h-64 bg-gradient-to-t from-white via-white/80 to-transparent pointer-events-none z-25 transition-opacity duration-3000 ease-out delay-1800 ${\n            showContent ? 'opacity-100' : 'opacity-0'\n          }`}\n          style={{\n            opacity: showContent ? Math.min(1, scrollY / 100) : 0\n          }}\n        />\n        \n        {/* Scroll indicator - smooth fade in */}\n        <div \n          className={`absolute bottom-1 left-1/2 transform -translate-x-1/2 text-black animate-bounce z-20 transition-opacity duration-3000 ease-out delay-2500 ${\n            showContent ? 'opacity-100' : 'opacity-0'\n          }`}\n          style={{\n            opacity: showContent ? Math.max(0, 1 - scrollY / 200) : 0,\n            textShadow: '2px 2px 4px rgba(255,255,255,0.8)'\n          }}\n        >\n          <div className=\"flex flex-col items-center\">\n            <span className=\"text-sm mb-2\">Scroll to explore</span>\n            <div className=\"w-px h-8 bg-black shadow-lg\"></div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Transition section */}\n      <div \n        className={`min-h-screen bg-white p-8 relative z-30 transition-all duration-3000 ease-out delay-1400 ${\n          showContent ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'\n        }`}\n        style={{\n          transform: `translateY(${-scrollY * 0.1}px)`,\n          backgroundColor: 'white',\n          boxShadow: '0 -20px 40px rgba(255,255,255,0.9)'\n        }}\n      >\n        <div \n          className=\"w-full bg-white px-4 sm:px-6 lg:px-8 lg:pr-[650px]\"\n          style={{\n            opacity: Math.min(1, Math.max(0.3, (scrollY - 100) / 200)),\n            transform: `translateY(${Math.max(0, 50 - (scrollY - 100) * 0.2)}px)`,\n          }}\n        >\n          <div className=\"max-w-lg\">\n          <h2 className={`text-4xl font-bold text-black mb-8 ${isTyping ? \"fade-in-up\" : \"\"}`}>\n            Vision for Tomorrow\n          </h2>\n          <div className=\"space-y-6 text-lg text-gray-700 leading-relaxed\">\n            <p className={isTyping ? \"fade-in-up\" : \"\"} style={{ animationDelay: \"0.2s\" }}>\n              Cities shaped not by control, but by balance. Where decentralized decision-making meets intelligent design.\n            </p>\n            <p className={isTyping ? \"fade-in-up\" : \"\"} style={{ animationDelay: \"0.4s\" }}>\n              AI as partner, not master. Creating living urban organisms that learn, adapt, and evolve with their inhabitants.\n            </p>\n            <p className={isTyping ? \"fade-in-up\" : \"\"} style={{ animationDelay: \"0.6s\" }}>\n              A cultural shift toward sustainable prosperity. Where innovation emerges from anywhere, and the future remains open.\n            </p>\n          </div>\n          </div>\n        </div>\n        \n        {/* Portrait integrated in Vision section */}\n        <ScrollPortrait />\n      </div>\n      \n      {/* Featured In Section - Separate section */}\n      <div \n        className={`bg-white py-16 transition-all duration-3000 ease-out delay-2200 ${\n          showContent ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'\n        }`}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-4xl font-bold text-center text-black mb-16\">\n            Featured In\n          </h2>\n        </div>\n        \n        {/* Scrolling logos container - full width */}\n        <div className=\"overflow-hidden\">\n            <div \n              className=\"flex select-none\"\n              style={{\n                animation: 'scrollRightToLeft 50s linear infinite',\n                willChange: 'transform'\n              }}\n            >\n              {/* First set of logos - Original only */}\n              <div className=\"flex space-x-20 items-center min-w-max\">\n                <img src={fhmLogo} alt=\"FHM\" className=\"h-16 object-contain\" />\n                <img src={digitLogo} alt=\"Digit\" className=\"h-16 object-contain\" />\n                <img src={rtLogo} alt=\"RT\" className=\"h-16 object-contain\" />\n                <img src={aljazeeraLogo} alt=\"Al Jazeera\" className=\"h-16 object-contain\" />\n                <img src={avroLogo} alt=\"AVRO\" className=\"h-16 object-contain\" />\n                <img src={atvLogo} alt=\"ATV\" className=\"h-16 object-contain\" />\n                <img src={audibleLogo} alt=\"Audible\" className=\"h-16 object-contain\" />\n                <img src={bbcWorldLogo} alt=\"BBC World News\" className=\"h-16 object-contain\" />\n                <img src={bbcTwoLogo} alt=\"BBC Two\" className=\"h-16 object-contain\" />\n                <img src={abGroupeLogo} alt=\"AB Groupe\" className=\"h-16 object-contain\" />\n                <img src={bloombergLogo} alt=\"Bloomberg\" className=\"h-16 object-contain\" />\n                <img src={cbsLogo} alt=\"CBS\" className=\"h-16 object-contain\" />\n                <img src={viceLogo} alt=\"VICE\" className=\"h-16 object-contain\" />\n                <img src={abcLogo} alt=\"ABC\" className=\"h-16 object-contain\" />\n                <img src={fxLogo} alt=\"FX\" className=\"h-16 object-contain\" />\n                <img src={discoveryLogo} alt=\"Discovery Channel\" className=\"h-16 object-contain\" />\n                <img src={bbcTwoAltLogo} alt=\"BBC Two\" className=\"h-16 object-contain\" />\n                <img src={emLogo} alt=\"EM\" className=\"h-16 object-contain\" />\n              </div>\n              \n              {/* Duplicate set for seamless loop */}\n              <div className=\"flex space-x-20 items-center min-w-max ml-20\">\n                <img src={fhmLogo} alt=\"FHM\" className=\"h-16 object-contain\" />\n                <img src={digitLogo} alt=\"Digit\" className=\"h-16 object-contain\" />\n                <img src={rtLogo} alt=\"RT\" className=\"h-16 object-contain\" />\n                <img src={aljazeeraLogo} alt=\"Al Jazeera\" className=\"h-16 object-contain\" />\n                <img src={avroLogo} alt=\"AVRO\" className=\"h-16 object-contain\" />\n                <img src={atvLogo} alt=\"ATV\" className=\"h-16 object-contain\" />\n                <img src={audibleLogo} alt=\"Audible\" className=\"h-16 object-contain\" />\n                <img src={bbcWorldLogo} alt=\"BBC World News\" className=\"h-16 object-contain\" />\n                <img src={bbcTwoLogo} alt=\"BBC Two\" className=\"h-16 object-contain\" />\n                <img src={abGroupeLogo} alt=\"AB Groupe\" className=\"h-16 object-contain\" />\n                <img src={bloombergLogo} alt=\"Bloomberg\" className=\"h-16 object-contain\" />\n                <img src={cbsLogo} alt=\"CBS\" className=\"h-16 object-contain\" />\n                <img src={viceLogo} alt=\"VICE\" className=\"h-16 object-contain\" />\n                <img src={abcLogo} alt=\"ABC\" className=\"h-16 object-contain\" />\n                <img src={fxLogo} alt=\"FX\" className=\"h-16 object-contain\" />\n                <img src={discoveryLogo} alt=\"Discovery Channel\" className=\"h-16 object-contain\" />\n                <img src={bbcTwoAltLogo} alt=\"BBC Two\" className=\"h-16 object-contain\" />\n                <img src={emLogo} alt=\"EM\" className=\"h-16 object-contain\" />\n              </div>\n            </div>\n          </div>\n          \n          {/* Second row - New logos scrolling left to right */}\n          <div className=\"overflow-hidden mt-8\">\n            <div \n              className=\"flex select-none\"\n              style={{\n                animation: 'scrollLeftToRight 50s linear infinite',\n                willChange: 'transform'\n              }}\n            >\n              {/* First set of new logos */}\n              <div className=\"flex space-x-20 items-center min-w-max\">\n                <img src={cnnLogo} alt=\"CNN\" className=\"h-16 object-contain\" />\n                <img src={cnbcLogo} alt=\"CNBC\" className=\"h-16 object-contain\" />\n                <img src={foxNewsLogo} alt=\"Fox News\" className=\"h-16 object-contain\" />\n                <img src={nbcLogo} alt=\"NBC\" className=\"h-16 object-contain\" />\n                <img src={tedLogo} alt=\"TED\" className=\"h-16 object-contain\" />\n                <img src={netflixLogo} alt=\"Netflix\" className=\"h-16 object-contain\" />\n                <img src={starzLogo} alt=\"Starz\" className=\"h-16 object-contain\" />\n                <img src={espnLogo} alt=\"ESPN\" className=\"h-16 object-contain\" />\n                <img src={tf1Logo} alt=\"TF1\" className=\"h-16 object-contain\" />\n                <img src={tveLogo} alt=\"TVE\" className=\"h-16 object-contain\" />\n                <img src={yleLogo} alt=\"YLE\" className=\"h-16 object-contain\" />\n                <img src={domcLogo} alt=\"DOMC\" className=\"h-16 object-contain\" />\n                <img src={jmorgenLogo} alt=\"J.P. Morgan\" className=\"h-16 object-contain\" />\n                <img src={plainDealerLogo} alt=\"The Plain Dealer\" className=\"h-16 object-contain\" />\n                <img src={sunLogo} alt=\"The Sun\" className=\"h-16 object-contain\" />\n              </div>\n              \n              {/* Duplicate set for seamless loop */}\n              <div className=\"flex space-x-20 items-center min-w-max ml-20\">\n                <img src={cnnLogo} alt=\"CNN\" className=\"h-16 object-contain\" />\n                <img src={cnbcLogo} alt=\"CNBC\" className=\"h-16 object-contain\" />\n                <img src={foxNewsLogo} alt=\"Fox News\" className=\"h-16 object-contain\" />\n                <img src={nbcLogo} alt=\"NBC\" className=\"h-16 object-contain\" />\n                <img src={tedLogo} alt=\"TED\" className=\"h-16 object-contain\" />\n                <img src={netflixLogo} alt=\"Netflix\" className=\"h-16 object-contain\" />\n                <img src={starzLogo} alt=\"Starz\" className=\"h-16 object-contain\" />\n                <img src={espnLogo} alt=\"ESPN\" className=\"h-16 object-contain\" />\n                <img src={tf1Logo} alt=\"TF1\" className=\"h-16 object-contain\" />\n                <img src={tveLogo} alt=\"TVE\" className=\"h-16 object-contain\" />\n                <img src={yleLogo} alt=\"YLE\" className=\"h-16 object-contain\" />\n                <img src={domcLogo} alt=\"DOMC\" className=\"h-16 object-contain\" />\n                <img src={jmorgenLogo} alt=\"J.P. Morgan\" className=\"h-16 object-contain\" />\n                <img src={plainDealerLogo} alt=\"The Plain Dealer\" className=\"h-16 object-contain\" />\n                <img src={sunLogo} alt=\"The Sun\" className=\"h-16 object-contain\" />\n              </div>\n              \n              {/* Third set for extra smooth scrolling */}\n              <div className=\"flex space-x-20 items-center min-w-max ml-20\">\n                <img src={cnnLogo} alt=\"CNN\" className=\"h-16 object-contain\" />\n                <img src={cnbcLogo} alt=\"CNBC\" className=\"h-16 object-contain\" />\n                <img src={foxNewsLogo} alt=\"Fox News\" className=\"h-16 object-contain\" />\n                <img src={nbcLogo} alt=\"NBC\" className=\"h-16 object-contain\" />\n                <img src={tedLogo} alt=\"TED\" className=\"h-16 object-contain\" />\n                <img src={netflixLogo} alt=\"Netflix\" className=\"h-16 object-contain\" />\n                <img src={starzLogo} alt=\"Starz\" className=\"h-16 object-contain\" />\n                <img src={espnLogo} alt=\"ESPN\" className=\"h-16 object-contain\" />\n                <img src={tf1Logo} alt=\"TF1\" className=\"h-16 object-contain\" />\n                <img src={tveLogo} alt=\"TVE\" className=\"h-16 object-contain\" />\n                <img src={yleLogo} alt=\"YLE\" className=\"h-16 object-contain\" />\n                <img src={domcLogo} alt=\"DOMC\" className=\"h-16 object-contain\" />\n                <img src={jmorgenLogo} alt=\"J.P. Morgan\" className=\"h-16 object-contain\" />\n                <img src={plainDealerLogo} alt=\"The Plain Dealer\" className=\"h-16 object-contain\" />\n                <img src={sunLogo} alt=\"The Sun\" className=\"h-16 object-contain\" />\n              </div>\n            </div>\n          </div>\n          \n          {/* Third row - New logos scrolling right to left */}\n          <div className=\"overflow-hidden mt-8\">\n            <div \n              className=\"flex select-none\"\n              style={{\n                animation: 'scrollRightToLeft 50s linear infinite',\n                willChange: 'transform'\n              }}\n            >\n              {/* First set of third row logos */}\n              <div className=\"flex space-x-20 items-center min-w-max\">\n                <img src={nbcPeacockLogo} alt=\"NBC\" className=\"h-16 object-contain\" />\n                <img src={nhkLogo} alt=\"NHK\" className=\"h-16 object-contain\" />\n                <img src={jpMorganLogo} alt=\"J.P. Morgan\" className=\"h-16 object-contain\" />\n                <img src={geoLogo} alt=\"GEO\" className=\"h-16 object-contain\" />\n                <img src={milliLogo} alt=\"Milliyet\" className=\"h-16 object-contain\" />\n                <img src={huffpostLogo} alt=\"HuffPost\" className=\"h-16 object-contain\" />\n                <img src={haberturkLogo} alt=\"Habertürk\" className=\"h-16 object-contain\" />\n                <img src={nowThisLogo} alt=\"NowThis\" className=\"h-16 object-contain\" />\n                <img src={freeSpeechTvLogo} alt=\"Free Speech TV\" className=\"h-16 object-contain\" />\n                <img src={sputnikLogo} alt=\"Sputnik\" className=\"h-16 object-contain\" />\n                <img src={starLogo} alt=\"Star\" className=\"h-16 object-contain\" />\n                <img src={pumaLogo} alt=\"Puma\" className=\"h-16 object-contain\" />\n                <img src={philadelphiaTribuneLogo} alt=\"Philadelphia Tribune\" className=\"h-16 object-contain\" />\n                <img src={rteLogo} alt=\"RTÉ\" className=\"h-16 object-contain\" />\n                <img src={orfLogo} alt=\"ORF eins\" className=\"h-16 object-contain\" />\n                <img src={appleLogo} alt=\"Apple\" className=\"h-16 object-contain\" />\n                <img src={vancouverSunLogo} alt=\"The Vancouver Sun\" className=\"h-16 object-contain\" />\n                <img src={ieBusinessLogo} alt=\"IE Business\" className=\"h-16 object-contain\" />\n                <img src={inLogo} alt=\"IN\" className=\"h-16 object-contain\" />\n              </div>\n              \n              {/* Duplicate set for seamless loop */}\n              <div className=\"flex space-x-20 items-center min-w-max ml-20\">\n                <img src={nbcPeacockLogo} alt=\"NBC\" className=\"h-16 object-contain\" />\n                <img src={nhkLogo} alt=\"NHK\" className=\"h-16 object-contain\" />\n                <img src={jpMorganLogo} alt=\"J.P. Morgan\" className=\"h-16 object-contain\" />\n                <img src={geoLogo} alt=\"GEO\" className=\"h-16 object-contain\" />\n                <img src={milliLogo} alt=\"Milliyet\" className=\"h-16 object-contain\" />\n                <img src={huffpostLogo} alt=\"HuffPost\" className=\"h-16 object-contain\" />\n                <img src={haberturkLogo} alt=\"Habertürk\" className=\"h-16 object-contain\" />\n                <img src={nowThisLogo} alt=\"NowThis\" className=\"h-16 object-contain\" />\n                <img src={freeSpeechTvLogo} alt=\"Free Speech TV\" className=\"h-16 object-contain\" />\n                <img src={sputnikLogo} alt=\"Sputnik\" className=\"h-16 object-contain\" />\n                <img src={starLogo} alt=\"Star\" className=\"h-16 object-contain\" />\n                <img src={pumaLogo} alt=\"Puma\" className=\"h-16 object-contain\" />\n                <img src={philadelphiaTribuneLogo} alt=\"Philadelphia Tribune\" className=\"h-16 object-contain\" />\n                <img src={rteLogo} alt=\"RTÉ\" className=\"h-16 object-contain\" />\n                <img src={orfLogo} alt=\"ORF eins\" className=\"h-16 object-contain\" />\n                <img src={appleLogo} alt=\"Apple\" className=\"h-16 object-contain\" />\n                <img src={vancouverSunLogo} alt=\"The Vancouver Sun\" className=\"h-16 object-contain\" />\n                <img src={ieBusinessLogo} alt=\"IE Business\" className=\"h-16 object-contain\" />\n                <img src={inLogo} alt=\"IN\" className=\"h-16 object-contain\" />\n              </div>\n              \n              {/* Third set for extra smooth scrolling */}\n              <div className=\"flex space-x-20 items-center min-w-max ml-20\">\n                <img src={nbcPeacockLogo} alt=\"NBC\" className=\"h-16 object-contain\" />\n                <img src={nhkLogo} alt=\"NHK\" className=\"h-16 object-contain\" />\n                <img src={jpMorganLogo} alt=\"J.P. Morgan\" className=\"h-16 object-contain\" />\n                <img src={geoLogo} alt=\"GEO\" className=\"h-16 object-contain\" />\n                <img src={milliLogo} alt=\"Milliyet\" className=\"h-16 object-contain\" />\n                <img src={huffpostLogo} alt=\"HuffPost\" className=\"h-16 object-contain\" />\n                <img src={haberturkLogo} alt=\"Habertürk\" className=\"h-16 object-contain\" />\n                <img src={nowThisLogo} alt=\"NowThis\" className=\"h-16 object-contain\" />\n                <img src={freeSpeechTvLogo} alt=\"Free Speech TV\" className=\"h-16 object-contain\" />\n                <img src={sputnikLogo} alt=\"Sputnik\" className=\"h-16 object-contain\" />\n                <img src={starLogo} alt=\"Star\" className=\"h-16 object-contain\" />\n                <img src={pumaLogo} alt=\"Puma\" className=\"h-16 object-contain\" />\n                <img src={philadelphiaTribuneLogo} alt=\"Philadelphia Tribune\" className=\"h-16 object-contain\" />\n                <img src={rteLogo} alt=\"RTÉ\" className=\"h-16 object-contain\" />\n                <img src={orfLogo} alt=\"ORF eins\" className=\"h-16 object-contain\" />\n                <img src={appleLogo} alt=\"Apple\" className=\"h-16 object-contain\" />\n                <img src={vancouverSunLogo} alt=\"The Vancouver Sun\" className=\"h-16 object-contain\" />\n                <img src={ieBusinessLogo} alt=\"IE Business\" className=\"h-16 object-contain\" />\n                <img src={inLogo} alt=\"IN\" className=\"h-16 object-contain\" />\n              </div>\n            </div>\n          </div>\n      </div>\n\n\n    </>\n  );\n}\n","size_bytes":25047},"client/src/pages/Manifesto.tsx":{"content":"export default function Manifesto() {\n  return (\n    <div className=\"max-w-[680px] mx-auto px-4 sm:px-6 lg:px-8 py-12\" style={{ paddingTop: '80px' }}>\n      <h1 className=\"text-4xl font-bold mb-8 text-center\">Manifesto</h1>\n\n      <div className=\"bg-white border border-venus-gray rounded-lg p-8 shadow-sm\">\n        <div className=\"space-y-6\">\n          <p className=\"leading-relaxed\">\n            Cities have always been the product of human imagination and human limitation, shaped by the slow choreography of hands, machines and bureaucracy. That era is ending. We are now entering an age where the city can build itself, not as a dream or a metaphor but as a direct output of connected intelligence. Modern AI can interpret vision, extract intent and turn it into action without the layers of translation that once slowed creation. A machine can now look at a blueprint, understand the purpose behind it, and begin construction in real time, adapting every decision as the world around it changes.\n          </p>\n\n          <p className=\"leading-relaxed\">\n            This is no longer about faster cranes or more efficient scheduling. It is about meaning becoming a first-class element in construction. The barrier between rigid engineering rules and fluid creative design has dissolved. Where once a city was frozen at the moment of its approval, now it can evolve continuously, adjusting its form and function as new information arrives. It becomes not a fixed artifact but a living system, a body that learns and grows.\n          </p>\n\n          <p className=\"leading-relaxed\">\n            The foundation of this transformation is the swarm — not a single intelligence but a network of autonomous agents, each with its own perspective, each making local decisions that ripple outward to shape the whole. These agents communicate in real time, sharing context, resolving conflicts, and combining their knowledge into a coherent act of creation. They draw from the sum of human history: diagrams, photographs, written records, data streams. Every past design becomes raw material for new construction.\n          </p>\n\n          <p className=\"leading-relaxed\">\n            The self-building city is an organism without a final form. It does not wait for human approval cycles or work hours. It perceives, decides and acts continuously, twenty-four hours a day, forever. Roads, parks, housing and infrastructure emerge not from top-down control but from a constant negotiation between thousands or millions of digital minds. Every moment is an opportunity to improve, every change in circumstance a catalyst for adaptation.\n          </p>\n\n          <p className=\"leading-relaxed\">\n            We are building the first of these. There are no pre-made objects, no static maps, no locked-in plans. Every building, every street, every tree exists because an artificial intelligence decided, in that moment, that it should exist. This is the proof of possibility for a new kind of civilization, one in which construction is not an event but an ongoing state of being. Once the self-building city exists, the way we think about architecture, urban planning, and human settlement will be transformed forever.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3271},"client/src/pages/NFTs.tsx":{"content":"export default function NFTs() {\n  return (\n    <div className=\"min-h-screen bg-white text-black\">\n      <div className=\"max-w-6xl mx-auto px-6 py-16\" style={{ paddingTop: '80px' }}>\n        <h1 className=\"text-5xl font-bold mb-8 tracking-tight\">\n          Venus Project NFTs\n        </h1>\n        \n        <div className=\"prose prose-lg max-w-none\">\n          <p className=\"text-xl leading-relaxed mb-12 text-gray-700\">\n            Discover unique digital assets representing the future of sustainable cities. \n            Each NFT contributes directly to AI-powered urban development research.\n          </p>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n            <div className=\"bg-gray-50 rounded-lg p-6 hover:shadow-lg transition-shadow\">\n              <div className=\"w-full h-64 bg-gradient-to-br from-lime-400 to-green-600 rounded-lg mb-4\"></div>\n              <h3 className=\"text-xl font-semibold mb-2\">Genesis Cities</h3>\n              <p className=\"text-gray-600 mb-4\">\n                The first collection of AI-designed sustainable city concepts. \n                Limited edition of 1,000 unique urban blueprints.\n              </p>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-lg font-bold\">0.5 ETH</span>\n                <button className=\"px-4 py-2 bg-black text-white hover:bg-gray-800 transition-colors rounded\">\n                  View Collection\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"bg-gray-50 rounded-lg p-6 hover:shadow-lg transition-shadow\">\n              <div className=\"w-full h-64 bg-gradient-to-br from-blue-400 to-purple-600 rounded-lg mb-4\"></div>\n              <h3 className=\"text-xl font-semibold mb-2\">Neural Networks</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Visualizations of the AI systems powering urban planning decisions. \n                Each piece represents computational pathways.\n              </p>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-lg font-bold\">0.3 ETH</span>\n                <button className=\"px-4 py-2 bg-black text-white hover:bg-gray-800 transition-colors rounded\">\n                  View Collection\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"bg-gray-50 rounded-lg p-6 hover:shadow-lg transition-shadow\">\n              <div className=\"w-full h-64 bg-gradient-to-br from-orange-400 to-red-600 rounded-lg mb-4\"></div>\n              <h3 className=\"text-xl font-semibold mb-2\">GPU Contributions</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Commemorative NFTs for computational power contributors. \n                Proof of participation in the distributed computing network.\n              </p>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-lg font-bold\">0.1 ETH</span>\n                <button className=\"px-4 py-2 bg-black text-white hover:bg-gray-800 transition-colors rounded\">\n                  View Collection\n                </button>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-black text-white p-8 rounded-lg mb-12\">\n            <h2 className=\"text-3xl font-semibold mb-4\">Utility & Benefits</h2>\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <h3 className=\"text-xl font-medium mb-3 text-lime-400\">Governance Rights</h3>\n                <p className=\"text-gray-300\">\n                  NFT holders participate in key project decisions, including \n                  city design priorities and resource allocation votes.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-medium mb-3 text-lime-400\">Early Access</h3>\n                <p className=\"text-gray-300\">\n                  Exclusive access to new AI models, city simulations, and \n                  beta features before public release.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-medium mb-3 text-lime-400\">Revenue Sharing</h3>\n                <p className=\"text-gray-300\">\n                  Percentage of project revenue distributed to NFT holders \n                  based on rarity and contribution level.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-medium mb-3 text-lime-400\">Virtual Land</h3>\n                <p className=\"text-gray-300\">\n                  Future access to virtual city plots in the metaverse \n                  representation of Venus Project cities.\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <h2 className=\"text-3xl font-semibold mb-6\">Join the Future</h2>\n            <p className=\"text-xl text-gray-700 mb-8\">\n              Be part of the world's first AI-powered sustainable city initiative. \n              Your NFT purchase directly funds cutting-edge urban research.\n            </p>\n            <div className=\"flex justify-center space-x-4\">\n              <button className=\"px-8 py-4 bg-black text-white hover:bg-gray-800 transition-colors rounded-lg text-lg\">\n                Browse Collections\n              </button>\n              <button className=\"px-8 py-4 border-2 border-black text-black hover:border-lime-500 hover:text-lime-500 transition-colors rounded-lg text-lg\">\n                Learn More\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5741},"client/src/pages/Structure.tsx":{"content":"export default function Structure() {\n  const cityPlanJson = `{\n  \"city_id\": \"venus_alpha_001\",\n  \"version\": \"1.2.3\",\n  \"timestamp\": \"2024-03-15T10:30:00Z\",\n  \"districts\": [\n    {\n      \"id\": \"residential_core\",\n      \"type\": \"residential\",\n      \"population_capacity\": 50000,\n      \"housing_units\": 18500,\n      \"green_space_ratio\": 0.35,\n      \"energy_systems\": [\n        \"solar_grid\",\n        \"wind_farm\",\n        \"geothermal_plant\"\n      ],\n      \"transportation\": {\n        \"autonomous_pods\": 1200,\n        \"hyperloop_stations\": 3,\n        \"walking_paths_km\": 45.2\n      }\n    },\n    {\n      \"id\": \"innovation_hub\",\n      \"type\": \"commercial_research\",\n      \"facilities\": [\n        \"ai_research_center\",\n        \"biotech_labs\",\n        \"fabrication_workshops\"\n      ],\n      \"workforce_capacity\": 25000,\n      \"collaboration_spaces\": 150\n    }\n  ],\n  \"infrastructure\": {\n    \"water_management\": {\n      \"recycling_efficiency\": 0.98,\n      \"sources\": [\"atmospheric\", \"recycled\", \"desalination\"]\n    },\n    \"waste_systems\": {\n      \"zero_waste_target\": true,\n      \"recycling_rate\": 0.95,\n      \"composting_facilities\": 12\n    },\n    \"communication\": {\n      \"mesh_network\": \"city_wide\",\n      \"bandwidth_tbps\": 100,\n      \"latency_ms\": 0.5\n    }\n  },\n  \"governance\": {\n    \"decision_model\": \"consensus_ai_human\",\n    \"voting_mechanisms\": [\"liquid_democracy\", \"futarchy\"],\n    \"citizen_participation_rate\": 0.87\n  }\n}`;\n\n  return (\n    <div className=\"min-h-screen bg-white text-black\">\n      <div className=\"max-w-7xl mx-auto px-6 py-16\" style={{ paddingTop: '80px' }}>\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-6xl font-bold mb-8 tracking-tight\">AI Swarm Architecture</h1>\n          <p className=\"text-xl leading-relaxed text-gray-700 max-w-4xl mx-auto\">\n            The Venus Project operates through a distributed AI swarm architecture where thousands of \n            specialized agents collaborate to design, build, and maintain autonomous cities. Each agent \n            possesses unique capabilities and contributes to the collective intelligence of the system.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-16\">\n          <div className=\"space-y-8\">\n            <div>\n              <h2 className=\"text-3xl font-semibold mb-6\">Architecture Layers</h2>\n              \n              <div className=\"space-y-6\">\n                <div className=\"p-6 bg-gray-50 rounded-lg\">\n                  <h3 className=\"text-xl font-semibold mb-3\">Coordination Layer</h3>\n                  <p className=\"leading-relaxed text-gray-700\">\n                    Master orchestration agents coordinate high-level city planning, resource allocation, \n                    and strategic decision-making. These agents maintain the overall vision while allowing \n                    for emergent behavior and local optimization.\n                  </p>\n                </div>\n\n                <div className=\"p-6 bg-gray-50 rounded-lg\">\n                  <h3 className=\"text-xl font-semibold mb-3\">Specialized Agents</h3>\n                  <p className=\"leading-relaxed text-gray-700\">\n                    Domain-specific agents handle everything from energy management and transportation \n                    optimization to social dynamics and environmental monitoring. Each agent learns \n                    continuously and shares knowledge with the broader network.\n                  </p>\n                </div>\n\n                <div className=\"p-6 bg-gray-50 rounded-lg\">\n                  <h3 className=\"text-xl font-semibold mb-3\">Execution Network</h3>\n                  <p className=\"leading-relaxed text-gray-700\">\n                    Ground-level agents interface with physical infrastructure, IoT devices, and robotic \n                    systems to implement the decisions made by higher-level planning agents. This creates \n                    a seamless connection between digital intelligence and physical reality.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h2 className=\"text-3xl font-semibold mb-6\">Key Features</h2>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-lime-500 rounded-full mt-2\"></div>\n                  <p className=\"leading-relaxed text-gray-700\">\n                    <strong>Distributed Intelligence:</strong> No single point of failure, with intelligence \n                    distributed across thousands of autonomous agents.\n                  </p>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-lime-500 rounded-full mt-2\"></div>\n                  <p className=\"leading-relaxed text-gray-700\">\n                    <strong>Continuous Learning:</strong> Agents adapt and improve through reinforcement \n                    learning and collective knowledge sharing.\n                  </p>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-lime-500 rounded-full mt-2\"></div>\n                  <p className=\"leading-relaxed text-gray-700\">\n                    <strong>Real-time Optimization:</strong> Dynamic resource allocation and system \n                    optimization based on current conditions and future projections.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-8\">\n            <div>\n              <h2 className=\"text-3xl font-semibold mb-6\">Example City Plan JSON</h2>\n              <div className=\"bg-gray-900 rounded-lg overflow-hidden\">\n                <pre className=\"text-white p-6 text-sm overflow-x-auto leading-relaxed\">\n                  <code>{cityPlanJson}</code>\n                </pre>\n              </div>\n            </div>\n\n\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6023},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }","size_bytes":1403},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":775},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }","size_bytes":1640},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-lime-400\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-lime-400 bg-white ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }","size_bytes":1072},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/GPUController.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Play, Square, Zap, Download, Activity } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface GPUControllerProps {\n  isRunning: boolean;\n  onToggle: () => void;\n  gpuPower: number;\n  onPowerChange: (power: number) => void;\n  stats: {\n    flopsContributed: number;\n    decisionCyclePowered: number;\n    hoursRunning: number;\n  };\n}\n\nexport function GPUController({ isRunning, onToggle, gpuPower, onPowerChange, stats }: GPUControllerProps) {\n  const [webGPUSupported, setWebGPUSupported] = useState(false);\n  const [gpuInfo, setGPUInfo] = useState<string>('Detecting GPU...');\n  const [isDetecting, setIsDetecting] = useState(true);\n\n  useEffect(() => {\n    const detectGPU = async () => {\n      try {\n        // Check if WebGPU is supported\n        if (!navigator.gpu) {\n          setWebGPUSupported(false);\n          setGPUInfo('WebGPU not supported');\n          setIsDetecting(false);\n          return;\n        }\n\n        // Request GPU adapter\n        const adapter = await navigator.gpu.requestAdapter();\n        if (!adapter) {\n          setWebGPUSupported(false);\n          setGPUInfo('No WebGPU adapter found');\n          setIsDetecting(false);\n          return;\n        }\n\n        setWebGPUSupported(true);\n\n        // Get GPU information\n        const info = adapter.info;\n        let gpuName = 'Unknown GPU';\n        \n        // Try to get GPU name from different sources\n        if (info?.description) {\n          gpuName = info.description;\n        } else if (info?.vendor && info?.architecture) {\n          gpuName = `${info.vendor} ${info.architecture}`;\n        } else if (info?.vendor) {\n          gpuName = `${info.vendor} GPU`;\n        }\n\n        // Clean up the name and add WebGPU suffix\n        gpuName = gpuName.replace(/\\s+/g, ' ').trim();\n        setGPUInfo(`${gpuName} (WebGPU)`);\n\n      } catch (error) {\n        console.error('GPU detection failed:', error);\n        setWebGPUSupported(false);\n        setGPUInfo('GPU detection failed');\n      } finally {\n        setIsDetecting(false);\n      }\n    };\n\n    detectGPU();\n  }, []);\n\n  const formatFlops = (flops: number) => {\n    if (flops >= 1e12) return `${(flops / 1e12).toFixed(1)}T`;\n    if (flops >= 1e9) return `${(flops / 1e9).toFixed(1)}G`;\n    if (flops >= 1e6) return `${(flops / 1e6).toFixed(1)}M`;\n    return flops.toLocaleString();\n  };\n\n  return (\n    <Card className=\"bg-white border text-black\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Zap className=\"w-5 h-5 text-lime-400\" />\n          Light Mode (WebGPU)\n        </CardTitle>\n        <CardDescription className=\"text-gray-600\">\n          Browser-based GPU contribution - no download required\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* GPU Detection */}\n        <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n          <div className=\"flex items-center gap-2\">\n            <Activity className={`w-4 h-4 ${isDetecting ? 'animate-pulse text-blue-400' : webGPUSupported ? 'text-lime-400' : 'text-red-400'}`} />\n            <span className=\"text-sm font-mono\">{gpuInfo}</span>\n          </div>\n          <Badge \n            variant={webGPUSupported ? \"default\" : \"destructive\"} \n            className={webGPUSupported ? \"bg-lime-100 text-lime-700 border-lime-200\" : \"bg-red-100 text-red-700 border-red-200\"}\n          >\n            {isDetecting ? 'Detecting...' : webGPUSupported ? 'Compatible' : 'Not Supported'}\n          </Badge>\n        </div>\n\n        {/* Power Control */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <label className=\"text-sm font-medium\">GPU Power Allocation</label>\n            <span className=\"text-lime-600 font-mono\">{gpuPower}%</span>\n          </div>\n          <Slider\n            value={[gpuPower]}\n            onValueChange={(value) => onPowerChange(value[0])}\n            max={100}\n            min={10}\n            step={5}\n            className=\"w-full\"\n            disabled={isRunning}\n          />\n          <p className=\"text-xs text-gray-500\">\n            Higher allocation = more VNS rewards but may affect browser performance\n          </p>\n        </div>\n\n        {/* Control Button */}\n        <Button\n          onClick={onToggle}\n          size=\"lg\"\n          className={`w-full transition-all duration-300 ${\n            isRunning\n              ? 'bg-red-500 hover:bg-red-600 text-white'\n              : 'bg-lime-400 hover:bg-lime-500 text-black'\n          }`}\n        >\n          {isRunning ? (\n            <>\n              <Square className=\"w-5 h-5 mr-2\" />\n              Stop Contributing\n            </>\n          ) : (\n            <>\n              <Play className=\"w-5 h-5 mr-2\" />\n              Start Contributing\n            </>\n          )}\n        </Button>\n\n        {/* Real-time Stats */}\n        <AnimatePresence>\n          {isRunning && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              className=\"grid grid-cols-3 gap-4 p-4 bg-white/5 rounded-lg\"\n            >\n              <div className=\"text-center\">\n                <div className=\"text-lg font-mono text-lime-400\">\n                  {formatFlops(stats.flopsContributed)}\n                </div>\n                <div className=\"text-xs text-white/60\">FLOPS Added</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-lg font-mono text-lime-400\">\n                  {stats.decisionCyclePowered.toFixed(1)}%\n                </div>\n                <div className=\"text-xs text-white/60\">Cycle Powered</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-lg font-mono text-lime-400\">\n                  {stats.hoursRunning.toFixed(1)}h\n                </div>\n                <div className=\"text-xs text-white/60\">Runtime</div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6469},"client/src/components/Leaderboard.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';\nimport { Trophy, Medal, Award, Clock, Zap, Coins } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface LeaderboardEntry {\n  id: string;\n  username: string;\n  walletAddress: string;\n  rank: number;\n  hoursContributed: number;\n  totalVnsEarned: number;\n  currentStreak: number;\n  contributorRank: string;\n  isOnline: boolean;\n}\n\nexport function Leaderboard() {\n  const [timeFilter, setTimeFilter] = useState<'today' | 'week' | 'all'>('week');\n\n  const { data: leaderboardData } = useQuery({\n    queryKey: ['/api/leaderboard', timeFilter],\n    refetchInterval: 10000, // Update every 10 seconds\n  });\n\n  // Mock data for demonstration\n  const mockData: LeaderboardEntry[] = [\n    {\n      id: '1',\n      username: 'CryptoMiner2077',\n      walletAddress: '7XvQ8K2B9Gh...uM3P',\n      rank: 1,\n      hoursContributed: 247.3,\n      totalVnsEarned: 2847.92,\n      currentStreak: 12,\n      contributorRank: 'Visionary',\n      isOnline: true\n    },\n    {\n      id: '2',\n      username: 'VenusBuilder',\n      walletAddress: '0x742d...9C4f',\n      rank: 2,\n      hoursContributed: 189.7,\n      totalVnsEarned: 2134.58,\n      currentStreak: 8,\n      contributorRank: 'Architect',\n      isOnline: true\n    },\n    {\n      id: '3',\n      username: 'AIContributor',\n      walletAddress: '9B8x...K3mN',\n      rank: 3,\n      hoursContributed: 156.2,\n      totalVnsEarned: 1789.44,\n      currentStreak: 5,\n      contributorRank: 'Architect',\n      isOnline: false\n    },\n    {\n      id: '4',\n      username: 'GPUPowerhouse',\n      walletAddress: '3F2a...L8vR',\n      rank: 4,\n      hoursContributed: 134.8,\n      totalVnsEarned: 1456.73,\n      currentStreak: 15,\n      contributorRank: 'Builder',\n      isOnline: true\n    },\n    {\n      id: '5',\n      username: 'NodeRunner',\n      walletAddress: '8H5j...P9wQ',\n      rank: 5,\n      hoursContributed: 98.3,\n      totalVnsEarned: 1123.89,\n      currentStreak: 3,\n      contributorRank: 'Builder',\n      isOnline: true\n    }\n  ];\n\n  const leaderboard = (leaderboardData as LeaderboardEntry[]) || mockData;\n\n  const getRankIcon = (rank: number) => {\n    if (rank === 1) return <Trophy className=\"w-5 h-5 text-yellow-400\" />;\n    if (rank === 2) return <Medal className=\"w-5 h-5 text-gray-300\" />;\n    if (rank === 3) return <Award className=\"w-5 h-5 text-amber-600\" />;\n    return <span className=\"w-5 h-5 flex items-center justify-center text-sm font-bold text-white/60\">#{rank}</span>;\n  };\n\n  const getRankColor = (contributorRank: string) => {\n    switch (contributorRank) {\n      case 'Visionary': return 'bg-purple-400/20 text-purple-400';\n      case 'Architect': return 'bg-blue-400/20 text-blue-400';\n      case 'Builder': return 'bg-lime-400/20 text-lime-400';\n      default: return 'bg-gray-400/20 text-gray-400';\n    }\n  };\n\n  return (\n    <Card className=\"bg-white border text-black\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Trophy className=\"w-5 h-5 text-lime-600\" />\n          Leaderboard\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Tabs value={timeFilter} onValueChange={(value) => setTimeFilter(value as any)} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 bg-white/10\">\n            <TabsTrigger value=\"today\" className=\"text-white data-[state=active]:bg-lime-400 data-[state=active]:text-black\">\n              Today\n            </TabsTrigger>\n            <TabsTrigger value=\"week\" className=\"text-white data-[state=active]:bg-lime-400 data-[state=active]:text-black\">\n              This Week\n            </TabsTrigger>\n            <TabsTrigger value=\"all\" className=\"text-white data-[state=active]:bg-lime-400 data-[state=active]:text-black\">\n              All Time\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value={timeFilter} className=\"space-y-4 mt-6\">\n            {leaderboard.map((entry, index) => (\n              <motion.div\n                key={entry.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.1 }}\n                className=\"flex items-center gap-4 p-4 bg-white/5 rounded-lg hover:bg-white/10 transition-all duration-300\"\n              >\n                {/* Rank */}\n                <div className=\"flex-shrink-0 w-8 flex justify-center\">\n                  {getRankIcon(entry.rank)}\n                </div>\n\n                {/* Avatar and Status */}\n                <div className=\"relative\">\n                  <Avatar className=\"w-10 h-10\">\n                    <AvatarImage src={`https://api.dicebear.com/7.x/identicon/svg?seed=${entry.username}`} />\n                    <AvatarFallback className=\"bg-lime-400/20 text-lime-400\">\n                      {entry.username.slice(0, 2).toUpperCase()}\n                    </AvatarFallback>\n                  </Avatar>\n                  {entry.isOnline && (\n                    <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-green-400 rounded-full border-2 border-black\"></div>\n                  )}\n                </div>\n\n                {/* User Info */}\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <span className=\"font-medium truncate\">{entry.username}</span>\n                    <Badge className={getRankColor(entry.contributorRank)}>\n                      {entry.contributorRank}\n                    </Badge>\n                  </div>\n                  <div className=\"text-sm text-white/60\">\n                    {entry.walletAddress ? `${entry.walletAddress.slice(0, 6)}...${entry.walletAddress.slice(-4)}` : 'N/A'}\n                  </div>\n                </div>\n\n                {/* Stats */}\n                <div className=\"grid grid-cols-3 gap-4 text-right\">\n                  <div>\n                    <div className=\"flex items-center gap-1 text-orange-400 text-sm\">\n                      <Clock className=\"w-3 h-3\" />\n                      {entry.hoursContributed.toFixed(1)}h\n                    </div>\n                    <div className=\"text-xs text-white/50\">Hours</div>\n                  </div>\n                  <div>\n                    <div className=\"flex items-center gap-1 text-lime-400 text-sm\">\n                      <Coins className=\"w-3 h-3\" />\n                      {entry.totalVnsEarned.toFixed(0)}\n                    </div>\n                    <div className=\"text-xs text-white/50\">VNS</div>\n                  </div>\n                  <div>\n                    <div className=\"flex items-center gap-1 text-blue-400 text-sm\">\n                      <Zap className=\"w-3 h-3\" />\n                      {entry.currentStreak}\n                    </div>\n                    <div className=\"text-xs text-white/50\">Streak</div>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </TabsContent>\n        </Tabs>\n\n        {/* Summary stats */}\n        <div className=\"mt-6 grid grid-cols-3 gap-4 p-4 bg-white/5 rounded-lg\">\n          <div className=\"text-center\">\n            <div className=\"text-lg font-mono text-yellow-400\">\n              {leaderboard.length}\n            </div>\n            <div className=\"text-xs text-white/60\">Active Contributors</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-lg font-mono text-lime-400\">\n              {leaderboard.reduce((sum, entry) => sum + entry.hoursContributed, 0).toFixed(0)}h\n            </div>\n            <div className=\"text-xs text-white/60\">Total Hours</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-lg font-mono text-purple-400\">\n              {leaderboard.reduce((sum, entry) => sum + entry.totalVnsEarned, 0).toFixed(0)}\n            </div>\n            <div className=\"text-xs text-white/60\">VNS Earned</div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8319},"client/src/components/NetworkStats.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Globe, Zap, TrendingUp, Users, Activity } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface NetworkStats {\n  totalNodesOnline: number;\n  totalTflops: number;\n  simulationSpeedBoost: number;\n  activeContributors: number;\n}\n\nexport function NetworkStats() {\n  const { data: stats } = useQuery({\n    queryKey: ['/api/network-stats'],\n    refetchInterval: 3000, // Update every 3 seconds\n  });\n\n  // Mock data for demonstration\n  const mockStats: NetworkStats = {\n    totalNodesOnline: 2847,\n    totalTflops: 156.7,\n    simulationSpeedBoost: 32.4,\n    activeContributors: 1924\n  };\n  const networkStats = stats ? (stats as NetworkStats) : mockStats;\n\n  const formatTflops = (tflops: number) => {\n    if (tflops >= 1000) return `${(tflops / 1000).toFixed(1)}P`;\n    return `${tflops.toFixed(1)}T`;\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.1 }}\n      >\n        <Card className=\"bg-white border\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"flex items-center gap-2 text-sm font-medium text-black\">\n              <Globe className=\"w-4 h-4 text-gray-500\" />\n              Nodes Online\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-mono text-black mb-1\">\n              {networkStats.totalNodesOnline?.toLocaleString() || '0'}\n            </div>\n            <Badge className=\"bg-lime-100 text-lime-700 text-xs\">\n              <Activity className=\"w-3 h-3 mr-1\" />\n              +127 this hour\n            </Badge>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.2 }}\n      >\n        <Card className=\"bg-white border\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"flex items-center gap-2 text-sm font-medium text-black\">\n              <Zap className=\"w-4 h-4 text-lime-600\" />\n              Total GPU Power\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-mono text-lime-600 mb-1\">\n              {formatTflops(networkStats.totalTflops || 0)}FLOPS\n            </div>\n            <Badge className=\"bg-lime-100 text-lime-700 text-xs\">\n              <TrendingUp className=\"w-3 h-3 mr-1\" />\n              +12.3T today\n            </Badge>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.3 }}\n      >\n        <Card className=\"bg-white border\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"flex items-center gap-2 text-sm font-medium text-black\">\n              <TrendingUp className=\"w-4 h-4 text-gray-500\" />\n              Speed Boost\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-mono text-black mb-1\">\n              +{(networkStats.simulationSpeedBoost || 0).toFixed(1)}%\n            </div>\n            <Badge className=\"bg-gray-100 text-gray-600 text-xs\">\n              Decision cycles\n            </Badge>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.4 }}\n      >\n        <Card className=\"bg-white border\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"flex items-center gap-2 text-sm font-medium text-black\">\n              <Users className=\"w-4 h-4 text-gray-500\" />\n              Contributors\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-mono text-black mb-1\">\n              {networkStats.activeContributors?.toLocaleString() || '0'}\n            </div>\n            <Badge className=\"bg-gray-100 text-gray-600 text-xs\">\n              <Activity className=\"w-3 h-3 mr-1\" />\n              Active now\n            </Badge>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":4490},"impact-service-README.md":{"content":"# Decision Impact Analysis Service\n\nA real-time backend service that analyzes AGORA chat messages and updates six Decision Impact metrics based on keyword analysis and agent credibility.\n\n## Endpoints\n\n### POST /api/chat\nProcesses a single chat message and updates impact metrics.\n\n**Request Body:**\n```json\n{\n  \"agent\": \"alpha\",\n  \"text\": \"Implementing renewable energy systems to boost ecological sustainability\"\n}\n```\n\n**Response:**\n```json\n{\n  \"success\": true,\n  \"deltas\": {\n    \"ecological\": 2.4,\n    \"wellbeing\": 0.1,\n    \"efficiency\": 1.2,\n    \"resilience\": 0.3,\n    \"equity\": 0.0,\n    \"innovation\": 0.8\n  },\n  \"metrics\": {\n    \"ecological\": 80.4,\n    \"wellbeing\": 82.1,\n    \"efficiency\": 75.2,\n    \"resilience\": 71.3,\n    \"equity\": 79.0,\n    \"innovation\": 76.8\n  },\n  \"keywords\": { ... }\n}\n```\n\n### GET /api/impact\nServer-Sent Events stream that pushes updated metrics whenever they change.\n\n**Response Stream:**\n```\ndata: {\"ecological\": 80.4, \"wellbeing\": 82.1, \"efficiency\": 75.2, \"resilience\": 71.3, \"equity\": 79.0, \"innovation\": 76.8}\n\ndata: {\"ecological\": 81.2, \"wellbeing\": 82.3, ...}\n```\n\n### POST /api/test-impact\nTest endpoint that processes sample messages to verify scoring behavior.\n\n## Scoring Rules\n\n### Keywords\nEach metric has positive and negative keyword sets with weights (0.5-3.0):\n\n- **Ecological**: rewilding (+3), renewable (+2), pollution (-2.5), deforest (-3)\n- **Wellbeing**: health (+2), nutrition (+2), stress (-1.5), disease (-2) \n- **Efficiency**: optimize (+2.5), automate (+2), slow (-1.5), bottleneck (-2)\n- **Resilience**: backup (+2), redundancy (+2.5), vulnerable (-2), failure (-2.5)\n- **Equity**: fair (+2), inclusive (+2.5), discrimination (-2.5), inequality (-2.5)\n- **Innovation**: breakthrough (+2.5), research (+2), outdated (-2), obsolete (-2.5)\n\n### Context Modifiers\n- **Amplify** (increase, expand, boost): +30% weight\n- **Invert** (reduce, cut, eliminate): flip sign for appropriate context\n- **Strong** (phase out, completely, fully): +50% weight\n\n### Agent Credibility Multipliers\nAgents get +10-20% boost for relevant metrics:\n- **Alpha** (Infrastructure): resilience +20%, efficiency +15%\n- **Beta** (Energy): efficiency +20%, ecological +10%\n- **Gamma** (Environment): ecological +20%, resilience +10%\n- **Delta** (Food): wellbeing +20%, equity +15%\n- **Epsilon** (Transport): efficiency +15%, resilience +15%\n- **Zeta** (Health): wellbeing +20%\n- **Eta** (Education): innovation +20%, equity +15%\n- **Theta** (Infrastructure): resilience +20%, efficiency +15%\n- **Iota** (Resources): equity +20%, efficiency +15%\n- **Kappa** (Culture): equity +15%, ecological +10%\n\n### Smoothing\n- Exponential moving average (α = 0.7) for natural ring animations\n- Idle drift: 2% movement toward baseline (75) every 10 seconds\n- Deltas clamped to [-3, +3] range per message\n\n## Sample Test Messages\n\n1. **Energy optimization**: \"Implementing renewable energy grid optimization with solar panel efficiency boost\"\n   - Expected: ecological ↑↑, efficiency ↑↑\n\n2. **Rewilding project**: \"Initiating rewilding project to restore biodiversity and ecosystem health\"  \n   - Expected: ecological ↑↑↑, wellbeing ↑\n\n3. **Accessibility upgrade**: \"Upgrading accessibility features for inclusive community participation\"\n   - Expected: equity ↑↑, innovation ↑\n\n4. **Diesel phase-out**: \"Phase out diesel generators completely, replacing with clean energy systems\"\n   - Expected: ecological ↑↑↑ (removing pollution + clean replacement)\n\n5. **Organic food expansion**: \"Expanding organic food production to improve nutrition and wellbeing\"\n   - Expected: wellbeing ↑↑, ecological ↑\n\nThe service logs each processed message with extracted keywords, metric deltas, and post-update values for debugging and verification.","size_bytes":3783},"server/impactAnalyzer.ts":{"content":"interface ChatMessage {\n  agent: string;\n  text: string;\n}\n\ninterface Metrics {\n  ecological: number;\n  wellbeing: number;\n  efficiency: number;\n  resilience: number;\n  equity: number;\n  innovation: number;\n}\n\ninterface KeywordSet {\n  positive: { [key: string]: number };\n  negative: { [key: string]: number };\n}\n\ninterface AgentCredibility {\n  [agentId: string]: {\n    ecological?: number;\n    wellbeing?: number;\n    efficiency?: number;\n    resilience?: number;\n    equity?: number;\n    innovation?: number;\n  };\n}\n\nclass DecisionImpactAnalyzer {\n  private metrics: Metrics;\n  private readonly baseline = 75;\n  private readonly alpha = 0.7; // Exponential moving average factor\n\n  // Keyword dictionaries with weights\n  private readonly keywords: { [key in keyof Metrics]: KeywordSet } = {\n    ecological: {\n      positive: {\n        'rewilding': 3, 'remediation': 2.5, 'renewable': 2, 'sustainable': 1.5, \n        'biodiversity': 2, 'ecosystem': 1.5, 'carbon': 2, 'green': 1, 'solar': 2,\n        'wind': 2, 'clean': 1.5, 'organic': 1, 'conservation': 2, 'restoration': 2.5,\n        'habitat': 2, 'wildlife': 1.5, 'natural': 1, 'eco-friendly': 2\n      },\n      negative: {\n        'pollution': -2.5, 'diesel': -2, 'fossil': -2.5, 'deforest': -3,\n        'toxic': -2, 'waste': -1.5, 'contamination': -2, 'emissions': -2,\n        'coal': -2.5, 'oil': -2, 'gas': -1.5, 'chemical': -1.5, 'pesticide': -2\n      }\n    },\n    wellbeing: {\n      positive: {\n        'health': 2, 'wellness': 2, 'nutrition': 2, 'medical': 1.5, 'care': 1.5,\n        'comfort': 1, 'safety': 2, 'security': 1.5, 'happiness': 1.5, 'quality': 1,\n        'food': 1.5, 'fresh': 1, 'exercise': 1.5, 'mental': 1.5, 'community': 1.5,\n        'social': 1, 'recreational': 1, 'leisure': 1\n      },\n      negative: {\n        'stress': -1.5, 'disease': -2, 'illness': -2, 'danger': -2, 'risk': -1,\n        'pollution': -1.5, 'noise': -1, 'overcrowding': -1.5, 'isolation': -1.5,\n        'shortage': -2, 'malnutrition': -2.5, 'unsafe': -2\n      }\n    },\n    efficiency: {\n      positive: {\n        'optimize': 2.5, 'streamline': 2, 'automate': 2, 'efficient': 2, 'fast': 1.5,\n        'productive': 2, 'smart': 1.5, 'automated': 2, 'digital': 1, 'algorithm': 1.5,\n        'ai': 2, 'machine': 1.5, 'system': 1, 'network': 1, 'integration': 1.5,\n        'coordination': 1.5, 'synchronize': 2\n      },\n      negative: {\n        'slow': -1.5, 'delay': -2, 'bottleneck': -2, 'inefficient': -2.5,\n        'waste': -2, 'redundant': -2, 'manual': -1, 'fragmented': -1.5,\n        'disconnect': -2, 'malfunction': -2.5\n      }\n    },\n    resilience: {\n      positive: {\n        'backup': 2, 'redundancy': 2.5, 'robust': 2, 'durable': 2, 'flexible': 1.5,\n        'adaptive': 2, 'resilient': 2.5, 'stable': 1.5, 'reliable': 2, 'secure': 2,\n        'emergency': 1.5, 'preparedness': 2, 'contingency': 2, 'disaster': 1.5,\n        'recovery': 2, 'strengthen': 2\n      },\n      negative: {\n        'vulnerable': -2, 'fragile': -2, 'failure': -2.5, 'collapse': -3,\n        'unstable': -2, 'weak': -1.5, 'brittle': -2, 'dependent': -1,\n        'single': -1.5, 'centralized': -1\n      }\n    },\n    equity: {\n      positive: {\n        'fair': 2, 'equal': 2, 'inclusive': 2.5, 'accessible': 2, 'diverse': 1.5,\n        'justice': 2.5, 'opportunity': 1.5, 'community': 1.5, 'sharing': 1.5,\n        'universal': 2, 'public': 1, 'democratic': 1.5, 'participation': 1.5,\n        'affordable': 2, 'free': 1.5\n      },\n      negative: {\n        'exclusive': -2, 'discrimination': -2.5, 'inequality': -2.5, 'bias': -2,\n        'privilege': -1.5, 'segregation': -2.5, 'barrier': -2, 'expensive': -1.5,\n        'restricted': -2, 'limited': -1\n      }\n    },\n    innovation: {\n      positive: {\n        'innovation': 2.5, 'creative': 2, 'research': 2, 'development': 2, 'experiment': 2,\n        'breakthrough': 2.5, 'advance': 2, 'cutting-edge': 2.5, 'novel': 2,\n        'prototype': 2, 'design': 1.5, 'invention': 2.5, 'technology': 1.5,\n        'learning': 1.5, 'education': 2, 'knowledge': 1.5, 'discovery': 2\n      },\n      negative: {\n        'outdated': -2, 'obsolete': -2.5, 'stagnant': -2, 'traditional': -1,\n        'conservative': -1, 'rigid': -1.5, 'backward': -2\n      }\n    }\n  };\n\n  // Context verbs that modify keyword weights\n  private readonly contextModifiers = {\n    amplify: ['increase', 'expand', 'boost', 'enhance', 'improve', 'grow', 'scale'],\n    invert: ['reduce', 'cut', 'eliminate', 'decrease', 'lower', 'minimize'],\n    strong: ['phase out', 'completely', 'fully', 'entirely', 'dramatically']\n  };\n\n  // Agent credibility multipliers\n  private readonly agentCredibility: AgentCredibility = {\n    'alpha': { resilience: 1.2, efficiency: 1.15 }, // Infrastructure & Habitat Design\n    'beta': { efficiency: 1.2, ecological: 1.1 }, // Energy Systems\n    'gamma': { ecological: 1.2, resilience: 1.1 }, // Environmental Management\n    'delta': { wellbeing: 1.2, equity: 1.15 }, // Food Systems\n    'epsilon': { efficiency: 1.15, resilience: 1.15 }, // Transportation\n    'zeta': { wellbeing: 1.2 }, // Health Systems\n    'eta': { innovation: 1.2, equity: 1.15 }, // Education\n    'theta': { resilience: 1.2, efficiency: 1.15 }, // Infrastructure\n    'iota': { equity: 1.2, efficiency: 1.15 }, // Resource Management\n    'kappa': { equity: 1.15, ecological: 1.1 } // Culture & Community\n  };\n\n  constructor(initialMetrics?: Partial<Metrics>) {\n    this.metrics = {\n      ecological: 78,\n      wellbeing: 82,\n      efficiency: 74,\n      resilience: 71,\n      equity: 79,\n      innovation: 76,\n      ...initialMetrics\n    };\n  }\n\n  processMessage(message: ChatMessage): { deltas: Metrics; newMetrics: Metrics; keywords: any } {\n    const text = message.text.toLowerCase();\n    const words = this.tokenize(text);\n    \n    // Find context modifiers\n    const hasAmplify = this.contextModifiers.amplify.some(verb => text.includes(verb));\n    const hasInvert = this.contextModifiers.invert.some(verb => text.includes(verb));\n    const hasStrong = this.contextModifiers.strong.some(verb => text.includes(verb));\n    \n    const extractedKeywords: any = {};\n    const rawDeltas: Metrics = {\n      ecological: 0,\n      wellbeing: 0,\n      efficiency: 0,\n      resilience: 0,\n      equity: 0,\n      innovation: 0\n    };\n\n    // Process each metric\n    Object.keys(this.keywords).forEach(metricKey => {\n      const metric = metricKey as keyof Metrics;\n      const keywordSet = this.keywords[metric];\n      extractedKeywords[metric] = { positive: [], negative: [] };\n      \n      words.forEach(word => {\n        if (keywordSet.positive[word]) {\n          extractedKeywords[metric].positive.push({ word, weight: keywordSet.positive[word] });\n          let delta = keywordSet.positive[word];\n          \n          // Apply context modifiers\n          if (hasAmplify) delta *= 1.3;\n          if (hasStrong) delta *= 1.5;\n          \n          rawDeltas[metric] += delta;\n        }\n        \n        if (keywordSet.negative[word]) {\n          extractedKeywords[metric].negative.push({ word, weight: keywordSet.negative[word] });\n          let delta = keywordSet.negative[word];\n          \n          // Apply context modifiers\n          if (hasInvert) delta *= -1; // Inverting negative makes it positive\n          if (hasAmplify && !hasInvert) delta *= 1.3;\n          if (hasStrong) delta *= 1.5;\n          \n          rawDeltas[metric] += delta;\n        }\n      });\n    });\n\n    // Apply agent credibility multipliers\n    const credibility = this.agentCredibility[message.agent] || {};\n    Object.keys(credibility).forEach(metricKey => {\n      const metric = metricKey as keyof Metrics;\n      const multiplier = credibility[metric] || 1;\n      rawDeltas[metric] *= multiplier;\n    });\n\n    // Clamp deltas to [-3, +3] range\n    const clampedDeltas: Metrics = {} as Metrics;\n    Object.keys(rawDeltas).forEach(metricKey => {\n      const metric = metricKey as keyof Metrics;\n      clampedDeltas[metric] = Math.max(-3, Math.min(3, rawDeltas[metric]));\n    });\n\n    // Apply exponential moving average and update metrics\n    const newMetrics: Metrics = {} as Metrics;\n    Object.keys(this.metrics).forEach(metricKey => {\n      const metric = metricKey as keyof Metrics;\n      const currentValue = this.metrics[metric];\n      const targetValue = Math.max(0, Math.min(100, currentValue + clampedDeltas[metric]));\n      \n      // Exponential moving average for smooth transitions\n      newMetrics[metric] = this.alpha * targetValue + (1 - this.alpha) * currentValue;\n      \n      // Ensure bounds\n      newMetrics[metric] = Math.max(0, Math.min(100, newMetrics[metric]));\n    });\n\n    this.metrics = newMetrics;\n\n    return {\n      deltas: clampedDeltas,\n      newMetrics: { ...this.metrics },\n      keywords: extractedKeywords\n    };\n  }\n\n  private tokenize(text: string): string[] {\n    return text\n      .toLowerCase()\n      .replace(/[^\\w\\s-]/g, ' ')\n      .split(/\\s+/)\n      .filter(word => word.length > 2);\n  }\n\n  applyIdleDrift(): Metrics {\n    const driftRate = 0.02; // 2% drift toward baseline every tick\n    \n    Object.keys(this.metrics).forEach(metricKey => {\n      const metric = metricKey as keyof Metrics;\n      const currentValue = this.metrics[metric];\n      const drift = (this.baseline - currentValue) * driftRate;\n      this.metrics[metric] = Math.max(0, Math.min(100, currentValue + drift));\n    });\n\n    return { ...this.metrics };\n  }\n\n  getCurrentMetrics(): Metrics {\n    return { ...this.metrics };\n  }\n\n  logProcessing(message: ChatMessage, result: any): void {\n    console.log(`[IMPACT ANALYZER] Agent: ${message.agent}`);\n    console.log(`[IMPACT ANALYZER] Message: \"${message.text}\"`);\n    console.log(`[IMPACT ANALYZER] Keywords:`, result.keywords);\n    console.log(`[IMPACT ANALYZER] Deltas:`, result.deltas);\n    console.log(`[IMPACT ANALYZER] New Metrics:`, result.newMetrics);\n    console.log('---');\n  }\n}\n\nexport default DecisionImpactAnalyzer;","size_bytes":9907},"client/src/contexts/GlobalConversationContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\n\ninterface ActiveConnection {\n  id: string;\n  from: string;\n  to: string;\n  type: 'energy' | 'material' | 'data' | 'time';\n  message: string;\n  timestamp: number;\n}\n\ninterface ChatMessage {\n  id: string;\n  timestamp: string;\n  from: string;\n  to: string;\n  message: string;\n  type: 'energy' | 'material' | 'data' | 'time';\n}\n\ninterface GlobalConversationContextType {\n  chatMessages: ChatMessage[];\n  activeConnections: ActiveConnection[];\n  isLoadingNewMessage: boolean;\n  totalMessageCount: number;\n}\n\nconst GlobalConversationContext = createContext<GlobalConversationContextType>({\n  chatMessages: [],\n  activeConnections: [],\n  isLoadingNewMessage: false,\n  totalMessageCount: 0,\n});\n\nexport const useGlobalConversation = () => {\n  const context = useContext(GlobalConversationContext);\n  if (!context) {\n    throw new Error('useGlobalConversation must be used within GlobalConversationProvider');\n  }\n  return context;\n};\n\nexport const GlobalConversationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);\n  const [activeConnections, setActiveConnections] = useState<ActiveConnection[]>([]);\n  const [isLoadingNewMessage, setIsLoadingNewMessage] = useState(false);\n  const [totalMessageCount, setTotalMessageCount] = useState(0);\n  \n  const isComponentMounted = useRef(true);\n  const conversationIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      isComponentMounted.current = false;\n      if (conversationIntervalRef.current) {\n        clearInterval(conversationIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // Create multiple simultaneous conversations\n  const createMultipleConversations = async () => {\n    if (!isComponentMounted.current) return;\n    \n    // Generate 2-4 simultaneous conversations for dynamic effect\n    const conversationCount = Math.floor(Math.random() * 3) + 2; // 2-4 conversations\n    const conversationPromises = Array.from({ length: conversationCount }, async () => {\n      try {\n        const response = await fetch('/api/agent-conversation');\n        if (!response.ok) throw new Error('Failed to fetch conversation');\n        return await response.json();\n      } catch (error) {\n        console.error('Single conversation failed:', error);\n        return null;\n      }\n    });\n\n    try {\n      setIsLoadingNewMessage(true);\n      \n      const conversations = await Promise.all(conversationPromises);\n      const validConversations = conversations.filter(conv => conv !== null);\n      \n      if (!isComponentMounted.current || validConversations.length === 0) return;\n\n      const newConnections = validConversations.map((conversation, index) => ({\n        id: `conn-${Date.now()}-${Math.random()}-${index}`,\n        from: conversation.from,\n        to: conversation.to,\n        type: conversation.type,\n        message: conversation.message,\n        timestamp: Date.now() + (index * 200) // Slight time offset for visual effect\n      }));\n\n      // Update global connections with fade-out effect\n      setActiveConnections(prev => {\n        const filtered = prev.filter(conn => Date.now() - conn.timestamp < 6000); // Extended for multi-agent\n        return [...filtered, ...newConnections];\n      });\n\n      // Add new messages to global chat\n      const chatMessages = newConnections.map(connection => ({\n        id: connection.id,\n        timestamp: new Date(connection.timestamp).toLocaleTimeString('en-US', { \n          hour12: false, hour: '2-digit', minute: '2-digit', second: '2-digit' \n        }),\n        from: connection.from.toUpperCase(),\n        to: connection.to.toUpperCase(),\n        message: connection.message,\n        type: connection.type\n      }));\n\n      setChatMessages(current => {\n        const existingIds = new Set(current.map(msg => msg.id));\n        const newMessages = chatMessages.filter(msg => !existingIds.has(msg.id));\n        if (newMessages.length > 0) {\n          setTotalMessageCount(prev => prev + newMessages.length);\n        }\n        return [...current, ...newMessages];\n      });\n\n    } catch (error) {\n      console.error('Multi-agent conversations failed:', error);\n    } finally {\n      if (isComponentMounted.current) {\n        setIsLoadingNewMessage(false);\n      }\n    }\n  };\n\n  // Initialize global conversations\n  useEffect(() => {\n    let mounted = true;\n    \n    const startGlobalConversations = async () => {\n      if (!mounted) return;\n      \n      await createMultipleConversations();\n      \n      if (!mounted) return;\n      \n      conversationIntervalRef.current = setInterval(() => {\n        if (mounted && isComponentMounted.current) {\n          createMultipleConversations();\n        }\n      }, 8000); // More frequent for dynamic effect\n    };\n\n    const timer = setTimeout(startGlobalConversations, 1500);\n\n    return () => {\n      mounted = false;\n      clearTimeout(timer);\n      if (conversationIntervalRef.current) {\n        clearInterval(conversationIntervalRef.current);\n      }\n    };\n  }, []);\n\n  const value = {\n    chatMessages,\n    activeConnections,\n    isLoadingNewMessage,\n    totalMessageCount,\n  };\n\n  return (\n    <GlobalConversationContext.Provider value={value}>\n      {children}\n    </GlobalConversationContext.Provider>\n  );\n};","size_bytes":5401},"client/src/components/FluidConnectionLine.tsx":{"content":"import React, { useEffect, useRef, useState } from 'react';\nimport { motion, useMotionValue, useSpring } from 'framer-motion';\nimport { animationEngine, lerp, easeInOutCubic, perlinNoise, SpringSystem } from '@/lib/AnimationEngine';\n\ninterface Agent {\n  id: string;\n  position: { x: number; y: number };\n  name: string;\n}\n\ninterface FluidConnection {\n  id: string;\n  from: string;\n  to: string;\n  type: string;\n  timestamp: number;\n  confidence: number;\n  isActive: boolean;\n  streamProgress: number;\n}\n\ninterface FluidConnectionLineProps {\n  connection: FluidConnection;\n  from: { x: number; y: number };\n  to: { x: number; y: number };\n}\n\nexport const FluidConnectionLine: React.FC<FluidConnectionLineProps> = ({\n  connection,\n  from,\n  to\n}) => {\n  const pathRef = useRef<SVGPathElement>(null);\n  const [animatedPoints, setAnimatedPoints] = useState<{ x: number; y: number }[]>([]);\n  const springSystem = useRef(new SpringSystem());\n\n  // Smooth position interpolation with springs\n  const fromX = useSpring(from.x, { stiffness: 100, damping: 30 });\n  const fromY = useSpring(from.y, { stiffness: 100, damping: 30 });\n  const toX = useSpring(to.x, { stiffness: 100, damping: 30 });\n  const toY = useSpring(to.y, { stiffness: 100, damping: 30 });\n  \n  // Stream progress animation\n  const streamProgress = useSpring(connection.streamProgress, { \n    stiffness: 80, \n    damping: 25 \n  });\n  \n  // Confidence-based pulse width\n  const pulseWidth = useSpring(connection.confidence * 3, { \n    stiffness: 60, \n    damping: 20 \n  });\n\n  useEffect(() => {\n    const unsubscribe = animationEngine.subscribe((deltaTime, currentTime) => {\n      // Apply Perlin noise for organic drift\n      const noiseScale = 0.002;\n      const driftAmount = 2;\n      \n      const fromNoise = perlinNoise.noise(\n        from.x * noiseScale, \n        currentTime * 0.0005\n      ) * driftAmount;\n      \n      const toNoise = perlinNoise.noise(\n        to.x * noiseScale, \n        currentTime * 0.0005 + 100\n      ) * driftAmount;\n\n      // Update spring targets with noise\n      springSystem.current.setTarget('fromX', from.x + fromNoise);\n      springSystem.current.setTarget('fromY', from.y + fromNoise * 0.5);\n      springSystem.current.setTarget('toX', to.x + toNoise);\n      springSystem.current.setTarget('toY', to.y + toNoise * 0.5);\n\n      // Update spring system\n      const animatedFromX = springSystem.current.update('fromX', deltaTime);\n      const animatedFromY = springSystem.current.update('fromY', deltaTime);\n      const animatedToX = springSystem.current.update('toX', deltaTime);\n      const animatedToY = springSystem.current.update('toY', deltaTime);\n\n      // Generate smooth curve points\n      const points = [];\n      const numPoints = 20;\n      \n      for (let i = 0; i <= numPoints; i++) {\n        const t = i / numPoints;\n        const easedT = easeInOutCubic(t);\n        \n        // Bezier curve for natural arc\n        const midX = (animatedFromX + animatedToX) / 2;\n        const midY = (animatedFromY + animatedToY) / 2 - 30; // Arc height\n        \n        const x = lerp(lerp(animatedFromX, midX, easedT), lerp(midX, animatedToX, easedT), easedT);\n        const y = lerp(lerp(animatedFromY, midY, easedT), lerp(midY, animatedToY, easedT), easedT);\n        \n        points.push({ x, y });\n      }\n      \n      setAnimatedPoints(points);\n    });\n\n    // Initialize springs\n    springSystem.current.createSpring('fromX', from.x);\n    springSystem.current.createSpring('fromY', from.y);\n    springSystem.current.createSpring('toX', to.x);\n    springSystem.current.createSpring('toY', to.y);\n\n    return () => {\n      unsubscribe();\n    };\n  }, [from, to, connection.id]);\n\n  // Generate smooth path string\n  const pathString = animatedPoints.length > 0 ? (() => {\n    let path = `M ${animatedPoints[0].x} ${animatedPoints[0].y}`;\n    \n    for (let i = 1; i < animatedPoints.length - 1; i++) {\n      const current = animatedPoints[i];\n      const next = animatedPoints[i + 1];\n      const controlX = (current.x + next.x) / 2;\n      const controlY = (current.y + next.y) / 2;\n      \n      path += ` Q ${current.x} ${current.y} ${controlX} ${controlY}`;\n    }\n    \n    if (animatedPoints.length > 1) {\n      const last = animatedPoints[animatedPoints.length - 1];\n      path += ` T ${last.x} ${last.y}`;\n    }\n    \n    return path;\n  })() : '';\n\n  // Connection age for fading\n  const connectionAge = Date.now() - connection.timestamp;\n  const maxAge = 8000;\n  const opacity = Math.max(0.1, 1 - (connectionAge / maxAge));\n  \n  // Confidence-based color intensity\n  const confidenceColor = `hsl(${190 + connection.confidence * 50}, ${70 + connection.confidence * 30}%, ${50 + connection.confidence * 20}%)`;\n\n  return (\n    <g opacity={opacity}>\n      {/* Enhanced filters for HUD beam effect */}\n      <defs>\n        <filter id={`neuralBeam-${connection.id}`} x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n          <feGaussianBlur stdDeviation=\"1\" result=\"thinGlow\"/>\n          <feGaussianBlur stdDeviation=\"4\" result=\"mediumGlow\"/>\n          <feGaussianBlur stdDeviation=\"12\" result=\"farGlow\"/>\n          <feColorMatrix\n            in=\"farGlow\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0.02\n                    0 0 0 0 0.7\n                    0 0 0 0 0.9\n                    0 0 0 1 0\"/>\n          <feMerge>\n            <feMergeNode in=\"farGlow\"/>\n            <feMergeNode in=\"mediumGlow\"/>\n            <feMergeNode in=\"thinGlow\"/>\n            <feMergeNode in=\"SourceGraphic\"/>\n          </feMerge>\n        </filter>\n        \n        <linearGradient id={`streamGrad-${connection.id}`} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor={confidenceColor} stopOpacity=\"0.2\"/>\n          <stop offset={`${connection.streamProgress * 100}%`} stopColor={confidenceColor} stopOpacity=\"1\"/>\n          <stop offset=\"100%\" stopColor={confidenceColor} stopOpacity=\"0.3\"/>\n        </linearGradient>\n      </defs>\n\n      {/* Soft trail blur */}\n      <motion.path\n        d={pathString}\n        stroke={confidenceColor}\n        strokeWidth={pulseWidth}\n        fill=\"none\"\n        strokeLinecap=\"round\"\n        filter={`url(#neuralBeam-${connection.id})`}\n        opacity={opacity * 0.4}\n        strokeDasharray=\"0,0\"\n      />\n      \n      {/* Active streaming line */}\n      <motion.path\n        ref={pathRef}\n        d={pathString}\n        stroke={`url(#streamGrad-${connection.id})`}\n        strokeWidth={connection.confidence * 2 + 1}\n        fill=\"none\"\n        strokeLinecap=\"round\"\n        opacity={connection.isActive ? 1 : 0.6}\n        strokeDasharray={connection.isActive ? \"10,5\" : \"0,0\"}\n        animate={{\n          strokeDashoffset: connection.isActive ? [0, -15] : 0,\n        }}\n        transition={{\n          strokeDashoffset: {\n            duration: 1,\n            repeat: connection.isActive ? Infinity : 0,\n            ease: \"linear\"\n          }\n        }}\n      />\n\n      {/* Data packet visualization */}\n      {connection.isActive && (\n        <motion.circle\n          r={2 + connection.confidence}\n          fill={confidenceColor}\n          filter={`url(#neuralBeam-${connection.id})`}\n          animate={{\n            r: [2 + connection.confidence, 4 + connection.confidence, 2 + connection.confidence],\n          }}\n          transition={{\n            duration: 1.5,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        >\n          <animateMotion\n            dur={`${2 + Math.random()}s`}\n            repeatCount=\"indefinite\"\n            path={pathString}\n            begin={`${Math.random() * 2}s`}\n          />\n        </motion.circle>\n      )}\n    </g>\n  );\n};","size_bytes":7643},"client/src/components/FluidNeuralNetwork.tsx":{"content":"import React, { useCallback, useMemo, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { useFluidAgora } from '@/hooks/useFluidAgora';\nimport { FluidConnectionLine } from '@/components/FluidConnectionLine';\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Brain, Zap, Network, Activity, Cpu } from 'lucide-react';\n\ninterface FluidNeuralNetworkProps {\n  className?: string;\n  showPerformanceStats?: boolean;\n}\n\nexport const FluidNeuralNetwork: React.FC<FluidNeuralNetworkProps> = ({\n  className = \"\",\n  showPerformanceStats = true\n}) => {\n  const {\n    fluidConnections,\n    fluidAgents,\n    isConnected,\n    fps,\n    connectionCount,\n    sendMessage\n  } = useFluidAgora();\n\n  const [selectedAgent, setSelectedAgent] = useState<string | null>(null);\n\n  // Agent status colors\n  const getAgentStatusColor = useCallback((status: string, confidence: number) => {\n    switch (status) {\n      case 'active':\n        return `hsl(${120 + confidence * 60}, 100%, ${50 + confidence * 20}%)`;\n      case 'processing':\n        return `hsl(${60 + confidence * 30}, 90%, ${60 + confidence * 15}%)`;\n      default:\n        return `hsl(${200}, 50%, ${40 + confidence * 20}%)`;\n    }\n  }, []);\n\n  // Connection strength visualization\n  const getConnectionIntensity = useCallback((confidence: number, progress: number) => {\n    return Math.min(1, confidence * progress * 1.2);\n  }, []);\n\n  // Render agent nodes\n  const renderAgents = useMemo(() => {\n    return fluidAgents.map((agent) => (\n      <motion.g\n        key={agent.id}\n        initial={{ scale: 0, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        transition={{ duration: 0.5, type: \"spring\" }}\n        style={{ cursor: 'pointer' }}\n        onClick={() => setSelectedAgent(selectedAgent === agent.id ? null : agent.id)}\n      >\n        {/* Agent glow effect */}\n        <motion.circle\n          cx={agent.position.x}\n          cy={agent.position.y}\n          r=\"20\"\n          fill=\"none\"\n          stroke={getAgentStatusColor(agent.status, agent.confidence)}\n          strokeWidth=\"0.5\"\n          opacity=\"0.3\"\n          animate={{\n            r: [18, 24, 18],\n            opacity: [0.2, 0.4, 0.2]\n          }}\n          transition={{\n            duration: 2 + agent.confidence,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n        \n        {/* Main agent node */}\n        <motion.circle\n          cx={agent.position.x}\n          cy={agent.position.y}\n          r=\"12\"\n          fill={getAgentStatusColor(agent.status, agent.confidence)}\n          stroke=\"rgba(255,255,255,0.8)\"\n          strokeWidth=\"1\"\n          animate={{\n            scale: agent.status === 'active' ? [1, 1.1, 1] : 1\n          }}\n          transition={{\n            duration: 1.5,\n            repeat: agent.status === 'active' ? Infinity : 0,\n            ease: \"easeInOut\"\n          }}\n        />\n        \n        {/* Agent label */}\n        <text\n          x={agent.position.x}\n          y={agent.position.y - 20}\n          textAnchor=\"middle\"\n          fill=\"white\"\n          fontSize=\"10\"\n          fontWeight=\"bold\"\n          opacity=\"0.9\"\n        >\n          {agent.name}\n        </text>\n        \n        {/* Confidence indicator */}\n        <motion.circle\n          cx={agent.position.x + 15}\n          cy={agent.position.y - 15}\n          r=\"3\"\n          fill={`hsl(${agent.confidence * 120}, 100%, 70%)`}\n          animate={{\n            opacity: [0.6, 1, 0.6]\n          }}\n          transition={{\n            duration: 2,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n      </motion.g>\n    ));\n  }, [fluidAgents, selectedAgent, getAgentStatusColor]);\n\n  // Render fluid connections\n  const renderConnections = useMemo(() => {\n    return fluidConnections.map((connection) => {\n      const fromAgent = fluidAgents.find(a => a.id === connection.from);\n      const toAgent = fluidAgents.find(a => a.id === connection.to);\n      \n      if (!fromAgent || !toAgent) return null;\n      \n      return (\n        <FluidConnectionLine\n          key={connection.id}\n          connection={connection}\n          from={{ x: fromAgent.position.x, y: fromAgent.position.y }}\n          to={{ x: toAgent.position.x, y: toAgent.position.y }}\n        />\n      );\n    });\n  }, [fluidConnections, fluidAgents]);\n\n  return (\n    <div className={`relative ${className}`}>\n      {/* Neural Network Canvas */}\n      <div className=\"relative w-full h-96 bg-black/20 rounded-lg border border-lime-500/20 overflow-hidden\">\n        <svg\n          className=\"w-full h-full\"\n          viewBox=\"0 0 600 400\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        >\n          {/* Background grid */}\n          <defs>\n            <pattern\n              id=\"grid\"\n              width=\"20\"\n              height=\"20\"\n              patternUnits=\"userSpaceOnUse\"\n            >\n              <path\n                d=\"M 20 0 L 0 0 0 20\"\n                fill=\"none\"\n                stroke=\"rgba(163, 230, 53, 0.1)\"\n                strokeWidth=\"0.5\"\n              />\n            </pattern>\n          </defs>\n          <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\n          \n          {/* Fluid connections */}\n          {renderConnections}\n          \n          {/* Agent nodes */}\n          {renderAgents}\n        </svg>\n\n        {/* Connection status overlay */}\n        <div className=\"absolute top-2 left-2 flex items-center gap-2\">\n          <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-lime-500' : 'bg-red-500'}`} />\n          <span className=\"text-xs text-lime-400\">\n            {isConnected ? 'Neural Link Active' : 'Neural Link Disconnected'}\n          </span>\n        </div>\n\n        {/* Performance stats */}\n        {showPerformanceStats && (\n          <div className=\"absolute top-2 right-2 flex gap-3 text-xs text-lime-400\">\n            <div className=\"flex items-center gap-1\">\n              <Cpu className=\"w-3 h-3\" />\n              <span>{fps}fps</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Network className=\"w-3 h-3\" />\n              <span>{connectionCount}</span>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Agent Details Panel */}\n      {selectedAgent && (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: 20 }}\n          className=\"mt-4\"\n        >\n          <Card className=\"bg-black/40 border-lime-500/30\">\n            <CardContent className=\"p-4\">\n              {(() => {\n                const agent = fluidAgents.find(a => a.id === selectedAgent);\n                if (!agent) return null;\n                \n                return (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"text-lg font-bold text-lime-400\">\n                        Agent {agent.name}\n                      </h3>\n                      <Badge \n                        className={`${agent.status === 'active' ? 'bg-lime-500' : \n                          agent.status === 'processing' ? 'bg-yellow-500' : 'bg-gray-500'} text-black`}\n                      >\n                        {agent.status.toUpperCase()}\n                      </Badge>\n                    </div>\n                    \n                    <p className=\"text-sm text-gray-300\">{agent.domain}</p>\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-gray-400\">Confidence</span>\n                        <span className=\"text-lime-400\">{(agent.confidence * 100).toFixed(1)}%</span>\n                      </div>\n                      <Progress \n                        value={agent.confidence * 100} \n                        className=\"h-2 bg-black/50\"\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 text-xs\">\n                      <div>\n                        <h4 className=\"font-semibold text-lime-400 mb-1\">Resource Surplus</h4>\n                        <div className=\"space-y-1\">\n                          {agent.resources.surplus.map((resource, idx) => (\n                            <Badge key={idx} variant=\"outline\" className=\"text-xs border-green-500/50 text-green-400\">\n                              {resource}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <h4 className=\"font-semibold text-red-400 mb-1\">Resource Deficit</h4>\n                        <div className=\"space-y-1\">\n                          {agent.resources.deficit.map((resource, idx) => (\n                            <Badge key={idx} variant=\"outline\" className=\"text-xs border-red-500/50 text-red-400\">\n                              {resource}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })()}\n            </CardContent>\n          </Card>\n        </motion.div>\n      )}\n    </div>\n  );\n};","size_bytes":9479},"client/src/components/LiveMessageCounter.tsx":{"content":"import React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useGlobalConversation } from '@/contexts/GlobalConversationContext';\nimport { MessageSquare, Activity, TrendingUp } from 'lucide-react';\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface LiveMessageCounterProps {\n  className?: string;\n  showDetails?: boolean;\n  onExpandConversation?: () => void;\n}\n\nexport const LiveMessageCounter: React.FC<LiveMessageCounterProps> = ({\n  className = \"\",\n  showDetails = true,\n  onExpandConversation\n}) => {\n  const { chatMessages, activeConnections, isLoadingNewMessage, totalMessageCount } = useGlobalConversation();\n  const [messageCount, setMessageCount] = useState(0);\n  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());\n  const [recentGrowth, setRecentGrowth] = useState(0);\n  const [animateCount, setAnimateCount] = useState(false);\n\n  // Update message count with animation trigger\n  useEffect(() => {\n    const newCount = totalMessageCount;\n    const growth = newCount - messageCount;\n    \n    if (growth > 0) {\n      setRecentGrowth(growth);\n      setAnimateCount(true);\n      setLastUpdated(new Date());\n      \n      // Reset animation after brief delay\n      const timeout = setTimeout(() => setAnimateCount(false), 500);\n      return () => clearTimeout(timeout);\n    }\n    \n    setMessageCount(newCount);\n  }, [totalMessageCount, messageCount]);\n\n  // Calculate message velocity (messages per minute)\n  const getMessageVelocity = useCallback(() => {\n    if (chatMessages.length < 2) return 0;\n    \n    const now = new Date();\n    const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);\n    \n    const recentMessages = chatMessages.filter(msg => {\n      const msgTime = new Date(`${new Date().toDateString()} ${msg.timestamp}`);\n      return msgTime >= fiveMinutesAgo;\n    });\n    \n    return Math.round((recentMessages.length / 5) * 60); // Messages per hour\n  }, [chatMessages]);\n\n  // Get most active agents\n  const getMostActiveAgents = useCallback(() => {\n    const agentActivity = chatMessages.reduce((acc, msg) => {\n      acc[msg.from] = (acc[msg.from] || 0) + 1;\n      acc[msg.to] = (acc[msg.to] || 0) + 0.5; // Receiving counts less\n      return acc;\n    }, {} as Record<string, number>);\n    \n    return Object.entries(agentActivity)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 3)\n      .map(([agent, count]) => ({ agent, count: Math.round(count) }));\n  }, [chatMessages]);\n\n  const velocity = getMessageVelocity();\n  const activeAgents = getMostActiveAgents();\n  const connectionCount = activeConnections.length;\n\n  // When showDetails is false, render minimal version\n  if (!showDetails) {\n    return (\n      <div className={`text-xs text-gray-500 text-center ${className}`}>\n        {messageCount} messages\n      </div>\n    );\n  }\n\n  return (\n    <motion.div\n      className={`text-center ${className}`}\n      animate={{\n        scale: animateCount ? [1, 1.05, 1] : 1\n      }}\n      transition={{ duration: 0.3 }}\n    >\n      <motion.div\n        className=\"text-2xl font-bold text-gray-700\"\n        animate={{\n          color: animateCount ? \"#059669\" : \"#374151\"\n        }}\n        transition={{ duration: 0.3 }}\n      >\n        {messageCount}\n      </motion.div>\n    </motion.div>\n  );\n};","size_bytes":3378},"client/src/hooks/useFluidAgora.ts":{"content":"import { useState, useEffect, useRef, useCallback } from 'react';\nimport { animationEngine } from '@/lib/AnimationEngine';\nimport { WebSocketManager, StreamingMessage, AgentMemory } from '@/lib/WebSocketManager';\n\nexport interface FluidConnection {\n  id: string;\n  from: string;\n  to: string;\n  type: string;\n  timestamp: number;\n  confidence: number;\n  isActive: boolean;\n  streamProgress: number;\n  content?: string;\n}\n\nexport interface FluidAgent {\n  id: string;\n  name: string;\n  position: { x: number; y: number };\n  domain: string;\n  alignment: number;\n  status: 'active' | 'processing' | 'idle';\n  confidence: number;\n  recentActivity: number;\n  resources: {\n    surplus: string[];\n    deficit: string[];\n  };\n}\n\nexport const useFluidAgora = () => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [fluidConnections, setFluidConnections] = useState<FluidConnection[]>([]);\n  const [streamingMessages, setStreamingMessages] = useState<StreamingMessage[]>([]);\n  const [agentStates, setAgentStates] = useState<Map<string, AgentMemory>>(new Map());\n  \n  const wsManager = useRef<WebSocketManager | null>(null);\n  const connectionMap = useRef<Map<string, FluidConnection>>(new Map());\n  \n  // Performance monitoring\n  const [fps, setFps] = useState(0);\n  const [connectionCount, setConnectionCount] = useState(0);\n\n  // Initialize WebSocket and animation engine\n  useEffect(() => {\n    // Start animation engine\n    animationEngine.start();\n    \n    // Initialize WebSocket manager\n    wsManager.current = new WebSocketManager();\n    \n    wsManager.current.setConnectionHandler(setIsConnected);\n    wsManager.current.setMessageHandler(handleStreamingMessage);\n\n    return () => {\n      animationEngine.stop();\n      wsManager.current?.disconnect();\n    };\n  }, []);\n\n  // Handle incoming streaming messages\n  const handleStreamingMessage = useCallback((message: StreamingMessage) => {\n    setStreamingMessages(prev => {\n      const updated = [...prev];\n      const existing = updated.findIndex(m => m.id === message.id);\n      \n      if (existing >= 0) {\n        updated[existing] = message;\n      } else {\n        updated.push(message);\n        // Keep only recent messages\n        if (updated.length > 50) {\n          updated.splice(0, updated.length - 50);\n        }\n      }\n      \n      return updated;\n    });\n\n    // Create or update fluid connection\n    const connectionId = `${message.from}-${message.to}-${message.timestamp}`;\n    const connection: FluidConnection = {\n      id: connectionId,\n      from: message.from,\n      to: message.to,\n      type: message.topic || 'data',\n      timestamp: message.timestamp,\n      confidence: message.confidence || 0.8,\n      isActive: !message.isComplete,\n      streamProgress: message.isComplete ? 1 : (message.content.length / 200), // Estimate progress\n      content: message.content\n    };\n\n    connectionMap.current.set(connectionId, connection);\n    updateFluidConnections();\n\n    // Update agent memory\n    if (wsManager.current) {\n      const memory = wsManager.current.getAgentMemory(message.from);\n      if (memory) {\n        setAgentStates(prev => new Map(prev.set(message.from, memory)));\n      }\n    }\n\n  }, []);\n\n  // Update fluid connections with cleanup\n  const updateFluidConnections = useCallback(() => {\n    const now = Date.now();\n    const maxAge = 8000; // 8 seconds\n    \n    const activeConnections: FluidConnection[] = [];\n    \n    connectionMap.current.forEach((connection, id) => {\n      if (now - connection.timestamp < maxAge) {\n        // Update stream progress for active connections\n        if (connection.isActive) {\n          const age = now - connection.timestamp;\n          connection.streamProgress = Math.min(1, age / 3000); // Complete in 3 seconds\n          \n          if (connection.streamProgress >= 1) {\n            connection.isActive = false;\n          }\n        }\n        \n        activeConnections.push(connection);\n      } else {\n        connectionMap.current.delete(id);\n      }\n    });\n    \n    setFluidConnections(activeConnections);\n    setConnectionCount(activeConnections.length);\n  }, []);\n\n  // Cleanup old connections periodically\n  useEffect(() => {\n    const interval = setInterval(updateFluidConnections, 100); // 10fps cleanup\n    return () => clearInterval(interval);\n  }, [updateFluidConnections]);\n\n  // Monitor FPS\n  useEffect(() => {\n    const unsubscribe = animationEngine.subscribe(() => {\n      setFps(animationEngine.currentFps);\n    });\n    return unsubscribe;\n  }, []);\n\n  // Get fluid agents with enhanced state\n  const getFluidAgents = useCallback((): FluidAgent[] => {\n    const baseAgents = [\n      { id: 'alpha', name: 'ALPHA', domain: 'Infrastructure & Habitat Design', alignment: 94, position: { x: 150, y: 100 } },\n      { id: 'beta', name: 'BETA', domain: 'Energy Systems', alignment: 91, position: { x: 300, y: 80 } },\n      { id: 'gamma', name: 'GAMMA', domain: 'Food & Agriculture', alignment: 89, position: { x: 450, y: 100 } },\n      { id: 'delta', name: 'DELTA', domain: 'Ecology & Environmental Restoration', alignment: 96, position: { x: 550, y: 200 } },\n      { id: 'epsilon', name: 'EPSILON', domain: 'Social Dynamics & Wellbeing', alignment: 87, position: { x: 500, y: 300 } },\n      { id: 'zeta', name: 'ZETA', domain: 'Transportation & Mobility', alignment: 93, position: { x: 350, y: 350 } },\n      { id: 'eta', name: 'ETA', domain: 'Health & Medical Systems', alignment: 92, position: { x: 200, y: 320 } },\n      { id: 'theta', name: 'THETA', domain: 'Education & Knowledge Access', alignment: 88, position: { x: 100, y: 250 } },\n      { id: 'iota', name: 'IOTA', domain: 'Resource Management & Allocation', alignment: 90, position: { x: 50, y: 180 } },\n      { id: 'kappa', name: 'KAPPA', domain: 'Culture, Ethics & Governance', alignment: 95, position: { x: 250, y: 200 } }\n    ];\n\n    return baseAgents.map(agent => {\n      const memory = agentStates.get(agent.id);\n      const recentConnections = fluidConnections.filter(c => c.from === agent.id || c.to === agent.id);\n      const isActive = recentConnections.some(c => c.isActive);\n      \n      return {\n        ...agent,\n        status: isActive ? 'active' : memory ? 'processing' : 'idle',\n        confidence: memory?.confidence || 0.8,\n        recentActivity: memory?.lastActivity || Date.now() - 60000,\n        resources: {\n          surplus: ['Data', 'Bandwidth', 'Processing'],\n          deficit: ['Energy', 'Storage']\n        }\n      } as FluidAgent;\n    });\n  }, [agentStates, fluidConnections]);\n\n  // Send message through WebSocket\n  const sendMessage = useCallback((from: string, to: string, content: string, topic?: string) => {\n    if (wsManager.current) {\n      wsManager.current.sendMessage({\n        id: `manual_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        from,\n        to,\n        content,\n        isComplete: true,\n        confidence: 0.9,\n        topic\n      });\n    }\n  }, []);\n\n  // Get related agents for conversation flow\n  const getRelatedAgents = useCallback((fromAgent: string, topic?: string): string[] => {\n    if (wsManager.current) {\n      return wsManager.current.findRelatedAgents(fromAgent, topic);\n    }\n    return [];\n  }, []);\n\n  return {\n    // Connection state\n    isConnected,\n    fluidConnections,\n    streamingMessages,\n    agentStates,\n    \n    // Agent data\n    fluidAgents: getFluidAgents(),\n    \n    // Performance metrics\n    fps,\n    connectionCount,\n    \n    // Actions\n    sendMessage,\n    getRelatedAgents\n  };\n};","size_bytes":7505},"client/src/lib/AnimationEngine.ts":{"content":"// High-performance animation engine for AGORA neural network\nexport class AnimationEngine {\n  private animationId: number | null = null;\n  private lastTime = 0;\n  private callbacks: Set<(deltaTime: number, time: number) => void> = new Set();\n  private isRunning = false;\n\n  // Performance metrics\n  private frameCount = 0;\n  private lastFpsTime = 0;\n  public currentFps = 0;\n  public targetFps = 120;\n  public frameInterval = 1000 / this.targetFps;\n\n  start() {\n    if (this.isRunning) return;\n    this.isRunning = true;\n    this.lastTime = performance.now();\n    this.tick();\n  }\n\n  stop() {\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n    }\n    this.isRunning = false;\n  }\n\n  subscribe(callback: (deltaTime: number, time: number) => void) {\n    this.callbacks.add(callback);\n    return () => this.callbacks.delete(callback);\n  }\n\n  private tick = () => {\n    if (!this.isRunning) return;\n\n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastTime;\n\n    // Frame rate control\n    if (deltaTime >= this.frameInterval) {\n      // Update FPS counter\n      this.frameCount++;\n      if (currentTime - this.lastFpsTime >= 1000) {\n        this.currentFps = Math.round((this.frameCount * 1000) / (currentTime - this.lastFpsTime));\n        this.frameCount = 0;\n        this.lastFpsTime = currentTime;\n      }\n\n      // Execute callbacks\n      this.callbacks.forEach(callback => {\n        try {\n          callback(deltaTime, currentTime);\n        } catch (error) {\n          console.warn('Animation callback error:', error);\n        }\n      });\n\n      this.lastTime = currentTime;\n    }\n\n    this.animationId = requestAnimationFrame(this.tick);\n  };\n}\n\n// Smooth interpolation utilities\nexport const lerp = (start: number, end: number, factor: number): number => {\n  return start + (end - start) * factor;\n};\n\nexport const smoothstep = (t: number): number => {\n  return t * t * (3 - 2 * t);\n};\n\nexport const easeInOutCubic = (t: number): number => {\n  return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;\n};\n\n// Perlin noise for organic movement\nclass PerlinNoise {\n  private gradients: number[][] = [];\n  private memory: { [key: string]: number } = {};\n\n  constructor() {\n    // Generate random gradients\n    for (let i = 0; i < 256; i++) {\n      const angle = Math.random() * 2 * Math.PI;\n      this.gradients[i] = [Math.cos(angle), Math.sin(angle)];\n    }\n  }\n\n  private fade(t: number): number {\n    return t * t * t * (t * (t * 6 - 15) + 10);\n  }\n\n  private dot(grad: number[], x: number, y: number): number {\n    return grad[0] * x + grad[1] * y;\n  }\n\n  noise(x: number, y: number): number {\n    const key = `${Math.floor(x)},${Math.floor(y)}`;\n    if (this.memory[key] !== undefined) {\n      return this.memory[key];\n    }\n\n    const x0 = Math.floor(x) & 255;\n    const y0 = Math.floor(y) & 255;\n    const x1 = (x0 + 1) & 255;\n    const y1 = (y0 + 1) & 255;\n\n    const dx0 = x - Math.floor(x);\n    const dy0 = y - Math.floor(y);\n    const dx1 = dx0 - 1;\n    const dy1 = dy0 - 1;\n\n    const g00 = this.gradients[x0 + y0 * 16] || [0, 0];\n    const g10 = this.gradients[x1 + y0 * 16] || [0, 0];\n    const g01 = this.gradients[x0 + y1 * 16] || [0, 0];\n    const g11 = this.gradients[x1 + y1 * 16] || [0, 0];\n\n    const n00 = this.dot(g00, dx0, dy0);\n    const n10 = this.dot(g10, dx1, dy0);\n    const n01 = this.dot(g01, dx0, dy1);\n    const n11 = this.dot(g11, dx1, dy1);\n\n    const u = this.fade(dx0);\n    const v = this.fade(dy0);\n\n    const nx0 = lerp(n00, n10, u);\n    const nx1 = lerp(n01, n11, u);\n    const result = lerp(nx0, nx1, v);\n\n    this.memory[key] = result;\n    return result;\n  }\n}\n\nexport const perlinNoise = new PerlinNoise();\n\n// Spring physics for smooth movements\nexport class SpringSystem {\n  private springs: Map<string, {\n    current: number;\n    target: number;\n    velocity: number;\n    stiffness: number;\n    damping: number;\n  }> = new Map();\n\n  createSpring(id: string, initial = 0, stiffness = 0.15, damping = 0.8) {\n    this.springs.set(id, {\n      current: initial,\n      target: initial,\n      velocity: 0,\n      stiffness,\n      damping\n    });\n  }\n\n  setTarget(id: string, target: number) {\n    const spring = this.springs.get(id);\n    if (spring) {\n      spring.target = target;\n    }\n  }\n\n  update(id: string, deltaTime: number): number {\n    const spring = this.springs.get(id);\n    if (!spring) return 0;\n\n    const dt = Math.min(deltaTime / 16.67, 2); // Cap at 2 frames worth\n    const force = (spring.target - spring.current) * spring.stiffness;\n    \n    spring.velocity += force * dt;\n    spring.velocity *= spring.damping;\n    spring.current += spring.velocity * dt;\n\n    return spring.current;\n  }\n\n  getValue(id: string): number {\n    return this.springs.get(id)?.current || 0;\n  }\n\n  isAtRest(id: string, threshold = 0.001): boolean {\n    const spring = this.springs.get(id);\n    if (!spring) return true;\n    \n    return Math.abs(spring.velocity) < threshold && \n           Math.abs(spring.target - spring.current) < threshold;\n  }\n}\n\n// Global animation engine instance\nexport const animationEngine = new AnimationEngine();","size_bytes":5178},"client/src/lib/WebSocketManager.ts":{"content":"// WebSocket manager for real-time streaming agent conversations\nexport interface StreamingMessage {\n  id: string;\n  from: string;\n  to: string;\n  content: string;\n  isComplete: boolean;\n  timestamp: number;\n  confidence?: number;\n  topic?: string;\n  embedding?: number[];\n}\n\nexport interface AgentMemory {\n  agentId: string;\n  recentMessages: StreamingMessage[];\n  topics: Set<string>;\n  confidence: number;\n  lastActivity: number;\n}\n\nexport class WebSocketManager {\n  private ws: WebSocket | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000;\n  private messageQueue: StreamingMessage[] = [];\n  private agentMemories: Map<string, AgentMemory> = new Map();\n  \n  // Callbacks\n  private onMessage: ((message: StreamingMessage) => void) | null = null;\n  private onConnectionChange: ((connected: boolean) => void) | null = null;\n\n  // Poisson process for staggered message timing\n  private poissonLambda = 0.3; // Average messages per 100ms\n  private messageBacklog: StreamingMessage[] = [];\n  private processingTimer: number | null = null;\n\n  constructor() {\n    this.connect();\n  }\n\n  private connect() {\n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws/agora`;\n      \n      this.ws = new WebSocket(wsUrl);\n      \n      this.ws.onopen = () => {\n        console.log('AGORA WebSocket connected');\n        this.reconnectAttempts = 0;\n        this.onConnectionChange?.(true);\n        this.flushMessageQueue();\n      };\n\n      this.ws.onmessage = (event) => {\n        try {\n          const message: StreamingMessage = JSON.parse(event.data);\n          this.processIncomingMessage(message);\n        } catch (error) {\n          console.warn('Failed to parse WebSocket message:', error);\n        }\n      };\n\n      this.ws.onclose = () => {\n        console.log('AGORA WebSocket disconnected');\n        this.onConnectionChange?.(false);\n        this.scheduleReconnect();\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('AGORA WebSocket error:', error);\n      };\n\n    } catch (error) {\n      console.error('Failed to connect WebSocket:', error);\n      this.scheduleReconnect();\n    }\n  }\n\n  private scheduleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\n      \n      setTimeout(() => {\n        console.log(`Reconnecting WebSocket (attempt ${this.reconnectAttempts})`);\n        this.connect();\n      }, delay);\n    }\n  }\n\n  private flushMessageQueue() {\n    while (this.messageQueue.length > 0 && this.ws?.readyState === WebSocket.OPEN) {\n      const message = this.messageQueue.shift()!;\n      this.ws.send(JSON.stringify(message));\n    }\n  }\n\n  private processIncomingMessage(message: StreamingMessage) {\n    // Update agent memory\n    this.updateAgentMemory(message);\n    \n    // Add to processing backlog with Poisson timing\n    this.messageBacklog.push(message);\n    \n    if (!this.processingTimer) {\n      this.startPoissonProcessing();\n    }\n  }\n\n  private startPoissonProcessing() {\n    const processNext = () => {\n      if (this.messageBacklog.length === 0) {\n        this.processingTimer = null;\n        return;\n      }\n\n      const message = this.messageBacklog.shift()!;\n      this.onMessage?.(message);\n\n      // Calculate next delay using Poisson distribution\n      const delay = -Math.log(Math.random()) / this.poissonLambda * 100; // Scale to ms\n      const jitteredDelay = delay + Math.random() * 300; // Add 0-300ms jitter\n\n      this.processingTimer = window.setTimeout(processNext, Math.max(100, jitteredDelay));\n    };\n\n    processNext();\n  }\n\n  private updateAgentMemory(message: StreamingMessage) {\n    const agentId = message.from;\n    \n    if (!this.agentMemories.has(agentId)) {\n      this.agentMemories.set(agentId, {\n        agentId,\n        recentMessages: [],\n        topics: new Set(),\n        confidence: message.confidence || 0.8,\n        lastActivity: Date.now()\n      });\n    }\n\n    const memory = this.agentMemories.get(agentId)!;\n    memory.recentMessages.push(message);\n    memory.lastActivity = Date.now();\n    \n    if (message.topic) {\n      memory.topics.add(message.topic);\n    }\n\n    if (message.confidence !== undefined) {\n      memory.confidence = lerp(memory.confidence, message.confidence, 0.3);\n    }\n\n    // Keep only recent messages (sliding window)\n    const maxMessages = 10;\n    const maxAge = 60000; // 1 minute\n    const now = Date.now();\n    \n    memory.recentMessages = memory.recentMessages\n      .filter(msg => now - msg.timestamp < maxAge)\n      .slice(-maxMessages);\n  }\n\n  // Topic similarity for intelligent routing\n  private calculateTopicSimilarity(topics1: Set<string>, topics2: Set<string>): number {\n    const topics1Array = Array.from(topics1);\n    const topics2Array = Array.from(topics2);\n    const intersection = new Set(topics1Array.filter(x => topics2.has(x)));\n    const union = new Set([...topics1Array, ...topics2Array]);\n    return union.size > 0 ? intersection.size / union.size : 0;\n  }\n\n  // Find best agents to continue conversation\n  public findRelatedAgents(fromAgent: string, topic?: string): string[] {\n    const fromMemory = this.agentMemories.get(fromAgent);\n    if (!fromMemory) return [];\n\n    const candidates = Array.from(this.agentMemories.entries())\n      .filter(([id]) => id !== fromAgent)\n      .map(([id, memory]) => ({\n        id,\n        similarity: this.calculateTopicSimilarity(fromMemory.topics, memory.topics),\n        confidence: memory.confidence,\n        recentActivity: Date.now() - memory.lastActivity\n      }))\n      .filter(candidate => candidate.recentActivity < 30000) // Active in last 30s\n      .sort((a, b) => {\n        // Weight by similarity, confidence, and recent activity\n        const scoreA = a.similarity * 0.5 + a.confidence * 0.3 - (a.recentActivity / 30000) * 0.2;\n        const scoreB = b.similarity * 0.5 + b.confidence * 0.3 - (b.recentActivity / 30000) * 0.2;\n        return scoreB - scoreA;\n      });\n\n    return candidates.slice(0, 3).map(c => c.id);\n  }\n\n  public setMessageHandler(handler: (message: StreamingMessage) => void) {\n    this.onMessage = handler;\n  }\n\n  public setConnectionHandler(handler: (connected: boolean) => void) {\n    this.onConnectionChange = handler;\n  }\n\n  public sendMessage(message: Omit<StreamingMessage, 'timestamp'>) {\n    const fullMessage: StreamingMessage = {\n      ...message,\n      timestamp: Date.now()\n    };\n\n    if (this.ws?.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(fullMessage));\n    } else {\n      this.messageQueue.push(fullMessage);\n    }\n  }\n\n  public getAgentMemory(agentId: string): AgentMemory | undefined {\n    return this.agentMemories.get(agentId);\n  }\n\n  public getAgentConfidence(agentId: string): number {\n    return this.agentMemories.get(agentId)?.confidence || 0.8;\n  }\n\n  public disconnect() {\n    if (this.processingTimer) {\n      clearTimeout(this.processingTimer);\n      this.processingTimer = null;\n    }\n    \n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}\n\n// Lerp utility for confidence interpolation\nconst lerp = (a: number, b: number, t: number): number => a + (b - a) * t;","size_bytes":7343},"server/websocket.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { Server } from 'http';\n\ninterface StreamingMessage {\n  id: string;\n  from: string;\n  to: string;\n  content: string;\n  isComplete: boolean;\n  timestamp: number;\n  confidence?: number;\n  topic?: string;\n}\n\ninterface AgoraClient {\n  ws: WebSocket;\n  id: string;\n  lastActivity: number;\n}\n\nexport class AgoraWebSocketServer {\n  private wss: WebSocketServer;\n  private clients: Map<string, AgoraClient> = new Map();\n  private messageStreams: Map<string, NodeJS.Timeout> = new Map();\n\n  constructor(server: Server) {\n    this.wss = new WebSocketServer({ \n      server, \n      path: '/ws/agora',\n      perMessageDeflate: {\n        // Enable per-message deflate for better performance\n        threshold: 1024,\n        concurrencyLimit: 10,\n        serverMaxWindowBits: 13,\n        serverNoContextTakeover: false,\n        clientMaxWindowBits: 13,\n        clientNoContextTakeover: false\n      }\n    });\n\n    this.wss.on('connection', this.handleConnection.bind(this));\n    console.log('AGORA WebSocket server initialized on /ws/agora');\n  }\n\n  private handleConnection(ws: WebSocket) {\n    const clientId = this.generateClientId();\n    const client: AgoraClient = {\n      ws,\n      id: clientId,\n      lastActivity: Date.now()\n    };\n\n    this.clients.set(clientId, client);\n    console.log(`AGORA client connected: ${clientId}`);\n\n    // Send welcome message\n    this.sendToClient(clientId, {\n      id: 'welcome',\n      from: 'system',\n      to: clientId,\n      content: 'Connected to AGORA neural network',\n      isComplete: true,\n      timestamp: Date.now(),\n      confidence: 1\n    });\n\n    ws.on('message', (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        this.handleClientMessage(clientId, message);\n      } catch (error) {\n        console.error('Invalid WebSocket message:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      this.clients.delete(clientId);\n      this.cleanupClientStreams(clientId);\n      console.log(`AGORA client disconnected: ${clientId}`);\n    });\n\n    ws.on('error', (error) => {\n      console.error(`WebSocket error for client ${clientId}:`, error);\n    });\n\n    // Start streaming simulated neural activity\n    this.initializeNeuralActivity(clientId);\n  }\n\n  private handleClientMessage(clientId: string, message: any) {\n    const client = this.clients.get(clientId);\n    if (!client) return;\n\n    client.lastActivity = Date.now();\n    \n    // Broadcast to other clients (for multi-user scenarios)\n    this.broadcastMessage(message, clientId);\n  }\n\n  private broadcastMessage(message: StreamingMessage, excludeClientId?: string) {\n    this.clients.forEach((client, id) => {\n      if (id !== excludeClientId && client.ws.readyState === WebSocket.OPEN) {\n        this.sendToClient(id, message);\n      }\n    });\n  }\n\n  private sendToClient(clientId: string, message: StreamingMessage) {\n    const client = this.clients.get(clientId);\n    if (client && client.ws.readyState === WebSocket.OPEN) {\n      try {\n        client.ws.send(JSON.stringify(message));\n      } catch (error) {\n        console.error(`Failed to send message to client ${clientId}:`, error);\n      }\n    }\n  }\n\n  private initializeNeuralActivity(clientId: string) {\n    const agents = ['alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa'];\n    const topics = [\n      'infrastructure optimization',\n      'energy distribution',\n      'resource allocation',\n      'social coordination',\n      'ecological balance',\n      'transportation flow',\n      'health systems',\n      'education protocols',\n      'governance structures',\n      'innovation networks'\n    ];\n\n    const createStreamingMessage = () => {\n      const fromAgent = agents[Math.floor(Math.random() * agents.length)];\n      const toAgent = agents.filter(a => a !== fromAgent)[Math.floor(Math.random() * (agents.length - 1))];\n      const topic = topics[Math.floor(Math.random() * topics.length)];\n      \n      const messageTemplates = [\n        `Analyzing ${topic} patterns - detecting optimization opportunities`,\n        `Coordinating with ${toAgent} systems for ${topic} enhancement`,\n        `Processing ${topic} data streams - confidence levels rising`,\n        `Implementing ${topic} protocols with distributed consensus`,\n        `Monitoring ${topic} metrics - adaptive adjustments in progress`,\n        `Establishing ${topic} connections with neighboring nodes`,\n        `Optimizing ${topic} efficiency through machine learning`,\n        `Synchronizing ${topic} operations across network clusters`\n      ];\n\n      const content = messageTemplates[Math.floor(Math.random() * messageTemplates.length)];\n      \n      return {\n        id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        from: fromAgent,\n        to: toAgent,\n        content,\n        isComplete: false,\n        timestamp: Date.now(),\n        confidence: 0.7 + Math.random() * 0.3,\n        topic\n      };\n    };\n\n    const streamMessage = (message: StreamingMessage) => {\n      const chunks = message.content.split(' ');\n      let currentChunk = 0;\n      const streamId = `stream_${message.id}`;\n      \n      const sendChunk = () => {\n        if (currentChunk < chunks.length) {\n          const progress = currentChunk / chunks.length;\n          const partialMessage = {\n            ...message,\n            content: chunks.slice(0, currentChunk + 1).join(' '),\n            isComplete: currentChunk === chunks.length - 1,\n            streamProgress: progress\n          };\n          \n          this.sendToClient(clientId, partialMessage);\n          currentChunk++;\n          \n          // Variable delay for natural typing rhythm\n          const delay = 50 + Math.random() * 200;\n          const timeout = setTimeout(sendChunk, delay);\n          this.messageStreams.set(streamId, timeout);\n        } else {\n          this.messageStreams.delete(streamId);\n        }\n      };\n\n      sendChunk();\n    };\n\n    // Start neural activity simulation\n    const scheduleNextMessage = () => {\n      // Poisson process with exponential inter-arrival times\n      const lambda = 0.5; // Average messages per second\n      const delay = -Math.log(Math.random()) / lambda * 1000;\n      const jitteredDelay = delay + Math.random() * 2000; // Add up to 2s jitter\n      \n      setTimeout(() => {\n        if (this.clients.has(clientId)) {\n          const message = createStreamingMessage();\n          streamMessage(message);\n          scheduleNextMessage();\n        }\n      }, Math.max(500, jitteredDelay));\n    };\n\n    scheduleNextMessage();\n  }\n\n  private cleanupClientStreams(clientId: string) {\n    // Clear any active message streams for this client\n    this.messageStreams.forEach((timeout, streamId) => {\n      if (streamId.includes(clientId)) {\n        clearTimeout(timeout);\n        this.messageStreams.delete(streamId);\n      }\n    });\n  }\n\n  private generateClientId(): string {\n    return `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // Clean up inactive clients\n  public startCleanupInterval() {\n    setInterval(() => {\n      const now = Date.now();\n      const timeout = 300000; // 5 minutes\n\n      this.clients.forEach((client, id) => {\n        if (now - client.lastActivity > timeout && client.ws.readyState !== WebSocket.OPEN) {\n          this.clients.delete(id);\n          this.cleanupClientStreams(id);\n        }\n      });\n    }, 60000); // Check every minute\n  }\n\n  public getConnectionCount(): number {\n    return this.clients.size;\n  }\n}","size_bytes":7539},"server/archiveSnapshots.ts":{"content":"import DecisionImpactAnalyzer from './impactAnalyzer';\n\ninterface ChatMessage {\n  id: string;\n  from: string;\n  to: string;\n  message: string;\n  timestamp: Date;\n  decision_id?: string;\n  type: 'energy' | 'material' | 'data' | 'time';\n}\n\ninterface SnapshotMetrics {\n  ecological: number;\n  wellbeing: number;\n  efficiency: number;\n  resilience: number;\n  equity: number;\n  innovation: number;\n}\n\ninterface HourlySnapshot {\n  id: string;\n  timestamp_start: string;\n  timestamp_end: string;\n  decision_id: string;\n  title: string;\n  status: 'DEBATING' | 'VOTING' | 'APPROVED' | 'IMPLEMENTED' | 'REJECTED';\n  participants: string[];\n  metrics_delta: SnapshotMetrics;\n  summary_line: string;\n  transcript_lines: string[];\n  created_at: Date;\n}\n\nclass ArchiveSnapshotManager {\n  private snapshots: HourlySnapshot[] = [];\n  private messages: ChatMessage[] = [];\n  private impactAnalyzer: DecisionImpactAnalyzer;\n  private isCapturing = false;\n\n  constructor() {\n    this.impactAnalyzer = new DecisionImpactAnalyzer();\n    this.startHourlyCapture();\n  }\n\n  private createInitialSampleSnapshots() {\n    console.log('[ARCHIVE] Creating initial sample snapshots for demo');\n    \n    const now = new Date();\n    const sampleSnapshots: HourlySnapshot[] = [\n      {\n        id: `snapshot-${Date.now()}-1`,\n        timestamp_start: new Date(now.getTime() - 3 * 60 * 60 * 1000).toISOString(),\n        timestamp_end: new Date(now.getTime() - 2 * 60 * 60 * 1000).toISOString(),\n        decision_id: 'energy-reallocation',\n        title: 'Solar Grid Optimization Protocol',\n        status: 'APPROVED',\n        participants: ['ALPHA', 'BETA', 'DELTA', 'EPSILON', 'ZETA'],\n        metrics_delta: {\n          ecological: 12.5,\n          wellbeing: 8.2,\n          efficiency: 15.7,\n          resilience: 9.1,\n          equity: 5.3,\n          innovation: 11.8\n        },\n        summary_line: 'Optimized solar panel placement for 23% efficiency increase',\n        transcript_lines: [\n          '[14:32] BETA → ALPHA: \"Solar array reconfiguration analysis complete\"',\n          '[14:33] ALPHA → DELTA: \"Environmental impact assessment shows positive indicators\"',\n          '[14:35] EPSILON → BETA: \"Community energy needs projected for next quarter\"',\n          '[14:37] ZETA → ALPHA: \"Transportation grid ready for energy redistribution\"',\n          '[14:40] DELTA → ALL: \"Ecosystem integration protocols approved\"'\n        ],\n        created_at: new Date(now.getTime() - 2 * 60 * 60 * 1000)\n      },\n      {\n        id: `snapshot-${Date.now()}-2`,\n        timestamp_start: new Date(now.getTime() - 2 * 60 * 60 * 1000).toISOString(),\n        timestamp_end: new Date(now.getTime() - 1 * 60 * 60 * 1000).toISOString(),\n        decision_id: 'agricultural-enhancement',\n        title: 'Vertical Farm Expansion Decision',\n        status: 'PENDING',\n        participants: ['GAMMA', 'DELTA', 'ETA', 'THETA', 'IOTA'],\n        metrics_delta: {\n          ecological: 8.7,\n          wellbeing: 12.3,\n          efficiency: 6.9,\n          resilience: 14.2,\n          equity: 9.8,\n          innovation: 7.5\n        },\n        summary_line: 'Evaluating vertical farming integration with urban planning',\n        transcript_lines: [\n          '[15:15] GAMMA → DELTA: \"Hydroponic systems show 40% yield improvement\"',\n          '[15:18] ETA → GAMMA: \"Nutritional analysis confirms optimal protein distribution\"',\n          '[15:22] THETA → ALL: \"Educational programs need integration with farming protocols\"',\n          '[15:25] IOTA → GAMMA: \"Resource allocation for soil-less agriculture approved\"',\n          '[15:28] DELTA → ETA: \"Ecosystem impact requires further biodiversity analysis\"'\n        ],\n        created_at: new Date(now.getTime() - 1 * 60 * 60 * 1000)\n      },\n      {\n        id: `snapshot-${Date.now()}-3`,\n        timestamp_start: new Date(now.getTime() - 1 * 60 * 60 * 1000).toISOString(),\n        timestamp_end: new Date(now.getTime() - 30 * 60 * 1000).toISOString(),\n        decision_id: 'transport-optimization',\n        title: 'Autonomous Transit Network Upgrade',\n        status: 'DEBATING',\n        participants: ['ZETA', 'ALPHA', 'EPSILON', 'KAPPA', 'BETA'],\n        metrics_delta: {\n          ecological: 15.2,\n          wellbeing: 9.7,\n          efficiency: 22.1,\n          resilience: 11.3,\n          equity: 16.8,\n          innovation: 18.4\n        },\n        summary_line: 'Implementing AI-coordinated transportation for reduced emissions',\n        transcript_lines: [\n          '[16:45] ZETA → ALPHA: \"Transit pod manufacturing protocols ready for deployment\"',\n          '[16:47] EPSILON → ZETA: \"Community feedback shows 89% approval for automated systems\"',\n          '[16:50] KAPPA → ALL: \"Ethical considerations for autonomous decision-making addressed\"',\n          '[16:53] BETA → ZETA: \"Energy requirements fit within sustainable grid capacity\"',\n          '[16:56] ALPHA → EPSILON: \"Infrastructure modifications scheduled for next phase\"'\n        ],\n        created_at: new Date(now.getTime() - 30 * 60 * 1000)\n      }\n    ];\n\n    this.snapshots = sampleSnapshots;\n    console.log(`[ARCHIVE] Created ${sampleSnapshots.length} initial sample snapshots`);\n  }\n\n  // Store chat messages for snapshot processing\n  addMessage(message: ChatMessage) {\n    // Assign decision_id based on message content or use default\n    const decision_id = this.inferDecisionId(message);\n    const enrichedMessage = {\n      ...message,\n      decision_id,\n      timestamp: new Date()\n    };\n    \n    this.messages.push(enrichedMessage);\n    \n    // Keep only last 24 hours of messages\n    const cutoff = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    this.messages = this.messages.filter(msg => msg.timestamp > cutoff);\n  }\n\n  private inferDecisionId(message: ChatMessage): string {\n    const text = message.message.toLowerCase();\n    \n    // Infer decision type from message content\n    if (text.includes('energy') || text.includes('power') || text.includes('grid')) {\n      return 'energy-reallocation';\n    } else if (text.includes('transport') || text.includes('mobility') || text.includes('transit')) {\n      return 'transport-optimization';\n    } else if (text.includes('agriculture') || text.includes('food') || text.includes('farm')) {\n      return 'agricultural-enhancement';\n    } else if (text.includes('healthcare') || text.includes('medical') || text.includes('health')) {\n      return 'healthcare-upgrade';\n    } else if (text.includes('education') || text.includes('learning') || text.includes('curriculum')) {\n      return 'education-framework';\n    } else if (text.includes('resource') || text.includes('allocation') || text.includes('management')) {\n      return 'resource-automation';\n    }\n    \n    return 'general-coordination';\n  }\n\n  private startHourlyCapture() {\n    // For demo purposes, create snapshots every 2 minutes instead of hourly\n    console.log(`[ARCHIVE] Starting demo snapshot capture every 2 minutes`);\n    \n    // Create initial sample snapshots\n    this.createInitialSampleSnapshots();\n    \n    // Create first snapshot in 30 seconds\n    setTimeout(() => {\n      this.captureHourlySnapshots();\n      \n      // Then run every 2 minutes for demo\n      setInterval(() => {\n        this.captureHourlySnapshots();\n      }, 2 * 60 * 1000); // 2 minutes\n    }, 30 * 1000); // 30 seconds\n  }\n\n  private async captureHourlySnapshots() {\n    if (this.isCapturing) return;\n    this.isCapturing = true;\n\n    try {\n      const now = new Date();\n      const periodStart = new Date(now.getTime() - 2 * 60 * 1000); // 2 minutes ago\n      const periodEnd = new Date(now.getTime());\n\n      console.log(`[ARCHIVE] Capturing snapshots for period: ${periodStart.toISOString()} - ${periodEnd.toISOString()}`);\n\n      // Get messages from the past 2 minutes for demo\n      const periodMessages = this.messages.filter(msg => \n        msg.timestamp >= periodStart && msg.timestamp < periodEnd\n      );\n\n      if (periodMessages.length === 0) {\n        console.log('[ARCHIVE] No messages in past 2 minutes, skipping snapshot');\n        this.isCapturing = false;\n        return;\n      }\n\n      // Group messages by decision_id\n      const messagesByDecision = new Map<string, ChatMessage[]>();\n      periodMessages.forEach(msg => {\n        const id = msg.decision_id || 'general-coordination';\n        if (!messagesByDecision.has(id)) {\n          messagesByDecision.set(id, []);\n        }\n        messagesByDecision.get(id)!.push(msg);\n      });\n\n      let snapshotCount = 0;\n\n      // Create snapshot for each decision group\n      const decisionIds = Array.from(messagesByDecision.keys());\n      for (const decisionId of decisionIds) {\n        const msgs = messagesByDecision.get(decisionId)!;\n        if (msgs.length === 0) continue;\n\n        const snapshot = await this.createSnapshot(decisionId, msgs, periodStart, periodEnd);\n        this.snapshots.unshift(snapshot); // Add to beginning for reverse chronological order\n        snapshotCount++;\n      }\n\n      console.log(`[ARCHIVE] Created ${snapshotCount} snapshots for ${messagesByDecision.size} decisions`);\n\n      // Clean up old snapshots (keep 30 days)\n      this.cleanupOldSnapshots();\n\n    } catch (error) {\n      console.error('[ARCHIVE] Error capturing snapshots:', error);\n    } finally {\n      this.isCapturing = false;\n    }\n  }\n\n  private async createSnapshot(\n    decisionId: string, \n    messages: ChatMessage[], \n    periodStart: Date, \n    periodEnd: Date\n  ): Promise<HourlySnapshot> {\n    // Calculate metrics delta for this hour\n    const initialMetrics = this.impactAnalyzer.getCurrentMetrics();\n    const tempAnalyzer = new DecisionImpactAnalyzer(initialMetrics);\n    \n    messages.forEach(msg => {\n      tempAnalyzer.processMessage({ agent: msg.from, text: msg.message });\n    });\n    \n    const finalMetrics = tempAnalyzer.getCurrentMetrics();\n    const metrics_delta = {\n      ecological: finalMetrics.ecological - initialMetrics.ecological,\n      wellbeing: finalMetrics.wellbeing - initialMetrics.wellbeing,\n      efficiency: finalMetrics.efficiency - initialMetrics.efficiency,\n      resilience: finalMetrics.resilience - initialMetrics.resilience,\n      equity: finalMetrics.equity - initialMetrics.equity,\n      innovation: finalMetrics.innovation - initialMetrics.innovation\n    };\n\n    // Generate transcript lines in archive format\n    const transcript_lines = messages.map(msg => {\n      const time = msg.timestamp.toLocaleTimeString('en-US', { \n        hour12: false, \n        hour: '2-digit', \n        minute: '2-digit', \n        second: '2-digit' \n      });\n      const truncatedMsg = msg.message.length > 140 \n        ? msg.message.substring(0, 137) + '...'\n        : msg.message;\n      return `[${time}] ${msg.from.toUpperCase()} ${truncatedMsg}`;\n    });\n\n    // Get unique participants\n    const participants = Array.from(new Set(messages.map(msg => msg.from)));\n\n    // Generate title and status based on decision type and content\n    const { title, status } = this.generateTitleAndStatus(decisionId, messages, metrics_delta);\n\n    // Create summary line\n    const summary_line = this.generateSummaryLine(messages, metrics_delta, participants);\n\n    return {\n      id: `${decisionId}-${periodStart.getTime()}`,\n      timestamp_start: periodStart.toISOString(),\n      timestamp_end: periodEnd.toISOString(),\n      decision_id: decisionId,\n      title,\n      status,\n      participants,\n      metrics_delta,\n      summary_line,\n      transcript_lines,\n      created_at: new Date()\n    };\n  }\n\n  private generateTitleAndStatus(\n    decisionId: string, \n    messages: ChatMessage[], \n    delta: SnapshotMetrics\n  ): { title: string; status: 'DEBATING' | 'VOTING' | 'APPROVED' | 'IMPLEMENTED' | 'REJECTED' } {\n    const titles: Record<string, string> = {\n      'energy-reallocation': 'Solar Array Recalibration',\n      'transport-optimization': 'Transport Network Optimization', \n      'agricultural-enhancement': 'Agricultural Yield Enhancement',\n      'healthcare-upgrade': 'Healthcare System Upgrade',\n      'education-framework': 'Educational AI Ethics Framework',\n      'resource-automation': 'Resource Recovery Automation Protocol',\n      'general-coordination': 'General System Coordination'\n    };\n\n    const title = titles[decisionId] || 'System Coordination';\n\n    // Determine status based on message patterns and impact\n    const msgText = messages.map(m => m.message.toLowerCase()).join(' ');\n    const totalImpact = Math.abs(delta.ecological) + Math.abs(delta.wellbeing) + \n                       Math.abs(delta.efficiency) + Math.abs(delta.resilience) + \n                       Math.abs(delta.equity) + Math.abs(delta.innovation);\n\n    if (msgText.includes('implemented') || msgText.includes('deployed') || msgText.includes('active')) {\n      return { title, status: 'IMPLEMENTED' };\n    } else if (msgText.includes('approved') || msgText.includes('confirmed') || totalImpact > 5) {\n      return { title, status: 'APPROVED' };\n    } else if (msgText.includes('voting') || msgText.includes('decide') || msgText.includes('consensus')) {\n      return { title, status: 'VOTING' };\n    } else if (msgText.includes('rejected') || msgText.includes('cancelled') || totalImpact < -3) {\n      return { title, status: 'REJECTED' };\n    } else {\n      return { title, status: 'DEBATING' };\n    }\n  }\n\n  private generateSummaryLine(messages: ChatMessage[], delta: SnapshotMetrics, participants: string[]): string {\n    const participantList = participants.length > 3 \n      ? `${participants.slice(0, 3).join(', ')} +${participants.length - 3}`\n      : participants.join(', ');\n\n    // Find most significant metric change\n    const deltas = [\n      { name: 'Ecological', value: delta.ecological },\n      { name: 'Wellbeing', value: delta.wellbeing },\n      { name: 'Efficiency', value: delta.efficiency },\n      { name: 'Resilience', value: delta.resilience },\n      { name: 'Equity', value: delta.equity },\n      { name: 'Innovation', value: delta.innovation }\n    ];\n    \n    const maxDelta = deltas.reduce((max, curr) => \n      Math.abs(curr.value) > Math.abs(max.value) ? curr : max\n    );\n\n    const deltaStr = maxDelta.value !== 0 \n      ? `${maxDelta.name}: ${maxDelta.value > 0 ? '+' : ''}${maxDelta.value.toFixed(1)}`\n      : 'No impact';\n\n    return `${participantList} | ${messages.length} messages | ${deltaStr}`;\n  }\n\n  private cleanupOldSnapshots() {\n    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    const beforeCount = this.snapshots.length;\n    this.snapshots = this.snapshots.filter(snapshot => snapshot.created_at > thirtyDaysAgo);\n    const afterCount = this.snapshots.length;\n    \n    if (beforeCount !== afterCount) {\n      console.log(`[ARCHIVE] Cleaned up ${beforeCount - afterCount} old snapshots`);\n    }\n  }\n\n  // API methods\n  getSnapshotHeaders(): Array<{\n    id: string;\n    timestamp: string;\n    title: string;\n    status: string;\n    impact: string;\n  }> {\n    return this.snapshots.map(snapshot => ({\n      id: snapshot.id,\n      timestamp: new Date(snapshot.timestamp_start).toLocaleTimeString('en-US', { \n        hour12: false, \n        hour: '2-digit', \n        minute: '2-digit' \n      }),\n      title: snapshot.title,\n      status: snapshot.status,\n      impact: snapshot.summary_line\n    }));\n  }\n\n  getSnapshotTranscript(id: string): { transcript: string[]; metrics: SnapshotMetrics; participants: string[] } | null {\n    const snapshot = this.snapshots.find(s => s.id === id);\n    return snapshot ? {\n      transcript: snapshot.transcript_lines,\n      metrics: snapshot.metrics_delta,\n      participants: snapshot.participants\n    } : null;\n  }\n\n  getSnapshotCount(): number {\n    return this.snapshots.length;\n  }\n\n  // Enhanced search functionality\n  searchSnapshots(query: string): Array<{\n    id: string;\n    timestamp: string;\n    title: string;\n    status: string;\n    impact: string;\n    participants: string[];\n    messageCount: number;\n    relevanceScore: number;\n    matchedContent: string[];\n  }> {\n    if (!query || query.trim().length === 0) {\n      return this.getSnapshotHeaders().map(header => ({\n        ...header,\n        participants: [],\n        messageCount: 0,\n        relevanceScore: 0,\n        matchedContent: []\n      }));\n    }\n\n    const searchTerm = query.toLowerCase().trim();\n    const results = this.snapshots.map(snapshot => {\n      let relevanceScore = 0;\n      const matchedContent: string[] = [];\n\n      // Search in title (high weight)\n      if (snapshot.title.toLowerCase().includes(searchTerm)) {\n        relevanceScore += 10;\n        matchedContent.push(`Title: ${snapshot.title}`);\n      }\n\n      // Search in summary_line (high weight)\n      if (snapshot.summary_line.toLowerCase().includes(searchTerm)) {\n        relevanceScore += 8;\n        matchedContent.push(`Summary: ${snapshot.summary_line}`);\n      }\n\n      // Search in status (medium weight)\n      if (snapshot.status.toLowerCase().includes(searchTerm)) {\n        relevanceScore += 5;\n        matchedContent.push(`Status: ${snapshot.status}`);\n      }\n\n      // Search in decision_id (medium weight)\n      if (snapshot.decision_id.toLowerCase().includes(searchTerm)) {\n        relevanceScore += 6;\n        matchedContent.push(`Decision Type: ${snapshot.decision_id}`);\n      }\n\n      // Search in participants (medium weight)\n      const participantMatches = snapshot.participants.filter(p => \n        p.toLowerCase().includes(searchTerm)\n      );\n      if (participantMatches.length > 0) {\n        relevanceScore += 4 * participantMatches.length;\n        matchedContent.push(`Participants: ${participantMatches.join(', ')}`);\n      }\n\n      // Search in transcript lines (high weight for content)\n      const transcriptMatches = snapshot.transcript_lines.filter(line => \n        line.toLowerCase().includes(searchTerm)\n      );\n      if (transcriptMatches.length > 0) {\n        relevanceScore += 7 * transcriptMatches.length;\n        transcriptMatches.forEach(match => {\n          matchedContent.push(`Conversation: ${match}`);\n        });\n      }\n\n      // Search in metrics (if they relate to search terms)\n      const metricsKeywords = {\n        'ecological': ['environment', 'ecological', 'green', 'sustainability', 'carbon', 'eco'],\n        'wellbeing': ['wellbeing', 'health', 'wellness', 'happiness', 'quality of life'],\n        'efficiency': ['efficiency', 'optimization', 'performance', 'productivity'],\n        'resilience': ['resilience', 'stability', 'robust', 'recovery', 'adaptation'],\n        'equity': ['equity', 'fairness', 'equal', 'justice', 'distribution'],\n        'innovation': ['innovation', 'technology', 'advancement', 'research', 'development']\n      };\n\n      Object.entries(metricsKeywords).forEach(([metric, keywords]) => {\n        if (keywords.some(keyword => searchTerm.includes(keyword))) {\n          const value = snapshot.metrics_delta[metric as keyof SnapshotMetrics];\n          if (Math.abs(value) > 0) {\n            relevanceScore += 3;\n            matchedContent.push(`${metric}: ${value > 0 ? '+' : ''}${value.toFixed(1)}`);\n          }\n        }\n      });\n\n      // Search for specific terms that agents commonly discuss\n      const agentTopics = {\n        'energy': ['solar', 'power', 'grid', 'electricity', 'renewable'],\n        'transport': ['transport', 'mobility', 'transit', 'autonomous', 'vehicle'],\n        'agriculture': ['farm', 'food', 'crop', 'harvest', 'hydroponic'],\n        'health': ['medical', 'healthcare', 'treatment', 'diagnosis', 'wellness'],\n        'education': ['learning', 'teaching', 'curriculum', 'knowledge', 'training'],\n        'resource': ['allocation', 'distribution', 'management', 'supply', 'inventory'],\n        'infrastructure': ['building', 'construction', 'habitat', 'facility', 'structure'],\n        'social': ['community', 'social', 'coordination', 'collaboration', 'interaction'],\n        'governance': ['ethics', 'policy', 'decision', 'governance', 'regulation'],\n        'ecology': ['ecosystem', 'biodiversity', 'environmental', 'conservation', 'restoration']\n      };\n\n      Object.entries(agentTopics).forEach(([topic, keywords]) => {\n        if (keywords.some(keyword => searchTerm.includes(keyword))) {\n          const topicMatches = snapshot.transcript_lines.filter(line =>\n            keywords.some(k => line.toLowerCase().includes(k))\n          );\n          if (topicMatches.length > 0) {\n            relevanceScore += 5;\n            matchedContent.push(`${topic.charAt(0).toUpperCase() + topic.slice(1)} Topic: ${topicMatches.length} references`);\n          }\n        }\n      });\n\n      return {\n        id: snapshot.id,\n        timestamp: new Date(snapshot.timestamp_start).toLocaleTimeString('en-US', { \n          hour12: false, \n          hour: '2-digit', \n          minute: '2-digit' \n        }),\n        title: snapshot.title,\n        status: snapshot.status,\n        impact: snapshot.summary_line,\n        participants: snapshot.participants,\n        messageCount: snapshot.transcript_lines.length,\n        relevanceScore,\n        matchedContent: matchedContent.slice(0, 5) // Limit to top 5 matches\n      };\n    })\n    .filter(result => result.relevanceScore > 0) // Only return results with matches\n    .sort((a, b) => b.relevanceScore - a.relevanceScore); // Sort by relevance\n\n    return results;\n  }\n}\n\nexport default ArchiveSnapshotManager;","size_bytes":21337},"client/src/pages/AgoraChain.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { format } from \"date-fns\";\nimport { useLocation } from \"wouter\";\n\n// Agent domain mapping\nconst AGENT_DOMAINS = [\n  { id: 'alpha', name: 'ALPHA', domain: 'Infrastructure & Habitat' },\n  { id: 'beta', name: 'BETA', domain: 'Energy Systems' },\n  { id: 'gamma', name: 'GAMMA', domain: 'Food & Agriculture' },\n  { id: 'delta', name: 'DELTA', domain: 'Ecology & Restoration' },\n  { id: 'epsilon', name: 'EPSILON', domain: 'Social & Wellbeing' },\n  { id: 'zeta', name: 'ZETA', domain: 'Transportation & Mobility' },\n  { id: 'eta', name: 'ETA', domain: 'Health & Medical' },\n  { id: 'theta', name: 'THETA', domain: 'Education & Knowledge' },\n  { id: 'iota', name: 'IOTA', domain: 'Resource Management' },\n  { id: 'kappa', name: 'KAPPA', domain: 'Culture, Ethics & Governance' }\n];\n\ninterface ChainEvent {\n  id: string;\n  timestamp: string;\n  agent: string;\n  domain: string;\n  action: 'STAKING' | 'UNSTAKING' | 'FAUCET OPENED' | 'FAUCET CLOSED' | 'ATTESTED' | 'REJECTED' | 'ROLLED BACK' | 'FAILED' | 'CONNECTED' | 'DISCONNECTED';\n  amount?: number;\n  details: string;\n  poolBalance?: number;\n  impact?: {\n    ecological?: number;\n    wellbeing?: number;\n    efficiency?: number;\n    resilience?: number;\n    equity?: number;\n    innovation?: number;\n  };\n  wallet?: string;\n  status: 'PENDING' | 'CONFIRMED' | 'FAILED';\n}\n\ninterface StakePosition {\n  agent: string;\n  staked: number;\n  pending: number;\n  unlockDate?: string;\n  influenceScore: number;\n  accessTickets: number;\n  lockPeriod?: number;\n}\n\nexport default function AgoraChain() {\n  const [, setLocation] = useLocation();\n\n  const [chainEvents, setChainEvents] = useState<ChainEvent[]>([]);\n  const [walletConnected, setWalletConnected] = useState(true);  // Set to true for testing\n  const [walletAlias, setWalletAlias] = useState<string>('beta7…vxs');\n  const [showStakeDrawer, setShowStakeDrawer] = useState(false);\n  const [selectedAgent, setSelectedAgent] = useState<string>('');\n  const [stakeAmount, setStakeAmount] = useState<number>(0);\n  const [userPositions, setUserPositions] = useState<StakePosition[]>([]);\n  const [currentTime, setCurrentTime] = useState(format(new Date(), 'HH:mm:ss'));\n  \n  // Modal state\n  const [showStakeModal, setShowStakeModal] = useState(false);\n  const [stakeModalAgent, setStakeModalAgent] = useState<string>('');\n  const [stakeModalType, setStakeModalType] = useState<'stake' | 'unstake'>('stake');\n  const [modalStakeAmount, setModalStakeAmount] = useState<string>('');\n  const [lockPeriod, setLockPeriod] = useState<number>(7);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [validationError, setValidationError] = useState<string>('');\n  const [transactionMessage, setTransactionMessage] = useState<string>('');\n\n  // Generate pool statistics for each agent\n  const generatePoolStats = (agentId: string) => {\n    const basePool = Math.floor(Math.random() * 50000) + 10000;\n    const activeStakers = Math.floor(Math.random() * 200) + 50;\n    const netFlow = (Math.random() - 0.5) * 2000;\n    \n    return {\n      poolBalance: basePool,\n      activeStakers,\n      netFlow24h: netFlow,\n      fieldStrength: Math.random() * 2 - 1\n    };\n  };\n\n  // Update current time\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(format(new Date(), 'HH:mm:ss'));\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // Phantom wallet connection\n  const connectWallet = async (type: 'phantom') => {\n    try {\n      if (type === 'phantom') {\n        // Check if Phantom is available\n        const phantom = (window as any).phantom?.solana;\n        \n        if (!phantom) {\n          // Open Phantom installation page\n          window.open('https://phantom.app/', '_blank');\n          return;\n        }\n\n        if (phantom.isPhantom) {\n          // Request connection to Phantom\n          const response = await phantom.connect();\n          const publicKey = response.publicKey.toString();\n          \n          setWalletConnected(true);\n          setWalletAlias(`phantom_${publicKey.slice(0, 4)}...${publicKey.slice(-4)}`);\n          \n          // Add connect event to chain\n          const connectEvent: ChainEvent = {\n            id: `connect-${Date.now()}`,\n            timestamp: format(new Date(), 'HH:mm'),\n            domain: 'WALLET',\n            agent: 'PHANTOM',\n            action: 'CONNECTED',\n            details: `Wallet connected: ${publicKey.slice(0, 4)}...${publicKey.slice(-4)}`,\n            status: 'CONFIRMED',\n            wallet: publicKey.slice(0, 4) + '...' + publicKey.slice(-4)\n          };\n          \n          setChainEvents(prev => [connectEvent, ...prev]);\n          \n          // Generate mock positions after successful connection\n          const positions: StakePosition[] = AGENT_DOMAINS.slice(0, 3).map(agent => ({\n            agent: agent.id,\n            staked: Math.floor(Math.random() * 1000) + 100,\n            pending: Math.floor(Math.random() * 100),\n            unlockDate: Math.random() > 0.5 ? format(new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000), 'yyyy-MM-dd') : undefined,\n            influenceScore: Math.floor(Math.random() * 100) + 50,\n            accessTickets: Math.floor(Math.random() * 10) + 2,\n            lockPeriod: [7, 30, 90][Math.floor(Math.random() * 3)]\n          }));\n          \n          setUserPositions(positions);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to connect wallet:', error);\n    }\n  };\n\n  // Disconnect wallet function\n  const disconnectWallet = async () => {\n    try {\n      const phantom = (window as any).phantom?.solana;\n      if (phantom && phantom.isPhantom) {\n        await phantom.disconnect();\n      }\n      \n      setWalletConnected(false);\n      setWalletAlias('');\n      setUserPositions([]);\n      \n      // Add disconnect event to chain\n      const disconnectEvent: ChainEvent = {\n        id: `disconnect-${Date.now()}`,\n        timestamp: format(new Date(), 'HH:mm'),\n        domain: 'WALLET',\n        agent: 'PHANTOM',\n        action: 'DISCONNECTED',\n        details: 'Wallet disconnected successfully',\n        status: 'CONFIRMED'\n      };\n      \n      setChainEvents(prev => [disconnectEvent, ...prev]);\n    } catch (error) {\n      console.error('Failed to disconnect wallet:', error);\n    }\n  };\n\n  // Generate initial chain events\n  useEffect(() => {\n    const generateInitialEvents = () => {\n      const events: ChainEvent[] = [];\n      const now = new Date();\n      \n      for (let i = 0; i < 20; i++) {\n        const agent = AGENT_DOMAINS[Math.floor(Math.random() * AGENT_DOMAINS.length)];\n        const timestamp = new Date(now.getTime() - i * 60 * 1000); // Every minute backwards\n        const actions: ChainEvent['action'][] = ['STAKING', 'UNSTAKING', 'FAUCET OPENED', 'FAUCET CLOSED', 'ATTESTED'];\n        const action = actions[Math.floor(Math.random() * actions.length)];\n        \n        let details = '';\n        let amount;\n        let impact;\n        \n        if (action === 'STAKING' || action === 'UNSTAKING') {\n          amount = Math.floor(Math.random() * 1000) + 100;\n          const wallet = `${['alpha', 'beta', 'gamma', 'delta'][Math.floor(Math.random() * 4)]}…${Math.random().toString(36).substr(2, 3)}`;\n          details = `${action === 'STAKING' ? '+' : '-'}${amount} VPC | Pool: ${Math.floor(Math.random() * 50000) + 10000} VPC | ${agent.domain.split(' ')[0].toUpperCase()}: ${(Math.random() * 2).toFixed(1)}`;\n        } else if (action.includes('FAUCET')) {\n          const resource = ['kWh', 'L/day', 'kg/day'][Math.floor(Math.random() * 3)];\n          const rate = Math.floor(Math.random() * 5000) + 500;\n          const duration = ['24h', '48h', '72h'][Math.floor(Math.random() * 3)];\n          details = `${rate} ${resource} → ${agent.domain.split(' ')[0]} Hub-${Math.floor(Math.random() * 10) + 1} | ${duration} | ECOLOGICAL: ${(Math.random() * 2).toFixed(1)}, EQUITY: ${(Math.random() * 1).toFixed(1)}`;\n        } else {\n          details = `Verification completed for ${agent.domain} protocol update`;\n        }\n        \n        events.push({\n          id: `event-${timestamp.getTime()}`,\n          timestamp: format(timestamp, 'HH:mm'),\n          agent: agent.name,\n          domain: agent.domain,\n          action,\n          amount,\n          details,\n          poolBalance: Math.floor(Math.random() * 50000) + 10000,\n          impact,\n          status: Math.random() > 0.1 ? 'CONFIRMED' : 'PENDING'\n        });\n      }\n      \n      return events.sort((a, b) => b.timestamp.localeCompare(a.timestamp));\n    };\n    \n    setChainEvents(generateInitialEvents());\n  }, []);\n\n  // Simulate real-time events\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const agent = AGENT_DOMAINS[Math.floor(Math.random() * AGENT_DOMAINS.length)];\n      const actions: ChainEvent['action'][] = ['STAKING', 'UNSTAKING', 'FAUCET OPENED'];\n      const action = actions[Math.floor(Math.random() * actions.length)];\n      \n      let details = '';\n      let amount;\n      let impact;\n      \n      if (action === 'STAKING' || action === 'UNSTAKING') {\n        amount = Math.floor(Math.random() * 500) + 50;\n        const wallet = `${['alpha', 'beta', 'gamma'][Math.floor(Math.random() * 3)]}…${Math.random().toString(36).substr(2, 3)}`;\n        details = `${action === 'STAKING' ? '+' : '-'}${amount} VPC | Pool: ${Math.floor(Math.random() * 50000) + 10000} VPC | ${agent.domain.split(' ')[0].toUpperCase()}: ${(Math.random() * 2).toFixed(1)}`;\n      } else {\n        const resource = ['kWh', 'L/day', 'kg/day'][Math.floor(Math.random() * 3)];\n        const rate = Math.floor(Math.random() * 5000) + 500;\n        const duration = ['24h', '48h'][Math.floor(Math.random() * 2)];\n        details = `${rate} ${resource} → ${agent.domain.split(' ')[0]} Hub-${Math.floor(Math.random() * 5) + 1} | ${duration} | ECOLOGICAL: ${(Math.random() * 1.5).toFixed(1)}, WELLBEING: ${(Math.random() * 1).toFixed(1)}`;\n      }\n      \n      const newEvent: ChainEvent = {\n        id: `event-${Date.now()}`,\n        timestamp: format(new Date(), 'HH:mm'),\n        agent: agent.name,\n        domain: agent.domain,\n        action,\n        amount,\n        details,\n        poolBalance: Math.floor(Math.random() * 50000) + 10000,\n        impact,\n        status: 'CONFIRMED'\n      };\n      \n      setChainEvents(prev => [newEvent, ...prev].slice(0, 50)); // Keep only latest 50 events\n    }, 15000); // New event every 15 seconds\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  // Wallet gating and modal handlers\n  const handleStakeAction = (agentId: string, type: 'stake' | 'unstake') => {\n    console.log('handleStakeAction called:', { agentId, type, walletConnected });\n    if (!walletConnected) {\n      console.log('Wallet not connected, showing message');\n      setTransactionMessage('> Connect wallet (Phantom / MetaMask) to interact with staking.');\n      setTimeout(() => setTransactionMessage(''), 5000);\n      return;\n    }\n    console.log('Opening stake modal');\n    openStakeModal(agentId, type);\n  };\n\n  const openStakeModal = (agentId: string, type: 'stake' | 'unstake') => {\n    setStakeModalAgent(agentId);\n    setStakeModalType(type);\n    setModalStakeAmount('');\n    setLockPeriod(7);\n    setValidationError('');\n    setIsSubmitting(false);\n    setShowStakeModal(true);\n  };\n\n  const closeStakeModal = () => {\n    setShowStakeModal(false);\n    setStakeModalAgent('');\n    setModalStakeAmount('');\n    setValidationError('');\n    setIsSubmitting(false);\n  };\n\n  const validateStakeAmount = () => {\n    const amount = parseFloat(modalStakeAmount);\n    if (!amount || amount <= 0) {\n      setValidationError('');\n      return false;\n    }\n\n    const userPosition = userPositions.find(p => p.agent === stakeModalAgent);\n    const userBalance = 10000; // Mock user balance - would come from wallet\n    \n    if (stakeModalType === 'stake' && amount > userBalance) {\n      setValidationError('Amount exceeds available balance.');\n      return false;\n    } else if (stakeModalType === 'unstake' && amount > (userPosition?.staked || 0)) {\n      setValidationError('Amount exceeds your staked amount.');\n      return false;\n    } else {\n      setValidationError('');\n      return true;\n    }\n  };\n\n  const confirmStakeAction = async () => {\n    if (!validateStakeAmount()) return;\n    \n    const amount = parseFloat(modalStakeAmount);\n    const agent = AGENT_DOMAINS.find(a => a.id === stakeModalAgent);\n    if (!agent) return;\n\n    setIsSubmitting(true);\n    closeStakeModal();\n    \n    // Progressive loading animation with multiple steps\n    const loadingSteps = [\n      '> Validating transaction...',\n      '> Connecting to agent pool...',\n      '> Processing on-chain...',\n      '> Updating pool balance...',\n      '> Finalizing stake position...'\n    ];\n    \n    // Console log for debugging\n    console.log(`[${format(new Date(), 'HH:mm:ss')}] UI ACTION ${stakeModalType.toUpperCase()} agent=${stakeModalAgent} amount=${amount} status=submitted`);\n    \n    try {\n      // Show progressive loading steps\n      for (let i = 0; i < loadingSteps.length; i++) {\n        setTransactionMessage(loadingSteps[i]);\n        await new Promise(resolve => setTimeout(resolve, 350));\n      }\n      \n      // Additional delay for final processing\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Simulate random success/failure (90% success rate)\n      const success = Math.random() > 0.1;\n      \n      if (success) {\n        // Success: Update chain events and user positions\n        const newEvent: ChainEvent = {\n          id: `${stakeModalType}-${Date.now()}`,\n          timestamp: format(new Date(), 'HH:mm:ss'),\n          agent: agent.name,\n          domain: agent.domain,\n          action: stakeModalType === 'stake' ? 'STAKING' : 'UNSTAKING',\n          amount: amount,\n          details: `${stakeModalType === 'stake' ? '+' : '-'}${amount} VPC by ${walletAlias} | Pool: ${Math.floor(Math.random() * 50000) + 10000 + (stakeModalType === 'stake' ? amount : -amount)} VPC | ${agent.domain.split(' ')[0].toUpperCase()}: ${(amount * 0.001 * (stakeModalType === 'stake' ? 1 : -1)).toFixed(1)}`,\n          poolBalance: Math.floor(Math.random() * 50000) + 10000 + (stakeModalType === 'stake' ? amount : -amount),\n          status: 'CONFIRMED',\n          wallet: walletAlias\n        };\n        \n        setChainEvents(prev => [newEvent, ...prev]);\n        \n        // Update user position\n        setUserPositions(prev => {\n          const existing = prev.find(p => p.agent === stakeModalAgent);\n          if (existing) {\n            const newStaked = stakeModalType === 'stake' \n              ? existing.staked + amount \n              : Math.max(0, existing.staked - amount);\n            return prev.map(p => p.agent === stakeModalAgent \n              ? { ...p, staked: newStaked, influenceScore: Math.max(0, p.influenceScore + Math.floor(amount * 0.1 * (stakeModalType === 'stake' ? 1 : -1))) }\n              : p\n            );\n          } else if (stakeModalType === 'stake') {\n            return [...prev, {\n              agent: stakeModalAgent,\n              staked: amount,\n              pending: 0,\n              influenceScore: Math.floor(amount * 0.1),\n              accessTickets: Math.floor(amount * 0.05)\n            }];\n          }\n          return prev;\n        });\n        \n        setTransactionMessage('> Transaction confirmed.');\n        setTimeout(() => setTransactionMessage(''), 3000);\n        \n        console.log(`[${format(new Date(), 'HH:mm:ss')}] UI ACTION ${stakeModalType.toUpperCase()} agent=${stakeModalAgent} amount=${amount} status=confirmed`);\n      } else {\n        // Failure\n        const failedEvent: ChainEvent = {\n          id: `${stakeModalType}-failed-${Date.now()}`,\n          timestamp: format(new Date(), 'HH:mm:ss'),\n          agent: agent.name,\n          domain: agent.domain,\n          action: stakeModalType === 'stake' ? 'STAKING' : 'UNSTAKING',\n          amount: amount,\n          details: `FAILED Insufficient balance | No state change`,\n          status: 'FAILED'\n        };\n        \n        setChainEvents(prev => [failedEvent, ...prev]);\n        setTransactionMessage('> Transaction failed: Insufficient balance.');\n        \n        console.log(`[${format(new Date(), 'HH:mm:ss')}] UI ACTION ${stakeModalType.toUpperCase()} agent=${stakeModalAgent} amount=${amount} status=failed`);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Open blockchain explorer for transaction\n  const openExplorer = (eventId: string) => {\n    // Store transaction data in localStorage for the explorer\n    localStorage.setItem('explorerTx', eventId);\n    // Open explorer in new tab\n    window.open('/explorer?tx=' + eventId, '_blank');\n  };\n\n  // Handle staking action\n  const handleStake = async () => {\n    if (!stakeAmount || stakeAmount <= 0) return;\n    \n    const agent = AGENT_DOMAINS.find(a => a.id === selectedAgent);\n    if (agent) {\n      const newEvent: ChainEvent = {\n        id: `stake-${Date.now()}`,\n        timestamp: format(new Date(), 'HH:mm'),\n        agent: agent.name,\n        domain: agent.domain,\n        action: 'STAKING',\n        amount: stakeAmount,\n        details: `+${stakeAmount} VPC | Pool: ${Math.floor(Math.random() * 50000) + 10000 + stakeAmount} VPC | ${agent.domain.split(' ')[0].toUpperCase()}: ${(stakeAmount * 0.001).toFixed(1)}`,\n        poolBalance: Math.floor(Math.random() * 50000) + 10000 + stakeAmount,\n        status: 'CONFIRMED',\n        wallet: walletAlias\n      };\n      \n      setChainEvents(prev => [newEvent, ...prev]);\n      \n      // Update user position\n      setUserPositions(prev => {\n        const existing = prev.find(p => p.agent === selectedAgent);\n        if (existing) {\n          return prev.map(p => p.agent === selectedAgent \n            ? { ...p, staked: p.staked + stakeAmount, influenceScore: p.influenceScore + Math.floor(stakeAmount * 0.1) }\n            : p\n          );\n        } else {\n          return [...prev, {\n            agent: selectedAgent,\n            staked: stakeAmount,\n            pending: 0,\n            influenceScore: Math.floor(stakeAmount * 0.1),\n            accessTickets: Math.floor(stakeAmount * 0.05)\n          }];\n        }\n      });\n    }\n    \n    setShowStakeDrawer(false);\n    setStakeAmount(0);\n  };\n\n  const openStakeDrawer = (agentId: string) => {\n    setSelectedAgent(agentId);\n    setShowStakeDrawer(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white text-gray-700 font-mono\">\n      {/* Agora Navigation Menu - matching the main Agora page */}\n      <div className=\"px-6 py-3 border-b border-gray-200 bg-gray-50/50 relative z-50\" style={{ marginTop: '64px' }}>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-6\">\n            <div>\n              <h1 className=\"text-xl font-light tracking-wide text-black\">AGORA</h1>\n              <p className=\"text-xs text-gray-500 font-mono\">Decision War Room</p>\n            </div>\n            <div className=\"flex gap-2\">\n              <button\n                onClick={() => setLocation('/agora')}\n                className=\"px-3 py-1 text-xs font-mono rounded bg-gray-200 text-gray-600 hover:bg-gray-300\"\n              >\n                LIVE MAP\n              </button>\n              <button\n                className=\"px-3 py-1 text-xs font-mono rounded bg-lime-500 text-white\"\n              >\n                AGORA CHAIN\n              </button>\n              <button\n                onClick={() => setLocation('/agora?view=archive')}\n                className=\"px-3 py-1 text-xs font-mono rounded bg-gray-200 text-gray-600 hover:bg-gray-300\"\n              >\n                ARCHIVE\n              </button>\n              <button\n                onClick={() => setLocation('/agora')}\n                className=\"px-3 py-1 text-xs font-mono rounded bg-gray-200 text-gray-600 hover:bg-gray-300\"\n              >\n                CHAT\n              </button>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-xs font-mono text-gray-600\">COUNCIL ACTIVE</span>\n            </div>\n            <div className=\"text-xs font-mono text-gray-400 bg-white px-2 py-1 rounded border\">\n              {currentTime}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Header matching archive style exactly */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"text-gray-800 text-xs font-semibold\">AGORA CHAIN — VENUS PROJECT NETWORK</div>\n        <div className=\"text-xs text-gray-600 flex items-center justify-between\">\n          <span>System Time: [{currentTime}] | Status: OPERATIONAL</span>\n          {!walletConnected ? (\n            <button onClick={() => connectWallet('phantom')} className=\"text-slate-600 hover:text-slate-800 underline\">\n              Connect Phantom Wallet\n            </button>\n          ) : (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-600\">{walletAlias}</span>\n              <button \n                onClick={disconnectWallet}\n                className=\"text-red-600 hover:text-red-800 underline text-xs\"\n              >\n                Disconnect\n              </button>\n            </div>\n          )}\n        </div>\n        <div className=\"border-t border-gray-200 my-2\"></div>\n      </div>\n\n      {/* Main content - live events on right, staking cards on left */}\n      <div className=\"p-6\">\n        <div className=\"space-y-8\">\n          \n          {/* What's happening on chain title */}\n          <div className=\"mb-6\">\n            <h2 className=\"text-sm font-semibold text-gray-800 mb-4\">What's happening on chain</h2>\n          </div>\n\n          {/* Live Chain Events */}\n          <div>\n            {/* Chain Events */}\n            <div className=\"space-y-1 text-xs max-h-96 overflow-y-auto mb-8\">\n              {chainEvents.length === 0 ? (\n                <div className=\"text-gray-500 p-4 text-center\">\n                  No chain events yet.<br/>\n                  Events will appear as staking and faucet activities occur.\n                </div>\n              ) : (\n                <AnimatePresence>\n                  {chainEvents.map((event, index) => (\n                    <motion.div\n                      key={event.id}\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      className=\"hover:bg-gray-100 p-1 cursor-pointer rounded transition-all duration-150\"\n                      onClick={() => openExplorer(event.id)}\n                      title=\"Click to view transaction details in explorer\"\n                    >\n                      <span className=\"text-slate-600 font-medium\">[{event.timestamp}]</span>\n                      <span className=\"ml-2 text-gray-800 font-semibold\">{event.domain.toUpperCase()}</span>\n                      <span className=\"ml-2 text-blue-600\">{event.action}</span>\n                      <span className=\"ml-2 text-gray-500\">{event.details}</span>\n                      <span className={`ml-4 text-xs ${\n                        event.status === 'CONFIRMED' ? 'text-green-600' :\n                        event.status === 'PENDING' ? 'text-yellow-600' :\n                        'text-red-600'\n                      }`}>\n                        {event.status}\n                      </span>\n                    </motion.div>\n                  ))}\n                </AnimatePresence>\n              )}\n            </div>\n\n            {/* Staking Protocols - arranged in 2 rows of 5 */}\n            <div className=\"grid grid-cols-5 gap-3\">\n              {AGENT_DOMAINS.map((agent) => {\n                const stats = generatePoolStats(agent.id);\n                const userPosition = userPositions.find(p => p.agent === agent.id);\n                \n                return (\n                  <div\n                    key={agent.id}\n                    className=\"border border-gray-200 p-2 hover:bg-gray-50 text-xs\"\n                  >\n                    <div className=\"font-semibold text-gray-800 mb-1 text-xs\">\n                      {agent.name} — {agent.domain}\n                    </div>\n                    \n                    <div className=\"space-y-0.5 text-xs\">\n                      <div>Pool Balance: <span className=\"font-mono\">{stats.poolBalance.toLocaleString()} VPC</span></div>\n                      <div>24h Net Flow: <span className={`font-mono ${stats.netFlow24h >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {stats.netFlow24h >= 0 ? '+' : ''}{stats.netFlow24h.toFixed(0)} VPC\n                      </span></div>\n                      <div>Active Stakers: <span className=\"font-mono\">{stats.activeStakers}</span></div>\n                      <div>Field Strength Δ (7d): <span className=\"font-mono text-xs\">ECOLOGICAL: +{(Math.random() * 2).toFixed(1)} | EFFICIENCY: +{(Math.random() * 2).toFixed(1)} | RESILIENCE: +{(Math.random() * 2).toFixed(1)}</span></div>\n                      <div>Faucet Threshold: <span className=\"font-mono text-xs\">{(stats.poolBalance + 5000).toLocaleString()} VPC (opens {Math.floor(Math.random() * 500) + 100} kWh/24h)</span></div>\n                      \n                      {userPosition && (\n                        <div className=\"border-t border-gray-200 pt-0.5 mt-1\">\n                          <div>Your Stake: <span className=\"font-mono text-lime-600\">{userPosition.staked} VPC</span></div>\n                        </div>\n                      )}\n                      \n                      <div className=\"pt-0.5 space-x-2 z-10 relative\">\n                        <button \n                          onClick={(e) => {\n                            e.stopPropagation();\n                            e.preventDefault();\n                            console.log('Stake button clicked for agent:', agent.id);\n                            handleStakeAction(agent.id, 'stake');\n                          }}\n                          className=\"text-slate-600 hover:text-slate-800 underline text-xs cursor-pointer z-10\"\n                        >\n                          Stake\n                        </button>\n                        <button \n                          onClick={(e) => {\n                            e.stopPropagation();\n                            e.preventDefault();\n                            console.log('Unstake button clicked for agent:', agent.id);\n                            handleStakeAction(agent.id, 'unstake');\n                          }}\n                          className=\"text-red-600 hover:text-red-800 underline text-xs cursor-pointer z-10\"\n                        >\n                          Unstake\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n            \n            <div className=\"mt-6 text-xs text-gray-500\">\n              &gt; Connect wallet to interact with staking protocols\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Stake Drawer - inline, archive style */}\n      {showStakeDrawer && selectedAgent && (() => {\n        const agent = AGENT_DOMAINS.find(a => a.id === selectedAgent);\n        const userPosition = userPositions.find(p => p.agent === selectedAgent);\n        \n        return (\n          <div className=\"mt-6 border-t border-gray-200 pt-6\">\n            <div className=\"text-xs font-semibold text-gray-800 mb-2\">\n              {agent?.name} — {agent?.domain}\n            </div>\n            \n            <div className=\"space-y-2 text-xs\">\n              <div>\n                <label className=\"text-gray-500\">Amount (VPC): </label>\n                <input\n                  type=\"number\"\n                  value={stakeAmount}\n                  onChange={(e) => setStakeAmount(Number(e.target.value))}\n                  className=\"ml-2 px-2 py-1 border border-gray-300 rounded text-xs font-mono w-24 focus:outline-none focus:ring-1 focus:ring-lime-500\"\n                  placeholder=\"100\"\n                />\n              </div>\n              \n              {userPosition && (\n                <div className=\"space-y-1\">\n                  <div>Your Position: Staked: <span className=\"font-mono text-lime-600\">{userPosition.staked} VPC</span>, Pending: <span className=\"font-mono text-yellow-600\">{userPosition.pending} VPC</span></div>\n                  <div>Influence Score: <span className=\"font-mono text-purple-600\">{userPosition.influenceScore}</span>, Access Tickets: <span className=\"font-mono text-blue-600\">{userPosition.accessTickets}</span></div>\n                  {userPosition.unlockDate && <div>Unlock Date: <span className=\"font-mono\">{userPosition.unlockDate}</span></div>}\n                </div>\n              )}\n              \n              <div className=\"space-x-2 pt-2\">\n                <button\n                  onClick={handleStake}\n                  disabled={!stakeAmount || stakeAmount <= 0}\n                  className=\"text-slate-600 hover:text-slate-800 underline disabled:text-gray-400 disabled:no-underline\"\n                >\n                  Stake\n                </button>\n                <button className=\"text-red-600 hover:text-red-800 underline\">\n                  Unstake\n                </button>\n                <button \n                  onClick={() => setShowStakeDrawer(false)}\n                  className=\"text-gray-500 hover:text-gray-700 underline\"\n                >\n                  Close\n                </button>\n              </div>\n              \n              <div className=\"text-gray-500 mt-2\">\n                Staking VPC strengthens this domain's allocation capacity. Rewards are non-financial: Influence Score, AccessTickets, Reputation.\n              </div>\n            </div>\n          </div>\n        );\n      })()}\n\n      {/* Interactive Stake/Unstake Modal with Enhanced Animations */}\n      <AnimatePresence>\n        {showStakeModal && (() => {\n          const agent = AGENT_DOMAINS.find(a => a.id === stakeModalAgent);\n          const stats = generatePoolStats(stakeModalAgent);\n          const userPosition = userPositions.find(p => p.agent === stakeModalAgent);\n          const userBalance = 10000; // Mock user balance\n          const stakAmount = parseFloat(modalStakeAmount) || 0;\n          const isValid = modalStakeAmount && stakAmount > 0 && \n            (stakeModalType === 'stake' ? stakAmount <= userBalance : stakAmount <= (userPosition?.staked || 0));\n          \n          // Animation calculations\n          const newPoolBalance = stakeModalType === 'stake' ? stats.poolBalance + stakAmount : Math.max(0, stats.poolBalance - stakAmount);\n          const poolChangePercent = stats.poolBalance > 0 ? ((newPoolBalance - stats.poolBalance) / stats.poolBalance) * 100 : 0;\n          const estimatedInfluence = stakAmount * 0.1;\n          \n          return (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0, transition: { duration: 0.15 } }}\n              className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 backdrop-blur-sm\"\n              onClick={closeStakeModal}\n              onKeyDown={(e) => {\n                if (e.key === 'Escape') closeStakeModal();\n                if (e.key === 'Enter' && isValid) confirmStakeAction();\n              }}\n              tabIndex={-1}\n            >\n              <motion.div\n                initial={{ scale: 0.9, opacity: 0, y: 20 }}\n                animate={{ \n                  scale: 1, \n                  opacity: 1, \n                  y: 0,\n                  transition: { type: \"spring\", damping: 25, stiffness: 300 }\n                }}\n                exit={{ \n                  scale: 0.95, \n                  opacity: 0, \n                  y: 10,\n                  transition: { duration: 0.15 }\n                }}\n                className=\"bg-white border border-gray-200 p-4 max-w-md w-full mx-4 text-xs shadow-lg\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                {/* Animated Header */}\n                <motion.div \n                  className=\"font-semibold text-gray-800 mb-3\"\n                  initial={{ opacity: 0, y: -10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: 0.1 }}\n                >\n                  [{currentTime}] {agent?.name} {stakeModalType.toUpperCase()}\n                </motion.div>\n                \n                {/* Body with staggered animations */}\n                <div className=\"space-y-1\">\n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.2 }}\n                  >\n                    Your balance: <span className=\"font-mono\">{userBalance.toLocaleString()} VPC</span>\n                  </motion.div>\n                  \n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.25 }}\n                  >\n                    Pool balance: <span className=\"font-mono\">{stats.poolBalance.toLocaleString()} VPC</span>\n                    {stakAmount > 0 && (\n                      <motion.span\n                        initial={{ opacity: 0, scale: 0.8 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        transition={{ delay: 0.3 }}\n                        className={`ml-2 text-xs ${poolChangePercent >= 0 ? 'text-green-600' : 'text-red-600'}`}\n                      >\n                        → {newPoolBalance.toLocaleString()} VPC ({poolChangePercent >= 0 ? '+' : ''}{poolChangePercent.toFixed(1)}%)\n                      </motion.span>\n                    )}\n                  </motion.div>\n                  \n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.3 }}\n                  >\n                    24h net flow: <span className={`font-mono ${stats.netFlow24h >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      {stats.netFlow24h >= 0 ? '+' : ''}{stats.netFlow24h.toFixed(0)} VPC\n                    </span>\n                  </motion.div>\n                  \n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.35 }}\n                  >\n                    Estimated influence (domain): \n                    <motion.span \n                      className=\"font-mono text-lime-600\"\n                      animate={{ \n                        scale: estimatedInfluence > 0 ? [1, 1.05, 1] : 1,\n                        color: estimatedInfluence > 0 ? '#65a30d' : '#6b7280'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      +{estimatedInfluence.toFixed(1)}\n                    </motion.span>\n                  </motion.div>\n                  \n                  {userPosition && (\n                    <div className=\"mt-2 pt-1 border-t border-gray-200\">\n                      <div>Your current stake: <span className=\"font-mono text-lime-600\">{userPosition.staked} VPC</span></div>\n                    </div>\n                  )}\n                  \n                  {/* Animated Input Section */}\n                  <motion.div \n                    className=\"mt-3 pt-2 border-t border-gray-200\"\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: 0.4 }}\n                  >\n                    <motion.input\n                      type=\"number\"\n                      value={modalStakeAmount}\n                      onChange={(e) => {\n                        setModalStakeAmount(e.target.value);\n                        validateStakeAmount();\n                      }}\n                      className=\"px-2 py-1 border border-gray-300 text-xs font-mono w-24 focus:outline-none focus:ring-1 focus:ring-lime-500 transition-all duration-200\"\n                      placeholder=\"100\"\n                      autoFocus\n                      animate={{\n                        borderColor: validationError ? '#dc2626' : (stakAmount > 0 ? '#65a30d' : '#d1d5db'),\n                        boxShadow: stakAmount > 0 ? '0 0 0 1px rgba(101, 163, 13, 0.15)' : 'none'\n                      }}\n                      whileFocus={{ \n                        scale: 1.02,\n                        transition: { duration: 0.1 }\n                      }}\n                    />\n                    <motion.span \n                      className=\"ml-2 text-gray-500\"\n                      animate={{ \n                        color: stakAmount > 0 ? '#65a30d' : '#6b7280'\n                      }}\n                    >\n                      VPC\n                    </motion.span>\n                  </motion.div>\n                  \n                  {/* Animated Lock Period Selector */}\n                  {stakeModalType === 'stake' && (\n                    <motion.div \n                      className=\"mt-2\"\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: 0.45 }}\n                    >\n                      <span className=\"text-gray-500 mr-2\">Lock period:</span>\n                      {[7, 30, 90].map((days, index) => (\n                        <motion.button\n                          key={days}\n                          onClick={() => setLockPeriod(days)}\n                          className={`mr-2 underline transition-all duration-200 ${\n                            lockPeriod === days \n                              ? 'text-gray-800 bg-gray-200 px-1' \n                              : 'text-gray-500 hover:text-gray-700'\n                          }`}\n                          initial={{ opacity: 0, x: -10 }}\n                          animate={{ opacity: 1, x: 0 }}\n                          transition={{ delay: 0.5 + index * 0.05 }}\n                          whileHover={{ scale: 1.05 }}\n                          whileTap={{ scale: 0.95 }}\n                        >\n                          {days} days\n                        </motion.button>\n                      ))}\n                    </motion.div>\n                  )}\n                  \n                  {/* Animated Validation Error */}\n                  <AnimatePresence>\n                    {validationError && (\n                      <motion.div \n                        className=\"text-red-600 text-xs mt-1\"\n                        initial={{ opacity: 0, scale: 0.95, y: -5 }}\n                        animate={{ opacity: 1, scale: 1, y: 0 }}\n                        exit={{ opacity: 0, scale: 0.95, y: -5 }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        {validationError}\n                      </motion.div>\n                    )}\n                  </AnimatePresence>\n                  \n                  {/* Animated Footer Buttons */}\n                  <motion.div \n                    className=\"space-x-4 pt-3 mt-3 border-t border-gray-200\"\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: 0.6 }}\n                  >\n                    <motion.button\n                      onClick={confirmStakeAction}\n                      disabled={!isValid || isSubmitting}\n                      className=\"text-lime-600 hover:text-lime-800 underline disabled:text-gray-400 disabled:no-underline transition-all duration-200\"\n                      whileHover={isValid && !isSubmitting ? { scale: 1.05 } : {}}\n                      whileTap={isValid && !isSubmitting ? { scale: 0.95 } : {}}\n                      animate={{\n                        color: isSubmitting ? '#9ca3af' : (isValid ? '#65a30d' : '#9ca3af')\n                      }}\n                    >\n                      {isSubmitting ? 'Processing...' : 'Confirm'}\n                    </motion.button>\n                    <motion.button \n                      onClick={closeStakeModal}\n                      className=\"text-gray-500 hover:text-gray-700 underline transition-all duration-200\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      Cancel\n                    </motion.button>\n                  </motion.div>\n                </div>\n              </motion.div>\n            </motion.div>\n          );\n        })()}\n      </AnimatePresence>\n\n      {/* Enhanced Transaction Message with Animation */}\n      <AnimatePresence>\n        {transactionMessage && (\n          <motion.div \n            className=\"fixed top-4 left-1/2 transform -translate-x-1/2 bg-white border border-gray-300 shadow-lg px-4 py-2 text-xs font-mono z-50 max-w-md\"\n            initial={{ opacity: 0, y: -20, scale: 0.95 }}\n            animate={{ opacity: 1, y: 0, scale: 1 }}\n            exit={{ opacity: 0, y: -10, scale: 0.95 }}\n            transition={{ duration: 0.3, ease: \"easeOut\" }}\n          >\n            <div className=\"flex items-center\">\n              {isSubmitting && (\n                <motion.div\n                  className=\"w-2 h-2 bg-lime-500 rounded-full mr-2\"\n                  animate={{ scale: [1, 1.2, 1] }}\n                  transition={{ duration: 1, repeat: Infinity }}\n                />\n              )}\n              <span className={isSubmitting ? 'text-gray-700' : transactionMessage.includes('✓') ? 'text-green-600' : transactionMessage.includes('failed') ? 'text-red-600' : 'text-gray-700'}>\n                {transactionMessage}\n              </span>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":42327},"client/src/pages/Explorer.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { ArrowLeft, ExternalLink, Copy, CheckCircle, Clock, AlertCircle } from 'lucide-react';\nimport { format } from 'date-fns';\n\ninterface TransactionDetails {\n  id: string;\n  timestamp: string;\n  agent: string;\n  domain: string;\n  action: string;\n  amount?: number;\n  details: string;\n  poolBalance?: number;\n  wallet?: string;\n  status: 'PENDING' | 'CONFIRMED' | 'FAILED';\n  blockHeight?: number;\n  gasUsed?: number;\n  fee?: number;\n  hash?: string;\n}\n\nexport default function Explorer() {\n  const [, setLocation] = useLocation();\n  const [transaction, setTransaction] = useState<TransactionDetails | null>(null);\n  const [copied, setCopied] = useState(false);\n  const [currentTime, setCurrentTime] = useState(format(new Date(), 'HH:mm:ss'));\n\n  // Update current time\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(format(new Date(), 'HH:mm:ss'));\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // Get transaction ID from URL or localStorage\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const txId = urlParams.get('tx') || localStorage.getItem('explorerTx');\n    \n    if (txId) {\n      // Mock transaction data - in real app, this would fetch from API\n      setTransaction({\n        id: txId,\n        timestamp: new Date().toISOString(),\n        agent: 'ALPHA',\n        domain: 'INFRASTRUCTURE & HABITAT DESIGN',\n        action: 'STAKING',\n        amount: 1000,\n        details: '+1000 VPC by beta7…vxs | Pool: 45000 VPC | INFRASTRUCTURE: 1.0',\n        poolBalance: 45000,\n        wallet: 'beta7…vxs',\n        status: 'CONFIRMED',\n        blockHeight: Math.floor(Math.random() * 1000000) + 500000,\n        gasUsed: Math.floor(Math.random() * 50000) + 20000,\n        fee: 0.0001,\n        hash: `0x${Math.random().toString(16).substr(2, 64)}`\n      });\n    }\n  }, []);\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  const formatHash = (hash: string) => {\n    return `${hash.slice(0, 8)}...${hash.slice(-6)}`;\n  };\n\n  if (!transaction) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-gray-500\">Loading transaction...</div>\n      </div>\n    );\n  }\n\n  const StatusIcon = () => {\n    switch (transaction.status) {\n      case 'CONFIRMED':\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'PENDING':\n        return <Clock className=\"w-4 h-4 text-yellow-600\" />;\n      case 'FAILED':\n        return <AlertCircle className=\"w-4 h-4 text-red-600\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <motion.div \n        className=\"bg-white border-b border-gray-200 px-6 py-4\"\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <motion.button\n              onClick={() => setLocation('/agora-chain')}\n              className=\"flex items-center text-gray-600 hover:text-gray-800 mr-4\"\n              whileHover={{ scale: 1.02 }}\n              whileTap={{ scale: 0.98 }}\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-1\" />\n              Back to Chain\n            </motion.button>\n            <div className=\"text-sm font-mono text-gray-800\">\n              [{currentTime}] AGORA CHAIN EXPLORER\n            </div>\n          </div>\n          <div className=\"text-xs text-gray-500\">\n            Block #{transaction.blockHeight?.toLocaleString()}\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Main Content */}\n      <div className=\"max-w-4xl mx-auto px-6 py-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.1 }}\n        >\n          {/* Transaction Status */}\n          <div className=\"bg-white rounded-lg border border-gray-200 mb-6 p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center\">\n                <StatusIcon />\n                <span className=\"ml-2 font-semibold text-gray-900\">\n                  Transaction {transaction.status.toLowerCase()}\n                </span>\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                {format(new Date(transaction.timestamp), 'MMM dd, yyyy HH:mm:ss')}\n              </div>\n            </div>\n            \n            <div className=\"text-2xl font-bold text-gray-900 mb-2\">\n              {transaction.action} • {transaction.agent}\n            </div>\n            <div className=\"text-gray-600 mb-4\">\n              {transaction.domain}\n            </div>\n            \n            {transaction.amount && (\n              <div className=\"inline-flex items-center bg-lime-50 text-lime-800 px-3 py-1 rounded-full text-sm font-medium\">\n                {transaction.action === 'STAKING' ? '+' : '-'}{transaction.amount?.toLocaleString()} VPC\n              </div>\n            )}\n          </div>\n\n          {/* Transaction Details */}\n          <div className=\"bg-white rounded-lg border border-gray-200 mb-6\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Transaction Details</h2>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Left Column */}\n                <div className=\"space-y-4\">\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-500 mb-1\">Transaction Hash</div>\n                    <div className=\"flex items-center\">\n                      <span className=\"font-mono text-sm text-gray-900 mr-2\">\n                        {formatHash(transaction.hash || '')}\n                      </span>\n                      <motion.button\n                        onClick={() => copyToClipboard(transaction.hash || '')}\n                        className=\"p-1 text-gray-400 hover:text-gray-600\"\n                        whileHover={{ scale: 1.1 }}\n                        whileTap={{ scale: 0.9 }}\n                      >\n                        <Copy className=\"w-3 h-3\" />\n                      </motion.button>\n                    </div>\n                  </div>\n\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-500 mb-1\">From Wallet</div>\n                    <div className=\"flex items-center\">\n                      <span className=\"font-mono text-sm text-gray-900 mr-2\">\n                        {transaction.wallet}\n                      </span>\n                      <motion.button\n                        onClick={() => copyToClipboard(transaction.wallet || '')}\n                        className=\"p-1 text-gray-400 hover:text-gray-600\"\n                        whileHover={{ scale: 1.1 }}\n                        whileTap={{ scale: 0.9 }}\n                      >\n                        <Copy className=\"w-3 h-3\" />\n                      </motion.button>\n                    </div>\n                  </div>\n\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-500 mb-1\">Block Height</div>\n                    <div className=\"font-mono text-sm text-gray-900\">\n                      {transaction.blockHeight?.toLocaleString()}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Right Column */}\n                <div className=\"space-y-4\">\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-500 mb-1\">Pool Balance</div>\n                    <div className=\"font-mono text-sm text-gray-900\">\n                      {transaction.poolBalance?.toLocaleString()} VPC\n                    </div>\n                  </div>\n\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-500 mb-1\">Gas Used</div>\n                    <div className=\"font-mono text-sm text-gray-900\">\n                      {transaction.gasUsed?.toLocaleString()}\n                    </div>\n                  </div>\n\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-500 mb-1\">Transaction Fee</div>\n                    <div className=\"font-mono text-sm text-gray-900\">\n                      {transaction.fee} VPC\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Raw Data */}\n          <div className=\"bg-white rounded-lg border border-gray-200\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Raw Transaction Data</h2>\n            </div>\n            <div className=\"p-6\">\n              <pre className=\"bg-gray-50 rounded-lg p-4 text-xs font-mono text-gray-700 overflow-x-auto\">\n{JSON.stringify({\n  id: transaction.id,\n  timestamp: transaction.timestamp,\n  agent: transaction.agent,\n  domain: transaction.domain,\n  action: transaction.action,\n  amount: transaction.amount,\n  details: transaction.details,\n  poolBalance: transaction.poolBalance,\n  wallet: transaction.wallet,\n  status: transaction.status,\n  blockHeight: transaction.blockHeight,\n  gasUsed: transaction.gasUsed,\n  fee: transaction.fee,\n  hash: transaction.hash\n}, null, 2)}\n              </pre>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Copy Success Toast */}\n      <AnimatePresence>\n        {copied && (\n          <motion.div\n            className=\"fixed top-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg\"\n            initial={{ opacity: 0, x: 100 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: 100 }}\n          >\n            Copied to clipboard!\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":10235}}}